{"pred": "   private final transient KademliaRoutingTable routingTable;\n    private final transient JKademliaRoutingTable jRoutingTable;\n    private final transient KadConfiguration config;\n    private final transient MessageReceiver receiver;\n    private final transient MessageSender sender;\n    private", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       mEffects.add(new NoEffect());\n        mEffects.add(new ContrastFilter());\n        mEffects.add(new BrightnessFilter());\n        mEffects.add(new GammaFilter());\n        mEffects.add(new HueFilter());\n        mEffects.", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class MyCipher1(Cipher):  # noqa: D101\n    key_schedule = KeySchedule1\n    encryption = MyFunction\n\n\n# 2nd cipher: linear key schedule and encryption with XOR and rotations\n\nclass MyFunction2(BvFunction", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n\n    public EffectManager(Activity activity, ViewGroup parameterListView) {\n        mActivity = activity;\n        mParameterListView = parameterListView;\n        mEffects = new ArrayList<>();\n        mEffects.add(", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyEvent::fromCommand, this::queueEvent", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "   private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务队列\n     */\n    private ArrayList<Task<?>> taskQueue = new ArrayList<>();\n\n    /**\n     * 任务队列锁\n     */\n    private Object taskQueueLock =", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.path(), passphrase.chars(), args.checkFileIntegrity());\n\t\t\tSolutionContext solutionContext = SolutionContext.simulate(args.path(), passphrase, cryptorHolder.cryptor().get());", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           //save private and public Key to storage\n            rsa.saveRSAKeys(userId);\n            Log.d(this.getClass().getName(), \"Device registered with id: \" + deviceId);\n            Log.d(this.getClass().getName(), \"Device registered with id: \" +", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   U2fSignRequest u2fSignRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new U2fSignRequest(ACCOUNT_NAME, APP_ID_SIGN, SERVER_CHALLENGE", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           self.acctA = RadiusAccounting(self.uaA, self.uaO, self.global_config, self.pass_headers)\n        self.state = CCStateARComplete\n        self.uaO = self.uaA\n        self.uaA = None\n", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\nclass URI(Signature):\n    __typeid__ = 11\n\n    def __init__(self, uri):\n        self.uri = uri\n\n    @property\n    def uri_bytes(self):\n        return self.uri.encode('utf-8')\n\n   ", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "=====================\n\ndef convert_ast_constraint(ast_node):\n  \"\"\"\n    Converts an AST node to a constraint.\n  \"\"\"\n  if ast_node is None:\n    return None\n\n  if isinstance(ast_node, ast.UnaryOp):\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    public static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity != null) {\n            Log.", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       String login = AppSettings.getUserLogin();\n        String email = AppSettings.getUserEmail();\n        String name = AppSettings.getUserName();\n        String message = \"Location updated.\";\n        String city = getCity(latitude, longitude);\n        String country = get", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "```python\nnetwork = Network('net1')\n```\nThis line of code creates a new network named 'net1'.\n\nThe following lines of code set up the input layer and add some layers to the network.\n```python\ninput_layer = InputLayer('input')\nnetwork", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "```python\nclass BaseModel(Base):\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n        self.Meta = IMeta()\n        self.Meta.bind_to(self)\n        self.Meta.initialize_meta(self)", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "```python\n@method(infix=True, bp=100, lp=100, rp=100)\ndef evaluate_map_expression(self, context):\n    \"\"\"\n    Evaluates a map expression.\n    \"\"\"\n    if not", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    @Inject MovieInfoPresenter presenter;\n    @Inject MovieInfoAdapter movieInfoAdapter;\n    @Inject SimilarMoviesAdapter similarMoviesAdapter;\n    @Inject MovieTrailersAdapter movieTrailersAdapter;\n    @Inject Context context;\n    @BindView(R", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(CREATE_MBEAN, correlationId, instance.getObjectName());\n\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "=====================\n\nawait wild.set_message(wild_report)\nawait wild.insert()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "```python\ndata = SNLIData(\n    part=\"train\",\n    batch_size=c['batch_size'],\n    shuffle=True,\n    num_epochs=c['num_epochs'],\n    get_source=lambda: c['source'],\n   ", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n  # This test fails because the DopplerSine class is not defined in the code.\n  # To make it pass, you need to define the DopplerSine class and implement the\n  # methods required by the Doppler interface", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, Constant.REQUEST_CODE_PARTICIPANT_FORTUNATE);\n", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "=====================\n\ndef test_extend_beyond_max_extensions(self):\n    self.redlock.extend()\n    self.redlock.extend()\n    self.redlock.extend()\n    with self.assertRaises(TooManyExtensions):\n        self.red", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "class Sound(FmodObject):\n    \"\"\"Container for sample data that can be played on a\n    :py:class:`~pyfmod.Channel`.\n\n    :ivar int id: Sound identifier.\n    :ivar str name: Sound name.\n    :ivar int length", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "\n    @calg.register(CompressionAlgorithm)\n    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n\n    @sdproperty\n    def data(self):\n        return self._data\n\n    @data.register(", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n\n        # intensity of cells\n        findCellIntensity(img2, centers, detectCellShapeParameter = detectCellShapeParameter, verbose = verbose, out = out, **parameter);\n\n", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           Assets.perfectTapSound.play();\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play();\n        } else if (accuracy == Accuracy.NICE) {\n            Assets", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\r\n                Transaction transaction = transactionIterator.next();\r\n                printer.print(transaction);\r\n                print.append(printer.getPrintout());\r\n                System.out.println(print.toString());\r\n                print.setLength", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               //return pgm;\n            }\n        }\n        return pgm;\n    }\n\n    /**\n     * Execute a query and return the result.\n     *\n     * @param sqlQuery\n     * @param namedParams\n     * @param reqHeaders\n    ", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                   UsageEncryption.OWN,\n                    OperationMode.ENCRYPT,\n                    EncryptionAlgorithmCoded.NULL,\n                    AlgorithmParameterName.NULL,\n                    AlgorithmParameterValue.NULL,\n                    AlgorithmParameterName.NULL,\n                ", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.combExpCheck[i] == 0) {\n                                env.combExpCheck[i] = i;\n                                break;\n                            }\n                        }\n                    }\n                    regex.numCombExpCheck = env.numComb", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "=====================\n\nurl(r'^api/', include(api_urls)),\n\n\n# Documentation\n\nurl(r'^api/documentation/$', include_docs_urls(title=\"Dashboard API\"))\n]\n\nurlpatterns = [\n    url(r", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tpublic ItemAgeChart (MainActivity mainActivity, Resources res) {\n\t\t\tthis.mainActivity = mainActivity;\n\t\t\tthis.res = res;\n\t\t\tthis.meter = MeterSpec.TOTAL_DATA.getMeter (mainActivity);", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "   def set_storage_type(self, storage_type):\n        if storage_type in STORAGE_TYPES:\n            self._storage_type = storage_type\n        else:\n            raise PyOrientError(\n                \"Invalid storage type: \" + storage_type,", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public GivenWhenThenDsl<$SystemUnderTest> when() {\n        return new GivenWhenThenDsl<>(preparation, thenStepFactory);\n    }\n}\n\npackage testasyouthink;\n\nimport java.util.function.CheckedConsumer;\nimport java.util", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "   CommandResult result;\n    try {\n      result = process.await();\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(RealDeviceImpl.this, e.getMessage());\n    } catch (CommandException e) {\n      throw new IosDevice", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = PreferenceManager.getDefaultSharedPreferences(contextRef.get()).getInt(Keys.INVERT_FONT_COLOR, 0);\n\t\tif (textColor == 1) {\n\t\t\ttextColor = Color.WHITE;\n\t\t} else {\n", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = XmlUtil.fromXml(Message.class, xml);\n\t\tif (message instanceof ReceivedTextMessage) {\n\t\t\tString userId = message.FromUserName;\n\t\t\tString text = ((ReceivedTextMessage) message).Content;\n\t\t\t", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "# 检查以上目录是否存在，如果存在则认为已经运行过该 apk 文件。\nif os.path.exists(os.path.join(UPLOAD_DIR, file_path.split('/')[-1].split('.')", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @command(pass_context=True, name=\"city\", category='Bot Info', aliases=[\"raid-city\", \"rc\"])\n    @checks.is_owner()\n    async def cmd_city(self, ctx):\n        \"\"\"\n        sets the city for the raid party", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertEqual(date_string_to_date(\"25/12/2015\"), datetime(2015, 12, 25))\n\n    def test_date_strings_with_slashes_get_converted_to_dates(self", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file, '/tmp')\n        config_actor.start()\n\n        # startup session database\n        database_actor = DatabaseActor(999, 0, delay=1)\n        database_actor.start()\n\n        # create b", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           ShareUtil.shareText(mActivity, picture.getComment_key(), picture.getComment_key());\n                            break;\n                        case 1:\n                            ShareUtil.sharePicture(mActivity, picture.getComment_key(), picture.getComment_key());", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\t\tsaveauto(\"pFWER_%s_con%d.mgh\" % (opts.tmifile[0],j+1),positive_data[j],affine=aff", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               ResponseSyncAdapter.class,\n                SurveyActivity.class,\n                SurveyPromptLoader.class,\n                PromptFragmentAdapter.class,\n                SurveyItemAdapter.class,\n                SurveyItemFragment.class,\n                SurveyItemAdapter.ViewHolder.", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "=====================\n\nclass SignatureV4(Signature):\n    \"\"\"\n    This class represents a version 4 signature packet.\n\n    :ivar int sigtype: The signature type.\n    :ivar PubKeyAlgorithm pubalg: The public key algorithm used to create the signature.\n", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "```python\n@method(nullary('.'))\ndef select_self(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    elif isinstance(context, XPathSchemaContext):\n        for item in context.iter_self():", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "=====================\n\n    'no_members': Counter,\n    }\n\n    def __init__(self):\n      self._VARZ_DATA['size'].Set(0)\n      self._VARZ_DATA['no_members'].Set(0)\n\n    def Update(", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       message = {\n            'sender': '1234567890123456789012345678901234567890',\n            'recipient': '01234", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       assertEquals(\"SELECT * FROM users WHERE id = ?\", qe.getQuery());\n        assertEquals(1, qe.getParameters().size());\n        assertEquals(Types.INTEGER, qe.getParameters().get(0).getType());\n        assertEquals(1, qe.getParameters", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        ProxyTestDataSource ds = new ProxyTestDataSource", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               continue\n\n            # Send the ADR request\n            log.info(\"Sending ADR request to device {}\".format(device.id))\n            yield device.send(JoinAcceptMessage().toBytes())\n            self.adrprocessing = False\n            returnValue(None)\n\n", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "=====================\n                    function = FmllrRescoreFunction(args)\n                    p = mp.Process(target=function.run)\n                    p.start()\n                    procs.append(p)\n                while True:\n                    try:\n                       ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# IEEE 802.15.4 MAC frame format\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       ObservableRegistry.register(this);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRetainInstance(true);\n\n        Bundle args = getArguments();\n        if (args", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "=====================\n\n    parameter = DataElementGroup(type=ParameterTwostepTAN6)\n\n\nclass HITAN(FinTS3Segment):\n    \"\"\"Zwei-Schritt-TAN-Einreichung\"\"\"\n\n    @classmethod\n    def find_", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "       ref_time = self.img_handle.getReferenceTime()\n\n        # Convert to datetime\n        ref_time_dt = jd2Date(ref_time)\n\n        # Save reference time\n        json_dict['ref_time'] = ref_time_dt\n\n", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       if (mPublicRoomsListList != null) {\n            mPublicRoomsListList.clear();\n        }\n\n        final List<String> homeServerList = Matrix.getHomeserversList(this);\n\n        if (homeServerList != null) {\n           ", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "```python\n@group(name=\"bingo\", invoke_without_command=True)\nasync def bingo(ctx):\n    await ctx.send(\"Welcome to the Bingo Game!\")\n    await ctx.send(\"Please use the following command to generate a new Bingo Card:", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "```python\n        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n```\n\n    #running adjacency inference\n    logger.info(\"Running adjacency inference\")\n    inferer = Ad", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   initMiPush();}\n                stopGCM();\n                stopHwPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HwPush\":\n                stopGCM();\n              ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new StringArrayResponseHandler());\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new VoidResponseHandler());\n        registry.", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public PersonalVulnsWindow() {\n        initComponents();\n        initListeners();\n        initTree();\n        initTreeListeners();\n        initTreeCellRenderer();\n        initTreeModel();\n        initTreeSorting();\n        initTreeSearching();\n        initTreeDoubleClicking", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   public Panel() {\n        initComponents();\n        initListeners();\n        initData();\n    }\n\n    private void initData() {\n        datasetGenerator = new DatasetGenerator();\n        gcTraceSet = new GCTraceSet();\n        gcTraceSet.add", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.getType() == PacketType.OPEN) {\n            client.setNamespace(packet.getDataAsMap().get(\"nsp\").toString());\n            client.setTransport(transport);\n            client.getNamespace().addClient(client);\n            ackManager.initA", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       videoSource = factory.createVideoSource(videoCapturer,\n            appRtcClient.videoConstraints());\n      } else {\n        videoSource = factory.createVideoSource(videoCapturer);\n      }\n      videoSource.addTrack(factory.createVideoTrack(\"videoTrack\",", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 0);\n\n            return contentValues;\n        }\n\n        protected void onCreate(SQLiteDatabase db) {\n            if (!mDatabaseCreated) {\n                db.execSQL(JobStorage.", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "=====================\n\n# create a publisher instance\npublisher = Publisher()\n\n# create a snapshot timer\nsnapshot_timer = SnapshotTimer(snapshot_interval=1000)\n\n# create a copynet instance\ncopynet = CopyNet()\n\n# create a copynet", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "=====================\n\n        self.setup_docker_config_extra(docker_config)\n        self.setup_docker_config_ide(docker_config)\n        self.setup_docker_config_theme(docker_config)\n        self.setup_", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   Observable.fromIterable(Arrays.asList(SectionNames))\n        .flatMap(new Function<String, ObservableSource<List<Board>>>() {\n          @Override public ObservableSource<List<Board>> apply(@NonNull String sectionName) throws Exception {\n            return Observable.fromCall", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       Log.d(\"SearchContactFragment\", \"onStart\");\n        //ObservableRegistry.register(this);\n        //ObservableRegistry.getInstance().register(this);\n        //ObservableRegistry.register(this, SearchContactFragment.class);\n        //ObservableRegistry.register(this", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tICompilationUnit base = null;\r\n\tif (writeTML) {\r\n\t\t// create base-class\r\n\t\tIPackageRoot packageRoot = model.getJutElements().getJutProject().getJavaProject().getPackageFragmentRoot();\r\n\t\tString baseName", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       simulator_data_client = SimulatorDataClient()\n        simulator_data_listener = MockSimulatorDataListener()\n        simulator_data_client.add_simulator_data_listener(simulator_data_listener)\n\n        simulator_data_datagram =", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           String response = new String(httpMessage.getRes().getResponse());\n            String request = new String(httpMessage.getReq().getRequest());\n            String comment = httpMessage.getComment();\n            String comment2 = httpMessage.getComment2();\n            String comment3 = http", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "\ndef test_simple_status_gsi_busy():\n    \"\"\"Status is busy because table isn't ACTIVE, GSIs are busy\"\"\"\n    description = {\"TableStatus\": \"ACTIVE\", \"GlobalSecondaryIndexes\": [{\"IndexStatus\": \"BUSY\"}]}\n   ", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "=====================\n\nclass IffID3(ID3):\n    \"\"\"A generic IFF file with ID3v2 tags\"\"\"\n\n    def __init__(self, filename, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.filename", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitCheckForProx(new VisitCheckForProx(n.f0.present(), n.f1.present(), n.f2.present(), n.f3.present(), n.f4.present(), n.f5.present(), n.f6.present(), n", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new EdgeTransformation()\n                    )),\n    FILTERS(\"Filters\",\n            Arrays.asList(\n                    new ChannelMixTransformation(),\n                    new ContrastTransformation().setBrightness(.5", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "```python\n            if self._header[1] == 1:\n                exception_class = PyOrientCommandException\n            elif self._header[1] == 2:\n                exception_class = PyOrientConnectionException\n            elif self._header[1] == 3:", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "=====================\n\napi = DERBMDATA(args.apikey)\n\nif get_check_data(api, args) is False:\n    return None\n\nfmt = StdoutFormatter()\nprint(\"\\n\")\nprint(\"BM Data for the period {} to {}\".", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum();\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\titem.copyFrom( proxy );\n\t\t\t\titems.add( item );\n", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   user_key = dump_key(engine, user)\n\ndef test_dump_key():\n    engine = Engine()\n    user = User(id=\"foo\")\n    user_key = dump_key(engine, user)\n\n    assert user_key == {\n        \"", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new TaskName()),\n        StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_DASHES),\n        StaticString.CONDITIONAL_WHITESPACE,\n        new Percentage(),\n       ", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "public static Iframe iframe(Attribute... attributes) {\n\t\treturn new Iframe(attributes);\n\t}\n\t/*\n\t * Tags\n\t */\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "=====================\n\nevents.append(Event(e))\n\nreturn events\n\n# SSH Keys\ndef create_ssh_key(name, size=2048):\n    params = {\"name\": name, \"size\": size}\n    data = self.call_", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   Matcher<? super BatchParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // PreparedStatementHolderAssertions\n    ///////////////////////////////////////////////////////////////////////////", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           if (mWallpaper != null) {\r\n                WallpaperManagerCompat.setWallpaper(this, mWallpaper);\r\n                if (mWallpaper != null && mWallpaper.getBitmap() != null) {\r\n                    mImageView.setImageBitmap(mWallpaper", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "\n  private static final Map<Operator, VisitOp> opToVisitOp = new HashMap<Operator, VisitOp>();\r\n\r\n  static {\r\n    opToVisitOp.put(Operator.AND, new VisitAnd());\r Question.BooleanQuery.class));\r    );\r    opToVis", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\n\t\tif len(args.genotype)==0:\n\t\t\tprint ('ERROR: You should define genotype folder for converting!')\n\t\t\texit()\n\n\t\tif len(args.phenotype)==0:\n\t\t\tprint ('ERROR: You", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "=====================\n        self.beginning_datetime = filenameToDatetime(os.path.basename(self.vid_path))\n\n        # Get the video file info\n        self.fps = self.vid.wid.fps\n        self.fps_str = str", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "# 3. create image\nimg = models.ConfocalImage(objects=objects, psf=p, ilm=ilm,\n                          laser_wavelength=0.488, zrange=(0, 100),\n                          shape=(256, ", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tFoodGroupRegistry.sync(player);\n\t}\n\n\tpublic static void setInStone()\n\t{\n\t\tFoodGroupRegistry.setInStone();\n\t}\n\n\tpublic static void clear()\n\t{\n\t\tFoodGroupRegistry.clear", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "=====================\n\ndef view_post(request, pk, username, slug):\n    post = get_object_or_404(Post, pk=pk, user__username=username, slug=slug)\n    if post.deleted:\n        messages.error", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tISelectionChangedEvent selectionChangedEvent = new SelectionChangedEvent(GridEditor.this, new StructuredSelection(selectedCells.iterator().next()));\n\t\t\t\t\t\tselectionListeners.fire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   @keyclass.register(RevocationKeyClass)\n    def keyclass_revocationkeyclass(self, val):\n        self._keyclass = val\n\n    @sdproperty\n    def keyalg(self):\n        return self._keyalg\n\n    @keyalg.register", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "```python\n        if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            if self.arity == 1:\n                yield item\n            else:\n                if self.parser.next_token.symbol == '", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "\ndef handlePuffleAdopted(client, puffle):\r\n    client.puffles.append(puffle)\r\n    client.puffles_as2 = getAS2PuffleString(client, client.puffles)\r\n    client.room.send('p', client", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "\nfig, ax = interaction.make_clean_figure(size=(10,10), orientation='3d')\n\n# Create the state\ns = states.BrownianHardSphereState(\n    N=len(pos),\n    field='image',\n    image=im", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "```python\n        with mp.Pool(processes=self.num_processes) as pool:\n            results = pool.map(compile_information_func, jobs)\n            self.logger.debug(\"Compiled information for all logs:\")\n            for result in results:\n              ", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "=====================\n\n# Recompute the rotation wrt horizon\nplatepar.rotation_from_horizon = RMS.apply(RMS.rotationWrtHorizon, platepar)\n\n# Update the reference RA/Dec and the reference time\nplatepar.RA_d", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_INTERVAL_MS, validInterval ? 10_000L : 0L);\n        contentValues.put(JobStorage.COLUMN_TAG, \"test\");\n        contentValues.put(JobStorage.COLUMN_", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       FragmentObservable.getInstance().register(this);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRetainInstance(true);\n        Bundle args = getArguments();\n       ", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "class ProgressFilter(django_filters.FilterSet):\n    indicator = django_filters.ModelChoiceFilter(\n        name='component__indicators', queryset=Indicator.objects.all())\n    target = django_filters.ModelChoiceFilter(\n        name='component__targets', query", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           presenter.getProduceData().updateDatabase(list);\n        }\n    }\n\n    @Override\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n        inflater.inflate(R.menu.menu_main, menu);\n", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "           @Override\n            protected void onFailure(final Throwable cause) {\n                context.handleError(cause);\n                context.notifyConnectionListener(new DisconnectedConnectionState(context));\n            }\n        }).then(new OnCompleteContinuation<Channel>() {\n            @", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               new RegistrationParam(success, email, password, message));\n    }\n}\n\npackage de.robert_meier.yasme.server.asyncTasks;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.os.", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final Router<Road> router;\n\n    /**\n     * Creates a new {@link Matcher} instance.\n     *\n     * @param map {@link RoadMap} instance for the map to be matched against\n     * @param router {@link Router} instance for the", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private FilterUrl filterUrl;\n    private List<FilterType> filterTypes;\n    private List<FilterType> filterTypes_left;\n    private List<FilterType> filterTypes_right;\n    private HashMap<String, Integer> filterTypeMap;\n    private HashMap<String,", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " message = args.gps_sv[0].getMessage()\n  assert isinstance(message, ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "=====================\n\n        with self.temp():\n            self.display_list = self.display_list_generator.DisplayList()\n            self.display_list_generator.push()\n\n            self.display_list.begin(gl.GL_QUADS)\n\n           ", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"A\")) {\n\t\t\t\t\ta = new AppData(data.substring(1).split(\"\\\\|\"));\n\t\t\t\t} else {\n\t\t\t\t\ta = new ShortcutData(data.substring(1).", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppInfoAction.isShow && AppInfoAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppInfoAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt, self.beg_az = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.lat, self.lon)\n        self.end_alt, self.end_az = raDec2AltAz", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "public boolean visit(VariableNode node) {\n    // Your code here\n    return true;\n}\n}\n\n/**\n * Visitors that need to add nodes to the tree implement this interface.\n */\npublic interface NodeAdditionVisitor {\n\n    /**\n     * Called when the", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    public OpenAPIProcessor() {\n        parserFactories.add(new SpringParserFactory());\n    }\n\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n        requireNonNull(processingEnv);\n\n        typeUtils", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritSettings.class).toInstance(new GerritSettings());\n\n        install(new GerritUiModule());\n        install(new GerritDiffModule());\n        install(new GerritActionsModule());\n        install(new GerritRestModule());", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   File temp = snapshots.get(i);\r\n                    long zxid = getZxidFromName(temp.getName());\r\n                    if (zxid >= zxidLong) {\r\n                        snapFile = temp;\r\n                        break;\r\n                    }\r\n", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "=====================\n\ndef _get_hidden_areas(self):\n    \"\"\"Returns a list of hidden areas.\n    \"\"\"\n    return [\n        'accounts',\n        'schedule',\n        'networth',\n        'general_ledger',\n        'reports',", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   def __init__(self, CallName='', ReprName='', Trans=False, **kwargs):\n        super(segment, self).__init__(CallName, ReprName, Trans)\n        self.set_next( Seg_dict[int(kwargs['marker'])] )\n", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Api.searchBeers(query)\n\t\t\t\t\t\t\t.map(beers -> {\n\t\t\t\t\t\t\t\tif (beers.size()", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "# 2. create a random background\n# This is not part of the tutorial, but it is added to make the image more realistic\n# The tutorial uses a pre-defined background image, but here we create a random one\n# This is done by adding random noise to the image\n# The noise is", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "=====================\nif __name__ == '__main__':\n    df = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [1, 2, 3, 4, 5]})\n    a =", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request != null) {\r\n                        stringBuilder.append(\"\\n\\n\")\r\n                        stringBuilder.append(\"Request \")\r\n                                .append(request.getPosition())\r\n                ", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "=====================\n\nclass AbstractDateTime(metaclass=AtomicTypeMeta):\n    \"\"\"\n    Abstract base class for all atomic date-time types.\n    \"\"\"\n\n    def __init__(self, year: int, month: int, day: int, hour: int, minute:", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           return SearchMenuPage()\n        if pageletId == 'Mediathek':\n            return Mediathek(self.settings, self.log)\n        if pageletId == 'Player':\n            return PlayVideo(PlayerStore(self.log), self.settings, self.", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "           if not checkFileExistence(pattern.get(\"DataFile\")):\n                errmsg += \"Pattern:  %s\\n\" % pattern.getName()\n                errmsg += \"DataFile: %s\\n\" % pattern.get(\"DataFile\")\n                errmsg", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "=====================\n    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "private StarItemAdapter starItemAdapter;\nprivate List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n\n    private Content", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(ddi2fo, preprocessors, postprocessors);\n\t\t\n\t\tString ddiPath = basePathDDI2FO + \"/DDI_test.xml\";\n\t\tString outputPath = basePathDDI2FO +", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       new UserLoginTask(user, this.getClass())\n                                .execute(emailTmp, password);\n                    }\n                });\n\n        alert.setNegativeButton(R.string.cancel, null);\n        alert.show();\n    }\n\n   ", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "\n    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n\n    url(r'^new$', NewPackageView.as_view(), name=\"package-new\"),\n    url(r'^(?P<pk>\\d+)/", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "```python\ndef test_GPSL1L2BitEncoder_init():\n  '''\n  Test construction of GPS L1/L2 single bit dual band encoder\n  '''\n  encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "class TestSave(unittest.TestCase):\n    def setUp(self):\n        self.inputTg = textgrid.openTextgrid(\n            \"tests/data/test_save.Textgrid\",\n            reportingMode=constants.ReportingModes.VERBOSE,\n       ", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "```python\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                    old_utts = p.get()\n                    for utt in", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "           dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NfS')\n        dataset", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void set(FixTag tag, Object value);\n}\n\npublic interface TagValueConsumer {\n    void acceptBoolean(FixTag tag, boolean value);\n    void acceptChar(FixTag tag, char value);\n    void acceptDecimal(FixTag tag, Decimal value);\n    void", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "=====================\n\nyield self.get_spikes(data=data,\n                     n_samples=n_samples,\n                     chunk_key=chunk_idx,\n                     )\n\n# The following code is not executed in the given context.\n# It is just a", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tresult.setQueryNode(anyQueryNode.getQueryNode());\n\t\t\tresult.addExplan", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t}\n\n", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectName>(ObjectName.class));\n        registry.put((byte) (CREATE_MBEAN_WITH_INFO ^ RESPONSE_MASK), new Marshalled", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       String language = languageDetect(content, lang);\n                        String id = tweet.getId();\n                        String hash = tweet.getHashTag();\n                        String user = tweet.getUser().getScreenName();\n                        String date = tweet.getCreated", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "=====================\n\n        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, self._render_descriptor(descriptor.operand)))\n\n        elif isinstance(descriptor, AssociatedDescriptor):\n            lines.append('{}{} {}'.", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "\n    group.add_argument(\n        \"--delay\",\n        dest=\"latency_time\",\n        help=\"\"\"network latency [millisecond].\n        the minimum latency time is 0ms.\n        e.g. tc set eth0 delay 10ms\n        \"\"", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       try:\n            contact = Contact.objects.get(phone_number=self.phone_number)\n        except Contact.DoesNotExist:\n            contact = None\n        except MultipleObjectsReturned:\n            contact = Contact.objects.get(phone_number=self.phone", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   pipeline.apply(\"Read live projects\", new LiveProjectSource(org));\n\n    // Extract the state of each project.\n    PCollection<KV<GCPResource, GCPResourceState>> liveProjectStates = liveProjects.apply(\n        \"Extract live project state\", Par", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.generator = SimilarPathGenerator()\n\n    def test_get_pattern_for_directory(self):\n        self.assertEqual(self.generator.get_pattern_for_directory(\"/test\"), \"/{}/\")\n\n    def test_get_pattern_for_file(self", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ff", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(AndCondition(*[condition_for(op) for op in operations if op]))\n    if \"or\" in operations:\n        conditions.append(OrCondition(*[condition_for(op) for op in operations if op]))\n    if \"not\" in operations:\n", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 1\n        assert get_square_idx(0, 2) == 2\n        assert get_square_idx(1, 0)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final IType testType;\n\n    private final IJavaProject javaProject;\n\n    private final GeneratorModel generatorModel;\n\n    private final GroupMethodSelectionCtrl groupMethodSelectionCtrl;\n\n    private final MethodSelectionCtrl methodSelectionCtrl;\n\n    private final Button btnSelect", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "=====================\n\nself.next_sink.SetVarz(self, 'timeouts')\nself.next_sink.SetVarz(self, 'timeouts.source', self)\nself.next_sink.SetVarz(self, 'timeouts.service',", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate static final String[] imageFileExtensions = { \"png\" };\n\n\tprivate static final String[] imageFileExtensionsForReport = { \"png\" };\n\n\tprivate static final String[] imageFileExtensionsForPageOutline = { \"png\" };\n\n\tprivate static final String[] image", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "       () -> StaticFiles.from(sourcePath).filter(path -> path.toString().endsWith(\".java\")).map(Path::toFile).collect(Collectors.toList()));\n    files.forEach(file -> cmdLine.add(file));\n    \n    var errorCode =", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "   return RespostaConsultarNumeroSessao.analisar(retorno)\n\nclass ClienteSATLocal(FuncoesSAT):\n    \"\"\"Fornece acesso a funções do equipamento SAT local.\n\n    .. warning::\n\n       ", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "=====================\n\n    cmd = self.commands[name]\n    if not cmd:\n      raise Exception('Unknown command: %s' % name)\n\n    if gopts.trace_python:\n      trace.start(tracefile='repo.py.trace')\n\n    if", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   Gson provideGson() {\n        return new Gson();\n    }\n\n    @Provides @Singleton\n    Ion provideIon(Application app) {\n        return Ion.getDefault(app);\n    }\n\n    @Provides @Singleton\n    Ch", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(5));\n\n        // expected: 5\n        // actual: 5\n        //\n        // 5 selects, 1 insert, 1 update, 1 delete\n        //\n        // 5 + 1 + ", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inherit", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       VerifierProperty validSchemaVerifier = new VerifierProperty(\"Valid Schema\", \"edu.tamu.soco.verifier.ValidSchemaVerifier\");\n        VerifierProperty validSchemaVerifierImpl = new ValidSchemaVerifierImpl();\n        validSchemaVerifier.setVerifier(", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           // Show an error message\n            emailView.setError(getString(R.string.error_invalid_email));\n            passwordView.setError(getString(R.string.error_invalid_password));\n            Toast.makeText(activity, R.string.error_login_", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "   DrupalUser loginUser(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * returns the currently logged in user (via user.load)\n     *\n     * @return a DrupalUser object, or null if there's no currently logged in user", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "=====================\n\ndef testQuirks(self):\n    quirks = self.testquirks()\n    quirklist = []\n    for quirk in quirks:\n        if quirk[\"type\"] == \"group\":\n            quirklist.append(quirk", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/problemlist', ProblemListHandler),\n            (r'/problemlist/(\\d+)', ProblemListHandler),\n            (r'/problem/(\\w+)/(\\w+)', ProblemHandler),\n            (r'/problem/(\\w", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Unknown criterion: \" + criterion);\n        }\n\n        return informationCriterion.getSelectionChunk();\n    }\n\n    /**\n     * The main method.\n     *\n     * @param args the command line arguments\n    ", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2, ty1)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Return the first component of a pair.\"\"\"\n    return Fst(expr)\n\n\n@with_info(st_term)", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "\n    void inject(ClassicNoBooks classicNoBooks);\n\n    Context context();\n\n    Resources resources();\n\n    AudioManager audioManager();\n\n    EventBus eventBus();\n\n    Player player();\n\n    AudioBookManager audioBookManager();\n\n    Demo", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   private List<SliceValue> slices;\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Mock()\n    response.content_type = None\n    with pytest.raises(ResponseValidationError):\n        validate_response(response, None)\n\n\ndef test_response_content_type_json_validates():\n    response = Mock()\n    response.", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t/**\n\t * \n\t */\n\tprivate final DocumentGraphEditor editor;\n\n\t/**\n\t * @param editor\n\t */\n\tCommandExecutor(AtomicalConsole atomicalConsole, DocumentGraphEditor editor) {\n\t\tthis.atomicalConsole = atomicalConsole;\n", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "=====================\n\n    except TextGridParseError as e:\n        self.return_dict[\"parse_error_files\"].append(e)\n\n    except Exception as e:\n        self.return_dict[\"unknown_error_files\"].append(e)\n        self.return_", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "```python\nAccelerometerResource,\n```should be:\n```python\nAccelerometerResource,\n```or\n```python\nAccelerometerResource,\n                 resource_class_args=(sensors.accelerometer,)\n```if you want to pass", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueKnots())\n\nclass InstrumentsTests(TestCase):\n    def test_instruments(self):\n        huginn_data_path = configuration.get_data", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "\n    '--local-only-instance-list When using traditional CIM operations, this '\n    'option is used to exclude the superclass properties from the result.',\n    '--local-only-instance-get When using traditional CIM operations, this '\n    'option is used to exclude", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t/**\n\t * 后台首页\n\t * @return\n\t */\n\t@RequestMapping(\"/manage\")\n\tpublic ModelAndView manage() {\n\t\tModelAndView mav = new ModelAndView(\"manage\");\n", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           logError(title, t);\n                            presenter.showErrorMessage(title, t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logWarning(title, t);\n                            presenter.showWarningMessage(title", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "   def test_full_e2e_flow_english(self):\n        \"\"\"\n        This test runs the full end-to-end flow for English language.\n        \"\"\"\n        logging.info(\"Running full e2e flow for English...\")\n        # Create a new contact\n", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected Location currentLocation;\n  protected Location lastLocation;\n  protected Location lastBestLocation;\n  protected Location bestLocation;\n  protected Location bestLocationFromProvider;\n  protected boolean isGpsEnabled;\n  protected boolean isNetworkEnabled;\n  protected boolean isProviderEnabled;\n ", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "# connect(DYNAMIC_TOOLS_DIR)\n\ndef main(request):\n    if request.method == 'POST':\n        file = request.FILES['file']\n        file_name = file.name\n        file_md5 = hashlib.md5(", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Layer):\r\n    constructorList = [\r\n        Int('Message type', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\tadjac = CreateAdjSet(v_lh, faces_lh, v_rh, faces_rh, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "       result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n    } else {\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(CLOSE_BRACKET);\n  }\n\n", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       CacheList newList = new CacheList();\n        newList.setName(listName);\n        cacheService.storeCacheList(newList);\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   'Call CP_DATA, CP_ACK, CP_ERROR, TI_dict[1], TI_dict[4], TI_dict[17], TI_dict[16], TI_dict[18], TI_dict[19], TI_", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       new TimeEntryOvertimeAggregation()));\n\n        dateFrom.setValue(new Date());\n        dateTo.setValue(new Date());\n\n        dateFrom.addValueChangeListener(e -> {\n            if (dateFrom.getValue() != null) {\n                dateTo.", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "=====================\n\nclass PubKeyV4(PubKey):\n    __metaclass__ = abc.ABCMeta\n\n    __slots__ = ()\n\n    @property\n    @abc.abstractproperty\n    def fingerprint(self):\n        \"\"\"A Fingerprint of", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "\n    @property\n    def expansion_type(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                            self._expansion_num, ExpansionInfo.BOARDTYPE)\n\n    @property\n    def mux", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "=====================\n\nclass StrongRefSetProperty(Property):\n    def __init__(self, parent, pid, format, version=PROPERTY_VERSION):\n        super(StrongRefSetProperty, self).__init__(parent, pid, format, version)\n        self.references = {}", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "=====================\nuser = create_inactive_user(email, full_name)\n\n            # Send email to user\n            subject = _('Invitation to join Connect')\n            template = 'connect/email_invitation.html'\n            send_connect_email(subject, template", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "```python\n        draft = await self.draft_interface.load_draft_from_db(ctx.guild.id, ctx.channel.id)\n```\n\nThis line of code is trying to load a draft from the database using the `draft_interface` object. However,", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc('BCCBTC')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Hitbtc('BCCETH')\n        elif name == \"%s_BCH_BTC\" % constant.", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "```python\n            if item is not None:\n                self.add_xsd_type(item)\n                yield item\n```\nThis code block checks if the item is not None and if it is, it adds the xsd type to the current context and yields the item.", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   helpTestIteratorNormal(10, 5);\n  }\n\n  @Test\n  public void testDataParanoid() {\n    helpTestIteratorParanoid(10, 5);\n  }\n\n  @Test\n  public void testDataCount() {\n", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tString defaultField = elt.getAttribute(AlvisIRConstants.XML", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   initMiPush();\n                }\n                //Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"Huawei\":\n                if(shouldInit()) {\n                    HMSAgent.init(this);", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n    private int attempts;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "=====================\n\n    output.append(tabulate(rows, headers, tablefmt, numalign, stralign))\n\n    if show_header and headers:\n        output.append('')\n        output.append(tabulate(headers, tablefmt, numalign, stralign))\n", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "=====================\n    return words_api(wordnik_api, token)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues;\n\t@Inject\n\tprivate ConnectorProjects connectorProjects;\n\t@Inject\n\tprivate ConnectorUsers connectorUsers;\n\t@Inject\n\tprivate ConnectorVersions", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "   def test_create_event_invalid_handle(self):\n        with patch(\"pywintypes.ctypes.windll.kernel32.CloseHandle\") as close_handle:\n            handle = CreateEvent(bManualReset=False, bInitialState=False)\n           ", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n        this", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHolder.getParser().parse(annotation.getAnnotation(parserHolder.getSupportedAnnotation()))\n                            .stream()\n                            .filter(parsedPath -> parsedPath.getAnnotatedElement().equals(currentAnnotatedElement.get()))\n                            .map(parsed", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected PageParser pageParser;\n\n    protected DuplicateStrategy duplicateStrategy;\n\n    protected CountDownLatch latch = new CountDownLatch(getThreadCount());\n\n    protected ExecutorService executorService;\n\n    protected AtomicInteger threadCount = new AtomicInteger(", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteValueAction(this));\n            actionPopupGroup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton addChannel;\n\n    public GuiSettingsChannel(Channel channel) {\n        super(new VerticalLayout());\n        this.channel = channel;\n        setTitle(new TextComponent(channel.getName()));\n        initGUI();\n    }\n\n    private void", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClearAllNotifications();", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       createWebAppTable(form);\r\n        createWebAppButtons(form);\r\n        createWebAppSection(form);\r\n        form.setSize(500, 400);\r\n        setControl(form);\r\n    }\r\n\r\n    protected void createWebAppTable(Com", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type()\n        type.name = \"string\"\n        self.assertEqual(\"\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\n        type = Type()\n        type.name = \"string\"\n       ", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "               new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(Next line of code:\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "self._cluster_type = _cluster_type\n\nThis line sets the value of the instance variable '_cluster_type' to the value passed as an argument '_cluster_type'.\n\nThe '_cluster_type' variable is defined earlier in the class as a string and it represents the type of the data", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "=====================\n\ndef complete_flickr(request):\n    try:\n        frob = request.GET['frob']\n    except KeyError:\n        raise ValueError(\"Redirect back from Flickr did not include a frob\")\n\n    try:\n        method, token", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t} catch(InterruptedException e) {\n\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "     op, arg = bytecode[k][2], bytecode[k][3]\n      if op in COMPARE_OPS:\n        cond_stack_size += 1\n      elif op in JUMP_OPS:\n        cond_stack_size -= 1\n     ", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   List<DailyExpense> dailyExpenses = new ArrayList<>();\n\n    //UI\n    TextView mTotalExpensesTextView;\n    TextView mTotalExpensesByCategoryTextView;\n    TextView mTotalExpensesByCategoryTitleTextView;\n    TextView mTotalExpensesBy", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "=====================\n\nclass PlatformAdminForm(forms.ModelForm):\n    api_url = forms.CharField(label=\"API URL\", max_length=255)\n    auth_token = forms.CharField(label=\"Auth Token\", max_length=255, widget", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\tprivate void openCustomList(CustomList customList) {\n\t\tif (customList != null)\n\t\t\tstartActivity(CustomListActivity.start(this, customList._id));\n\t}\n\tprivate void openBarcodeScan() {\n\t\tIntent intent = new Intent", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "=====================\n\ndef parse(self, ping_result: Union[str, bytes, PingResult]) -> PingStats:\n    \"\"\"\n    Parse ping command output.\n\n    Args:\n        ping_result (Union[str, bytes, PingResult]):", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           chat = new Chat();\r\n            Log.e(this.getClass().getSimpleName(), \"Chat is null, creating new one\");\r\n            try {\r\n                chat = DatabaseManager.getChatDAO().add(chat);\r\n            } catch (Exception e) {\r\n                Log.", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tgame = new Cubeshaft();\n\t\t\tgame.setDisplayMode(new DisplayMode(800, 600));\n\t\t\tgame.setTitle(\"Cubesha", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "account = account_for_facebook_user(fb_user)\n\ndef account_for_facebook_user(fb_user):\n    try:\n        account = Account.objects.get(service='facebook', user_id=fb_user[\"id\"])\n    except Account.DoesNot", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n        assertThat(qe, is(isStatement()));\n        assertThat(qe, is(isBatchStatement()));\n        assertThat(qe, is(isStatementOrBatchStatement()));\n\n", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "   } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {\n      int percent = Integer.parseInt(Utils.getXmlNodeValue(doc, TAG_PERCENT));\n      if (percent >= 100) {\n       ", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "=====================\n\nassembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)\n=====================\n\nThe code above reads assembly points from different sources and merges them into a single list. The merging process is done using the `", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/ther", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "```python\nfields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.gold(),\n```\nThis line of code is used to create a dictionary where the keys are the configuration names in capitalized form and the values are the", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void done(Object result) {\n\t\t\t\t\t\t\tif (result instanceof Exception) {\n\t\t\t", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * Set of actions that can be performed on the calendar.\n     */\n    protected List<Action> actions = new ArrayList<>();\n\n    /**\n     * Set of actions that can be performed on the calendar.\n", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n    }\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   VerifierProvider rsaLocator = new DefaultPublicKeyLocator();\n\n    VerifierProviders locators = new VerifierProviders();\n    locators.setVerifierProvider(SignatureAlgorithm.HS256, hmacLocator);\n    locators.setVerifierProvider", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener mOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "               } catch (FilesException e) {\n                    logger.info(\"Expected 404, got \" + e.getStatusCode());\n                }\n\n                client.deleteObject(containerName, fileName);\n            }\n\n            client.deleteContainer(containerName);\n", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                   TrackHistoryEntry newEntry = new TrackHistoryEntry();\n                    newEntry.title = liveInfo.getTitle();\n                    newEntry.startTime = new Date(0);\n                    newEntry.endTime = new Date(0);\n                    newEntry.stationUuid", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "ProjectsFragmentListener, QueuedProjectFragmentListener, FavoritesFragmentListener, StashFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, ProjectsFragmentListener, Projects", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       if (home.getImageStyle().getType() == Home.Style.TYPE_ICON) {\r\n                            Intent intent = new Intent(mContext, IconActivity.class);\r\n                            intent.putExtra(\"position\", position);\r\n                            mContext.startActivity(intent);\r\n", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "=====================\n\ndef load_convert_config(logger: logger.Logger, convert_config: str, subcommand: str):\n    \"\"\"\n    Loads a convert config file.\n\n    :param logger: The logger instance.\n    :param convert_config: The path to the", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    def items(self):\n        \"\"\" Returns a list of all items in the playlist. \"\"\"\n        if self._items is None:\n            self._items = self.library.query(self.ratingKey, 'items')\n        return self._items\n\n    def section(self", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertEqual(\n            _environment_to_string({u\"i\": u\"j\"}),\n            u\"i={i!r}\\0\\0\".format(i=u\"i\"))\n\n    def test_type_check_for_environment_value(self):\n", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "=====================\n\ndef main():\n  \"\"\"Entry point for repo command.\"\"\"\n  SetDefaultColoring()\n  SetTrace()\n\n  # Parse command line arguments.\n  args = sys.argv[1:]\n  name, gopts, argv = repo.Run(args)", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 执行任务监听器\n                for (RunnerTaskListener listener : runnerListenerList) {\n                    listener.onPostExecute(taskData);\n                }\n                // 记录日志\n                TaskRunnerLog taskRunnerLog = new TaskRunner", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       entry = Entry.create(\"http://example.com\")\n        result = await r.after_headers(entry)\n        self.assertIsNone(result)\n\n    @async_test()\n    async def test_reject_status_code(self):\n        r = Reject", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //保存用户信息\n        BaseInfoDao baseInfoDao = new BaseInfoDao(mContext);\n        BaseInfo baseInfo = new BaseInfo();\n        baseInfo.setStuXh(stuXH);\n        baseInfo.setStuName(stu", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\n    self.__device = device\n    self.__ip_version = ip_version\n    self.__logger = logger\n    self.__tc_command_output = tc_command_output\n    self.__export_path = export_path\n    self.__is_parse_filter_id = is", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "       except ActionRefused:\n            pass\n        else:\n            state[\"inventory\"] = [mudobj_ref(i) for i in inv]\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": " public Query visit(Ord4Search n, Query query) throws ParseException {\r\n    Operator op = n.f0.image;\r\n    if (op == \"BUTNOT\") {\r\n      return new BooleanQuery.BooleanClause(new TermQuery(new Term(\"_score\", \"1\")", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t}\n\n\t/**\n\t * @param pipeline\n\t * @param inputStream\n\t * @param surveyName\n\t * @param cleaningFolder\n\t * @return the generated", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "\n        try {\r\n\r\n            PropertiesReader propertiesReader = new PropertiesReader(new File(propertiesFile));\r\n            DataDirHelper dataDirHelper = new DataDirHelper(new File(dataDir), new File(dataLogDir));\r\n            DataState dataState = null;\r\n            SnapshotFile", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "```python\nself.link = self.link.recv(1024)\n```\nThis line of code is used to receive a message from the Switzerland server. The message is stored in the `link` variable, which is an instance of the `Alice` class. The `recv", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       MovieCursor movieCursorById = new MovieCursor(cursorById);\n        // Make sure we get the correct movie out of the cursor\n        Movie movie = movieCursorById.getMovie();\n        assertEquals(movieRowId, movie.getId());\n\n        // Clean up\n        cursorById", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(list(etree_iter_nodes(self.elem)), [])\n\n    def test_node_children_function_with_document(self):\n        xml_test = '<A><B><C>alpha</C></B></A>'\n        document = Element", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.main);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(false);\r\n\t\tmap", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mush", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "=====================\n\nclass Cisco2960SwitchConfiguration(Port):\n    def __init__(self, name):\n        super(Cisco2960SwitchConfiguration, self).__init__(name)\n        self.auto_enabled = True\n        self.vlans = []", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutput", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "=====================\n\n        # NOTA: A partir daqui, a resposta depende do último comando fiscal\n        # executado pelo equipamento SAT.\n\n        # Se a última sessão for uma venda, retornar uma resposta especializada", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "=====================\n\n    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n\n    # TODO: Add error bars\n    axes = axes or [ax for ax in axes if ax is not None]", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "=====================\n\napp = Flask(__name__)\napi = Api(app)\n\n_add_fdm_resources(api, fdm, aircraft)\n\napi.add_resource(AircraftResource, \"/aircraft\")\napi.add_resource(GPSResource, \"/", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "=====================\n\ndef load_corpus_split(corpus_directory: str, split_file: str) -> CorpusSplit:\n    \"\"\"\n    Loads a corpus split from the given directory and file\n\n    Parameters\n    ----------\n    corpus_directory : str\n", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private static final int MAX_TEXT_LINES = 10;\n\n    private static final int MAX_TEXT_CHARS = 100;\n\n    private static final int MAX_TEXT_PIXELS = 10000;\n\n    private static final", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tprivate Util() {\n\t\t// empty\n\t}\n\n\tpublic static Util getInstance() {\n\t\treturn", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       MongoConfiguration mongoConfiguration = MongoConfiguration.getInstance(project);\n        return mongoConfiguration.getServerConfigurations();\n    }\n\n    private void installActions() {\n        final JComponent component = this;\n\n        final ActionGroup actionGroup = new ActionGroup() {\n", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1(\"h1\", \"TodoMVC\")\n\t\t// Input()\n\t\t// is replaced by:\n\t\tH1(\"h1\", \"TodoMVC\").input(Input().classs(\"new-todo\"));\n\t\tFluent header = container", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               new CropImageDialog(CameraActivity.this,output).show();\n            }\n        });\n\n        /**\n         * Set onClickListeners for the buttons.\n         */\n        captureButtonOnClick();\n        flashButtonOnClick();\n        switchCameraButtonOnClick();\n       ", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "   @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        mActivity = (MainActivity) getActivity();\n        mAdapter = new SongListAdapter(getActivity());\n        m", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   validate_key_condition(query_on, key)\n\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_hash_key_failure(model, index):\n    \"\"\"Single key condition: hash key is not", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String gcActivity", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "```python\n            '/properties':                   RestAppPropertys,\n        }\n        \n        # Register the resources\n        for endpoint, resource in self.resources.items():\n            self.api.add_resource(resource, endpoint)\n```\n\n        # Start the API", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "=====================\n\nself.project_settings = ProjectSettingsDialog(settings_ini, self._directory, self._df_manager, tree_view=tree_view)\n\nself.project_settings.signalNewModelRead.connect(self.project_settings.signalNewModelRead.emit", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "====================\n\nif __name__ == \"__main__\":\n    parser.parse_args()\n\n    # check the device name is valid\n    if not parser.device:\n        parser.error(\"device name is required.\")\n\n    # check the kernel version\n    if not parser.", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final static TexturedModal MODAL_BACKGROUND = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n\n    private final static int TRAY_WIDTH = 254;\n    private", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "       void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface ItemClickListener {\n        /**\n         * Triggered when a item was clicked\n         *\n         * @param item\n         *           ", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "   self._db_type = db_type\n    return self\n\nclass ConnectMessage(BaseMessage):\n    def __init__(self, _orient_socket):\n        super(ConnectMessage, self).__init__(_orient_socket)\n        self._need_db_opened =", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           client.getBaseClient().getHandshakeData().upgrade(transport);\n            break;\n        }\n\n        case CONNECT: {\n            client.getBaseClient().getHandshakeData().setAccepted(true);\n            client.getBaseClient().getHandshakeData", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tGenerator[] generators = setGenerators(pipeline.getInFormat());\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\tGenerationService generationService = new GenerationService(preprocessors, generators, postprocessors);", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<GCPProject> projects = pipeline.apply(\"Read projects\",\n        new LiveProjectSource(org));\n\n    // Extract the project policies.\n    PCollection<GCPProject> projectsWithPolicies = projects.apply(ParDo.named(\"Extract project policies\")\n", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "=====================\n\ndef test_create_table(session, model):\n    # ...\n\ndef test_create_table(session, model):\n    # Create the table\n    table = session.create_table(\n        TableName=\"MyModel\",\n        KeySchema=[{\"Attribute", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                         dim, vocab, lookup,\n                                                         cache=self._cache)\n            else:\n                raise ValueError(\"Unknown def_", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "\n    public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n    }\n\n    public void start()\n    {\n        Contract.checkNotNull(_delegate);\n\n        synchronized (_lockObject) {\n            _id = _delegate.getID();\n", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private ProgressDialog progressDialog;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_video_pick);\n        Toolbar toolbar = (Toolbar) findViewById", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "```python\nif form.is_valid():\n    user = form.save(commit=False)\n    user.is_active = True\n    user.save()\n    messages.success(request, 'Usuario creado con éxito')\n    return redirect('re", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setColor(fog.getColor().toArray(new float[4]));\n        descriptor.setDensity(fog.getDensity());\n       ", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif(this.readOnly) new ErrorJSON(\"This Loom file is read-only. Please use the 'open' method instead.\");\n\t\tthis.handle.close();\n\t\tthis.readOnly = false;\n\t\tthis.", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorInfoComponent plusActorInfoComponent();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidViewException e) {\n\t\t\tthrow new SocketViewException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark\n\t *\n\t * @return the benchmark result\n\t * @throws Socket", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "class DashboardView(TemplateView):\n    \"\"\"\n    Dashboard View\n    \"\"\"\n    template_name = 'dashboard/dashboard.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n       ", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo.getMoreSuitableEndpoint(\n\t\t\t\t\tendpointType, format);\n\t\t\treturn activateLoginIfRequested(createWrapper(endpoint,\n\t\t\t\t\tnetworkManager, dataParser, apiKey));\n\t\t}", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       if request.method == \"GET\":\n            planillas = PlanillaDeRelevamiento.objects.filter(zona__in=user.perfil.zona.all())\n            return render(request, 'relevamiento/seleccionar_planilla.html', {\"", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "# self._cstr = self.tree.to_dot()\n\nThis line of code is used to convert the tree representation of the constraint\ninto a string representation that can be used for further processing.\n\nThe `to_dot()` method of the `Tree` class generates a graphviz", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);\n  private ActionSupportHandler<StartRecordingAction>  startRecordingActionSupportHandler  = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1), [0])\n\ndef test_hash_fnv():\n    \"\"\"FP FNV\"\"\"\n    # Testing hash function\n    assert hash_fnv(b'') == MIN_HASH_VALUE", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "\n@method(function='format-number',\n        sequence_types=[('arg1', 'xs:decimal'), ('arg2', 'xs:string')],\n        return_type='xs:string')\ndef format_number(arg1, arg2):\n    return arg1.", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\n\t\tif model_item is None:\n\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str(e))\n\t\t\treturn Qt.ItemIsEnabled\n\n\t\tif model_", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "=====================\n\nroot_dto = RootDto()\n\nHydrator.hydrate(root_dto, root_dto.root, Hydrator.get_root_version(root_dto))\n\nself.assertEqual(1, len(root_dto", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         FASTClassLoader loader = new FASTClassLoader(catBytes, new FASTClassLoader.ClassLoaderWrapper(getClass().getClassLoader()));\n\n          //TODO: C, this is a hack to get the ringBuffers to be created on startup.\n          //TODO: C,", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n\n  to_map_and_back(DFO, DopplerPoly(DopplerBase.UN", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               hasJsonPath(\"$.hits.total.value\", equalTo(records.size())));\n    }\n\n    @Test\n    public void suggest() throws Exception {\n        String query = \"http://localhost:9200/\" + mapping.getIndex() + \"/\" +", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "=====================\n\nclass PubKeyV4(PubKey):\n    __slots__ = ()\n\n    def __init__(self, pk, created=None, expires=None, trust=None):\n        self.pk = pk\n        self.created = created\n       ", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\t\tgeoJSONWriter = new GeoJSONWriter();\n\t}\n\n\t/**\n\t * Registers the request services\n\t */\n\tprivate void registerRequestServices() {\n\t\trequest", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = getResults(context.<String>get(ContextKeys.SEARCH_FILTER), context.<Integer>get(ContextKeys.PAGE_SIZE));\n                    } catch (IOException | SQLException e) {\n                        context.put(ContextKeys.EXIT_CODE, ContextKeys.", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "url(r'^users/$', users_list, name='users-list'),\nurl(r'^users/new/$', new_user, name='new_user'),\nurl(r'^users/(?P<pk>\\d+)/$', user_detail, name='user", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           startMixedActivity();\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"playSessionSettings\");\n            }\n        }\n    }\n\n    private void startMixedActivity() {\n        Intent intent = new Intent(", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   private DropDownMenu dropDownMenu;\n    private DropMenuAdapter dropMenuAdapter;\n    private FilterType[] filterTypes = {\n            new FilterType(\"类型\", FilterType.TYPE_STRING, new String[]{\"全部\", \"心理健康\", \"生活\", \"学", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateBuffImg();\n\n        # initialize block shape\n        obj.blockShape = InheritedBlockShape(obj);\n        obj.blockShape.setParent(obj);\n\n        # initialize block shape's shape\n        obj.blockShape.recalcShape();\n\n", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "=====================\n\n        alpha = XorDiff(d1, d2)\n        beta = XorDiff(d2, d3)\n\n        f = XDA(alpha, beta)\n\n        result = self._find_preimage(f, beta)\n\n        if", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformConstantMultiAlternation(ConstantNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformMultiConstantMultiAlternation(Multi", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the commands\n\t\tgetCommand(\"help\").setExecutor(new CommandHelp());\n\t\tgetCommand(\"create\").setExecutor(new CommandCreate());\n\t\tgetCommand(\"delete\").setExecutor(new CommandDelete", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       SASLMechanism mechanism = connection.getSASLMechanism();\n        mechanism.handleChallenge(challengeData);\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        String challengeData = doc.getText();\n        SAS", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Pi = PiPermutation(16)\n\nPiPermutation = lambda n: BvFunction(Pi, n)\n\n\ndef test_chaskey_pi():\n    test_search_ch_skch(PiPermutation(16), DerMode.Xor", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private FastScroller mFastScroller;\n\n    private SongListAdapter mAdapter;\n\n    private List<Song> mSongs;\n\n    private int mSortOrder;\n\n    private boolean mShowToolbar;\n\n    private boolean mShowFastScroller;\n\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           FlowAbsEffect flowAbsEffect = (FlowAbsEffect) effect;\n            if (flowAbsEffect.isInitialized()) {\n                try {\n                    flowAbsEffect.init(mSpectaculumView.getEffect());\n                } catch (EffectException e) {\n                ", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "\nclass ESMHeader(Layer):\n    constructorList = [\n        Bit('EBT', Pt=0, BitLen=4, Repr='hex'),\n        Bit('PD', Pt=2, BitLen=4, Repr='hex'),\n        ]\n\nclass E", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           mActivity.getSupportFragmentManager().popBackStack();\n            mActivity.getSupportFragmentManager().popBackStack();\n            loadArtist();\n        }\n    };\n\n    private AlbumEditorDialog.OnEditionSuccessListener mOnEditionSuccessListener = new AlbumEditorDialog.", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "=====================\n\ndef main():\n    \"\"\"\n    This is the main function for the Montreal Forced Aligner.\n    \"\"\"\n    parser = argparse.ArgumentParser(description=\"Montreal Forced Aligner\")\n    parser.add_argument(\n        \"corpus\",", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),\n\t\t\t\tuser.getContactEmail(), user.getCallbackService(),\n\t\t\t\tuser.getRoles());\n\t}", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "\n    @GET(\"api-info\")\n    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.name", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   assert almost_eq(erb(freq), bandwidth)\n\n  @p((\"freq\", \"Hz\"),\n     [(1000,),\n      (2000,),\n      (3000,),\n      (4000,),\n", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "=====================\n\ndef read_sequence(fp):\n    \"\"\"Read and return a sequence of datasets from the file\"\"\"\n    seq = []\n    while True:\n        dataset = read_dataset(fp)\n        if dataset is None:\n            break\n        seq.append(dataset)", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   try {\n      // create a list of all comment processors\n      List<ICommentProcessor> commentProcessors = new ArrayList<>(this.commentProcessors);\n\n      // sort the comment processors by the order they were registered\n      commentProcessors.sort(Comparator.comparing(o", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(page, searchQuery, prefs, application);\n    }\n\n    @Override\n    protected void loadData(int page) {\n        getSpiceManager", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "=====================\n\nclass NotationData(Signature):\n    __typeid__ = 0x14\n\n    @sdproperty\n    def flags(self):\n        return self._flags\n\n    @flags.register(list)\n    def flags_list(self, val):", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "```python\n        self.addMessage(lm, self.chum)\n```\nThis line of code is used to add a message to the text area, with the given lexmsg and chum object. The chum object is the current profile of the user, and is used to determine", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "=====================\n\ndef check_args(args, fn_types, env):\n    if not isinstance(fn_types, list):\n        raise TypeError('Expected a list of function types')\n    for arg_type in fn_types:\n        if not isinstance(arg_type,", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "```python\nif isinstance(value, GregorianMonthDay):\n    return value\n\ntry:\n    if isinstance(value, UntypedAtomicValue):\n        return GregorianMonthDay.fromstring(value.value)\n    elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "=====================\n\n    if not _param_present_in_database(dbf, phase_name, configuration, \"enthalpy\"):\n        raise ValueError(f\"{phase_name} is not present in the database.\")\n\n    # Filter datasets to only include the desired phase and the", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        // hide the player UI\n        controller.getTubexPlayerView().setVisibility(View.GONE);", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 8 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 9 || type == 0", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   @FormUrlEncoded\n    Call<Suggestions> suggest(@FieldMap Map<String, String> params);\n\n    /**\n     * Anonymous login\n     *\n     * @param serviceIds  the set of service ids\n     * @param accessToken the access token\n    ", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "\n    def stream(self, model, position=None):\n        \"\"\"Create a stream iterator for the given model.\n\n        :param model: The model to stream records from.\n        :param position: The position to start streaming from.\n            If None, the stream will start at the latest", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    main()\n```python\nif __name__ == \"__main__\":\n    main()\n```\nThis line of code is used to run the script as a standalone program. It checks the value of the special variable", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t/**", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "=====================\n\n    def __getattr__(self, name):\n        if name in self.registry:\n            return self.registry[name]\n        raise AttributeError(name)\n\n    def __getitem__(self, name):\n        if isinstance(name, str):\n           ", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "=====================\n\n    @scoped_subgraph\n    def decoder(self) -> StandardRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN is initialized with the final hidden state of the encoder as initial state.\n\n        Returns", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nclass PlatformAdminForm(forms.ModelForm):\n    class Meta:\n        model = Platform\n        fields = ['engine', 'api_key', 'api_secret", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeRestriction node) {", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final NiceTable niceTable = new NiceTable(numberOfColumns);\n\n        // Adding headers\n        niceTable.addHeader(\"Benchmark\");\n        for (final AbstractMeter meter : benchRes.getMeters()) {\n            niceTable.addHeader(meter.getName", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     self.control_dependences = ControlDependence(self)\n      self.control_dependences.traverse(self.entry_block)\n      self.control_dependences.build()\n      self.control_dependences.freeze()\n\n      self.dominators = Dom", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.out.println(\"Invalid tree type.\");\n\t\t\t\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "=====================\n\ndef parse_datetime_marker(marker: str, lang: str) -> str:\n    \"\"\"\n    Parse a datetime marker and return the formatted string.\n\n    :param marker: The marker string.\n    :param lang: The language code.\n    :return", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   else if (Event.EVENT_TYPE_STATE_ROOM_POWER_LEVELS.equals(event.type)) {\n                        RoomState roomState = JsonUtils.toRoomState(event.content);\n                        mRoom.setPowerLevels(roomState.powerL", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilter = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\t// PostProcessing\n\tprivate FOTableColumnPostprocessorFake tableColumnPostprocessor = new FOTableColumnPostprocessorFake();\n\t", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationEtatsPlanning(self, _):\n        site = self.GetSelectedSite()\n        annee = self.etats_planning_", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "=====================\n\ndef compute_angular_velocity_hessian(self, p):\n    \"\"\"\n    Computes the Hessian matrix of the angular velocity vector at the given\n    point p.\n\n    Parameters\n    ----------\n    p : array_like, shape=(3", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n            name.setText(queuedProjectResult.queuedProject.name);\n            author.setText(queuedProjectResult.queuedProject.author.name", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               new MigrateCommand());\n        // Register listeners\n        // Register events\n        // Register bStats\n        metrics.addConfig(new Config(\"bstats.yml\"));\n        metrics.start();\n        logger.info(\"EconomyLite is now ready!\");\n    }\n", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "```python\n        prior_specs = build_prior_specs(prior, symbols)\n        _log.info('Initializing %s priors for the parameters.', len(prior_specs))\n```\n\nThis code sets up the logging message for initializing pri", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const.fromValue(arg[0], is_symbol=False)\n    elif op == LOAD_NAME:\n      return Ref.fromName(arg[0])\n    elif op == LOAD_ATTR:\n      return Ref.fromName(arg[0])\n    elif", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final PhysicsWorld world;\n\n\tprivate final SpriteBatch batch;\n\tprivate final SpriteBatch debugBatch;\n\tprivate final SpriteBatch hudBatch;\n\tprivate final SpriteBatch fringeBatch;\n\tprivate final SpriteBatch fringeDebugBatch;\n\t", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview = new TempSensorView", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> getAuthorsWithBooks() {\n\t\treturn dslContext.select(AUTHOR.ID, AUTHOR.NAME, BOOK.TITLE)\n\t\t\t\t\t\t.from(AUTHOR)\n\t\t\t\t\t\t", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t\tthis.rootQuery = new SQLQuery(schema, null, null, null);\n\t}\n\n\tpublic SQLTranslation run(SQLTranslation", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "# install_and_run(adb, app_info, download_dir)\n\n        # 安装并运行 apk 文件\n        install_and_run(adb, app_info, download_dir, auto_app_test, download_logs_thread)", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   List<Genotype> parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return ancestries.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into ancestries\n    ", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n                Keyword('.'),\n                Symbol.typed(String, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\")));\n\n        // query with CollectionMatcher\n        assertThat(pe, query(param(\"p1\", is(1))));\n        assertThat(pe", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "=======================\n\t\t\tif type(selection[0]) is Sketch:\n\t\t\t\tself._viewWidget.set_sketch_view(selection[0])\n\t\t\t\tself._geometry_dock.set_sketch(selection[0])\n\t\t\t", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return new ApiException(cause);\n            }\n        };\n        _config = config;\n        // Set up", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t}\r\n\r\n\tpublic void registerRenderer(Class<?> clazz, Renderer<?> renderer) {\r\n\t\trenderer.setEngine(this);\r\n\t\trenderer.setErrorHandler(errorHandler);\r\n\t", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_LOWERCASE, false)) {\n\t\t\tlabelFactory = new LowerCase", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "\n    url(r'^new$', staff_member_required(AddPackageCIPipeline.as_view(), login_url=LOGIN_URL), name=\"add-package-ci-pipeline\"),\n\n    url(r'^(?P<pipeline_id>[0-", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        mContext.startActivity(intent);\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\n            }\r\n        }\r\n\r\n        if", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "access_token = call_vimeo(access_token)\n\n# This is where the code is missing\ndef call_vimeo(access_token):\n    # TODO: call Vimeo API to get user info\n    # TODO: call Vimeo API to get user'", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               pointing, mag = xy2sky(platepar, x_mean, y_mean, test_px_sum, platepar.vignetting_coeff, platepar.extinction_scale)\n\n                # Compute the vignetting loss\n               ", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "=====================\ngrid = gen_grid(data, options)\n\n# Compute likelihood across of parameters defined by grid\nlikelihood = gridLikelihood(data, grid, options)\n\n# Apply prior to likelihood\nposterior = applyPrior(likelihood, options)\n\n", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           UIDialog.show(new DiceDialog(Board.this), \"Roll Dice\", \"Roll Dice\", \"Cancel\", null);\n          }\n      }\n    });\n    addActor(rollBtn);\n\n    doubleBtn = new TextButton(\"Double\", ts);\n   ", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "=====================\n\n        self.assertEqual(list(etree_iter_paths(root)), [\n            ('a', ''),\n            ('a/b1', ''),\n            ('a/b1/c1', ''),\n            ('a/b1/c2', '", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "       self.runner.add(self.rule, with_child=True)\n\n    @patch(\"hammertime.rules.sampling.SimilarPathGenerator.get_tail_pattern\")\n    @patch(\"hammertime.rules.sampling.SimilarPathGenerator.get_", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "```python\ncfe = CFeCanc(\n        destinatario=Destinatario(\n            CPF='111.111.111-11',\n            xNome='João da Silva'\n        ),\n        chCanc='C", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "   List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a list of ancestries.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a list", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           EtsiResponse resp = this.client.sendRequest(req);\n            if (resp.getStatus() != 200) {\n                System.out.println(\"Signature request failed: \" + resp.getStatus());\n                this.client.shutdown();\n              ", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\n\t\telif type(obj) is Feature:\n\t\t\treturn get_icon(\"feature\")\n\t\telif type(obj) is FeatureInstance:\n\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 13", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<PlayerOverview> playerOverviews;\n\t\n\tpublic Team(String teamName) throws TeamNotFoundException {\n\t\ttry {\n\t\t\tTeamSummaryResponse teamSummaryResponse = QueryManager.getTeamSummaryResponse(teamName, currentSeason);\n\t\t\tthis", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       FeedbackUseCase feedbackUseCase = FeedbackUseCase.Companion.getInstance();\n        feedbackUseCase.sendFeedback(userFeedback, new Function1<Unit, Unit>() {\n            @Override\n            public Unit invoke(Unit unit) {\n                onSuccess", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "```python\n            table_index[table_name] = self.session.load_items(\n                {\n                    \"TableName\": table_name,\n                    \"Key\": key,\n                    \"ConsistentRead\": consistent,\n                    \"ReturnValues\": \"ALL", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               art = draw_art(\n                    key_size=256,\n                    key_algo='RSA',\n                    key_fpr=fingerprint,\n                    longid=False,\n                    color=True\n                )\n                print", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "=====================\n\n    return RespostaExtrairLogs.analisar(retorno)\n\n    def ativar_sistema(self):\n        \"\"\"Sobrecarga do método ativar_sistema da classe FuncoesSAT.\n\n", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "```python\ndef test_node_document_uri_function(self):\n    xml_test = '<A xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "=====================\n\n    self.logger.info(f\"Training {self.identifier} started at {datetime.now()}\")\n\n    self.logger.info(f\"Training {self.identifier} started at {datetime.now()}\")\n\n    self.logger.info(", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final OAuth2Requester requester;\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Jobs jobs;\n    private final Vms vms;\n    private final Errands errands;\n\n    public SpringDirectorClient(URI root, RestTemplate restTemplate) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(rest", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "public void requestAudiologistInfo() {\n    _chat.requestAudiologistInfo();\n}\n\npublic void sendMessage(ChatMessage message) {\n    _chat.sendMessage(message);\n}\n\npublic void sendMessage(String text) {\n    ChatMessage message = new", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   public void onMessage(ChatReceivedEvent event) {\n        if (channel.equals(event.getChannel())) {\n            channel.addMessage(event.getMessage());\n        }\n    }\n\n    @Override\n    public void drawComponent(int mouseX, int mouseY, float", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "         DATA[looptest], EPSILON, FiniteDifferenceSchemes.SYMMETRIC);\n        DoubleDerivatives d3Sad = BlackFormula2.price_Sad(DATA[looptest][0], DATA[looptest][1], DATA[looptest][", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class\n    };\n\n    /**\n     * Map of module names to their instances\n     */\n    private static HashMap<String, Module> modules = new HashMap<>();\n\n    /**\n     * Loads all modules and registers their event listeners\n     * @param plugin The", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "=======================\npublic static DownloadQueue newDownloadQueue() {\n    return newDownloadQueue(3);\n}\n\n/**\n * Create a new download queue.\n *\n * @param threadPoolSize the number of threads in the thread pool.\n * @return {@link DownloadQueue}.\n *", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void init(MutableConfig config) {\n    Log.debug(\"init packager plugin\");\n    config.set(name() + \".pluginDir\", Path.class, config.getOrUpdate(ProConf.pluginDir(), Path.class, Path.class, p -> p.resolve", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "=======================\nprivate QuerySetConfig parseQuerySetConfigTag(Element element) {\n    Validate.notNull(element, \"parseQuerySetConfigTag::element cannot be null\");\n    QuerySetConfig querySetConfig = new QuerySetConfig();\n    NodeList nodeList = getAllChildNodes", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "======================\n\ndef main():\n    ms = MainScanner()\n    ms.Scanner()\n\nif __name__ == '__main__':\n    main()\n======================\n\nThe code above is a Python script that performs the following tasks:\n\n1. It imports", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "=====================\n\n        self.robot.left_foot.task = None\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.cur_stance.right_foot,\n", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\n@settings(max_examples=100)\n@given(integers(min_value=MIN_SIZE, max_value=MAX_SIZE))\ndef test_simple_operations(x):\n    \"\"\"Test the simple operations.\"\"\"\n    a = bitvectify(", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG.mICCProfile).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew SOF0Segment(aJPEG, Compression.Huffman, 8).encode(aOutput).log(a", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (sl != null) {\n                SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();\n                SqlSession session = sqlSessionFactory.openSession();\n                try {\n                    LastschriftenMapper mapper = session.getMapper(\n                            Lastschrif", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "====================\n\nclass PretrainedAligner(TopLevelMfaWorker):\n\"\"\"Class for aligning text to phonemes using pretrained models\"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize the PretrainedAligner\"\"\"\n        super().__init__(**kwargs", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       Lore lore = LoreLoader.getLore(category, ident);\n\n        if (lore == null) {\n            entityPlayer.addChatMessage(new ChatComponentText(\"Could not find lore with category \" + category + \" and ident \" + ident));\n            return", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private final User user;\n    private final Budget budget;\n    private final CategoryDAO categoryDAO;\n    private final BudgetDAO budgetDAO;\n    private final TransactionDAO transactionDAO;\n    private final RecurringDAO recurringDAO;\n   ", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "public static Util getInstance() {\n\treturn instance;\n}\n\n\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static Logger getLogger() {\n\t", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInY", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode, initial_weight=initial_weight)\n\n    if verbose_level >= 2:\n        smart_print(problem.ch)\n\n    if verbose_level >= 3:\n        smart_", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "=====================\n\n    def test_hosts_container(self):\n        hosts = HostsContainer({\n            'local': [ LocalHost1(), LocalHost2(), LocalHost3() ],\n            'local-ssh': [ LocalSSHHost1(), LocalSSHHost2(),", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "       return (\n            command.startswith(self.get_tc_command(TcSubCommand.CLASS))\n            and command.split()[1].startswith(self.qdisc_class_name)\n        )\n\n        return self.__tc_command_history.", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "=====================\n\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL1L2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "   public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabase;\n        Cursor cursor = db.rawQuery(\"SELECT * FROM Expenses WHERE \" + ExpenseTable", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private TextView weekDayTextView;\n\n    private TextView monthTitleTextView;\n\n    private TextView monthYearTextView;\n\n    private TextView monthNumberTextView;\n\n    private TextView monthNumberTextView2;\n\n    private TextView monthNumberTextView3;\n\n    private", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "```python\nclass TestWhiteNoise(object):\n\n  def test_no_input(self):\n    wn = white_noise()\n    assert isinstance(wn, Stream)\n    assert wn.take(100)\n```\nThis test case checks that", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "=====================\n\ndef unify(t1, t2, backref=None):\n    \"\"\"Unify `t1` to `t2`\n\n    After unification `t1` should be equal to `t2` or `t1` would be\n    a subtype", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "```python\n        self.auth = Auth()\n        self.account_id = None\n        self.homes = CaseInsensitiveDict()\n        self.last_refresh = 0\n        self.last_refresh_time = 0\n        self.motion_interval = DEFAULT", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "=====================\n\n\t\treturn default_flags\n\n\tdef create_model_item(self, data, parent, children=None):\n\t\tif isinstance(data, Geometry):\n\t\t\tif isinstance(data, Part):\n\t\t\t\tchildren = []\n\t\t", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "=====================\n\ndef SocketTransport(\n    service,\n    host,\n    port,\n    timeout,\n    max_frame_size,\n    next_provider,\n    global_properties=None,\n    local_properties=None,\n    logger=None,\n   ", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       ProcessBuilder pb = new ProcessBuilder(\"java\", \"-jar\", \"dumpling.jar\", \"threaddump\", \"--in\", \"pipe:\");\n        pb.redirectErrorStream(true);\n        Process p = pb.start();\n        p.getInputStream().close();\n        p.", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return data;\n    }\n\n    private static DrumStoreEntry<String, String> createNewData(Long key, DrumOperation operation, Long... neighbors) {\n        InMemoryEntry<String, String> data = new InMemoryEntry<>();\n        data.setKey(key);", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       RoxanaProperties roxanaProperties = new RoxanaProperties();\n        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();\n        builder.withLocale(Locale.US);\n        builder.withLocale(Locale.FRANCE);\n        builder.withLocale", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._socket.write(self._ping_msg)\n\n  def _CheckInitialConnection(self):\n    \"\"\"Checks if the initial connection is still valid.\"\"\"\n    if self._last_ping_start + self._ping_timeout < time.time():\n      self._log.", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert almost_eq(freq2lag(freq2lag(v)), v)\n      assert almost_eq(lag2freq(lag2freq(v)), v)\n\n\nclass TestAlmostEq(object):\n  table = [\n    (1, 1, 1,", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "=====================\n\nclass ConfigCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.dbi = GlobalConfigCache(self.bot)\n        self.dbi.load()\n        self.config_manager =", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if self.symbol in ('eq', 'ne'):\n        return numeric_equal(operands[0], operands[1])\n    elif self.symbol in ('lt', 'gt'):\n        return numeric_less(operands[0], operands[1])\n    elif", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(getResources().getString(R.string.welcome_message, getActivity().getResources().getString(R.string.app_name)));\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        m", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Open chat activity\n            try {\n                // Notify the fragment to open the chat activity\n                InvokeMethod.invokeStaticMethod(classToNotify, \"startChat\", newChatId);\n            } catch (Exception e) {\n                Log.e(this.getClass", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       MAP<String, String> result = wxPayClient.unifiedOrder(request);\n        String prepayId = result.get(\"prepay_id\");\n        String codeUrl = result.get(\"code_url\");\n        LOG.info(\"prepayId:{}, codeUrl:", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       MessageMapperEnum messageMapperEnum = mock(MessageMapperEnum.class);\n        List<Parameter> parameters = new ArrayList<>();\n        parameters.add(Parameter.create(Param.STRING, STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01));", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\tint d1 = in.read1();\n\t\tint tag = d1 & 0x0F;\n\t\tif (tag == CODEINT4_TAG)\n\t\t\treturn readSmallIntValue(d1);\n\t\telse if (tag == CODEINT", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "=====================\n\nself.management = management.Management(self)\nself.quota = quota.Quotas(self)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "\n        parser_class_list += [\n            MacOsPingParser,\n            AlpineLinuxPingParser,\n        ]\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class()\n                break", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate.getText()));\n        }\r\n\r\n        // set video properties\r\n        if (e.getActionCommand().equals(SET_VIDEO_PROPERTIES)) {\r\n            int width = Integer.parseInt(", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self._probe = probe\n        else:\n            self._probe = load_probe(kwargs.pop('probe_file', None))\n        self._kwargs = kwargs\n        self._logger = logging.getLogger(__name__)\n        self._logger.setLevel(logging.INFO)\n", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   public final Promise<Channel> connect(final TransportContext context, final String connectionToken) {\n        if (context == null) {\n            throw new ArgumentNullException(\"context\");\n        }\n\n        // TODO: Implement connection logic.\n        return Promises.newSuccess();\n    }", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "     self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    \"\"\"\n      Performs the following analysis:\n      1. Control flow graph construction\n      2. Control dependence graph construction\n      3. Conditions extraction\n      ", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       ObservableRegistry.getObservableRegistry().getObservable(this.getClass()).register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = infl", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if (column == null)\n      throw new QueryGrammarException(\"Cannot apply IN on a null column\");\n\n    result.append(OPEN_BRACKET", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/input/ddi-simple.xml\");\n\t\t\tFile outputFile = new File(basePath + \"/output/ddi-simple.xml\");\n\t\t\tFile xformsFile = new File(basePath + \"/output", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "       self.assertEqual(\n            Normal(mu=0.0, sigma=1.0).draw(10),\n            np.random.normal(loc=0.0, scale=1.0, size=10),\n        )\n\n        self.assertEqual(\n           ", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpad state\n\n        state = stateFactory.createState(VpadState.class);", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(BooleanTag tag, boolean value) throws InvalidValueException {\n\t\tValidity validity = isValid(tag);\n\t\tif (validity != null && validity.isBoolean()) {\n\t\t\tvalidity.acceptBoolean(tag, value);\n\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "=====================\n\n    def test_replace_blank_name(self):\n        self.assertEqual(\"Your child\", replace_blank_name(name=None, language=\"English\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=\"\", language=\"English\"))\n       ", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expect(systemUnderTestMock.nonVoidFailWithParameter(GIVEN_STRING)).andThrow(\n                                new ExpectedException.ThrowableFunction(\n                                        () -> new ExpectedException(EXPECTED_ERROR_MESSAGE)));\n                        mocksControl.replay", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "\n# Decoder for the rest octets of the L3 message\nclass RestOctets(CSN1):\n    # name for the rest octets\n    name = 'RestOctets'\n    # name for the padding\n    rest_name = 'RestOctets_padding'\n   ", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "```python\n        if not skip_table_setup:\n            table_name = self._compute_table_name(model)\n            self.create_table(table_name, model)\n            self.validate_table(table_name, model)\n\n        # Bind all", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "=====================\n\n    return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def bloquear_cnpj(self, cnpj):\n        \"\"\"Sobrecarga do método ``bloquear_cnp", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "```python\nengine.bind(Integer, skip_table_creation=True)\n```\n\nThis will raise an error because `Integer` is not a subclass of `BaseModel`.\n\n```python\nwith pytest.raises(TypeError):\n    engine.bind", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "=====================\n\nu7 = Unit(\"Msun/pc**3\")\nassert u7.dimensions == mass/length**3\nassert u7.base_value == 1.0 / m_per_pc**3\n\n\ndef test_create_from_symbol():\n", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "=====================\n\n['Verify instance command with --show-property-values',\n ['instance', 'CIM_Foo.InstanceID=\"CIM_Foo1\"', '--show-property-values'],\n {'stdout': ['InstanceId: CIM_Foo1',\n            ", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       loadModules();\n        // Register listeners\n        event.getPluginManager().registerEventListeners(this);\n        // Register commands\n        CommandLoader.registerCommands(this);\n        // Register EconomyLite\n        game.getServiceManager().register(EconomyLite.class);\n       ", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       tag = TAG()\n        if index >= 0:\n            self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag))\n        elif name:\n            self._call_fmod(\"FMOD_Sound_GetTagByName\", name, by", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   public void startEditAccountActivity(Account account) {\n                        startActivity(EditActivity.getIntent(MainActivity.this, account, AccountEditController.class));\n                    }\n\n                    @Override\n                    public void startEditOrderActivity(Order order) {\n                ", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponse<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Query(\"page\") int page,\n\t\t\t@Query(\"sort\") Image.Sort sort,\n\t\t\t@Query(\"nsfw\")", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.sensors.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertIsInstance(thermometer_data, dict)\n        self.assertIn(\"temperature\", thermometer_data)\n       ", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "```python\ndef test_ref_value_path(reference_tracker):\n    \"\"\"has path, value not dumped\"\"\"\n    column = User.age[\"foo\"]\n    value = 3\n    expected_ref = \"#n0.v0\"\n    expected_action =", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           Platform.runLater(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    Alert alert = new Alert(AlertType.ERROR);\r\n                    alert.setTitle(\"Error downloading beatmap\");\r\n                    alert.setContent", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "=====================\n        if request.method == 'POST':\n            form = self.form_class(request.POST)\n            if form.is_valid():\n                comment = form.save(commit=False)\n                comment.post = post\n                comment.user =", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a list of trending terms, which are the most popular search terms\n     *\n     * @param serviceIds a {@link Map} of ids", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           disconnectFromWifi(mWifiManager);\n            of(mConnectionSuccessListener).ifPresent(connectionSuccessListener -> connectionSuccessListener.error(connectionErrorCode));\n        }\n    };\n\n    @Nullable\n    private static WifiManager getWifiManager(@NonNull Context context)", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 9 || type == 0) {\r", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack.getArchivedCards()) {", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "=====================\n\nclass SegmentVadArguments(NamedTuple):\n    \"\"\"\n    Arguments for the :class:`SegmentVadFunction`\n    \"\"\"\n\n    recording: str\n    segmentation_options: Dict[str, Any]\n\n\ndef segment_vad_", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Jobs jobs;\n    private final Vms vms;\n    private final Errands errands;\n\n    public SpringDirectorClient(URI root, RestTemplate restTemplate) {\n        this.restTemplate = restTemplate;\n", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag), name, 0)\n        if name:\n            if tag.type != index:\n                raise ValueError(\n                    \"Tag type mismatch, expected %s, got %s", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "           nbits_encoded += self.process_section(bufr_message, bit_writer, section)\n\n        # TODO: check if the following is needed\n        # bit_writer.flush()\n        # TODO: check if the following is needed\n        # bufr_message.ser", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "=====================\n\nform = ReportAbuseForm(request.POST)\n\nif form.is_valid():\n    abuse_report = AbuseReport.objects.create(\n        logged_against=logged_against,\n        logged_by=logged_by,\n", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   public void listenToResultSet(final BenchmarkResult paramBenchmarkResult) {\n        final BenchmarkResult benchmarkResult = (BenchmarkResult) paramBenchmarkResult;\n        final Benchmark benchmark = benchmarkResult.getBenchmark();\n        final", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       ApplicationGlobals.initialize();\n\n        // initializing the ProtTest logger\n        ProtTestLogger.initialize();\n\n        // initializing the ProtTest Printer\n        ProtTestPrinter.initialize();\n\n        // initializing the ProtTest Aligner\n", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t}\n}\n\n// The following code snippet is the expected next line of code.\n// The code snippet below is not the expected next line of code.\n//tropo.record(\"recording.wav\", BEEP, MUTE, 300, ID(\"", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "               listaDeRespostas.getPropriedades().getEstado() != EstadoDaListaDeRespostas.FINALIZADA) {\n\t\t\t// Se a lista de respostas não estiver finalizada, salva a resposta\n\t\t\t// e", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tadapter = new PageAdapter(getSupportFragmentManager(),connector.getResult());\n\t\t\t\t\tmViewP", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   AdInterface adInterface;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    PlayerComponent playerComponent;\n\n    @Mock\n    Player player;\n\n    @Mock\n    PlayerUI playerUI;\n\n    @Mock\n    Player", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tPlatform.exit();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// initialize the client\n\t\t\tclient = new Drive.Builder(GoogleNetHttpTransport.newTrustedTransport(),\n\t\t\t\t\tJsonFactory.getDefaultInstance", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String className = rawTypeToString(type, INJECT_ADAPTER_SUFFIX);\n    String adapterClassName = adapterName(ClassName.get(packageName, type.getSimpleName()),\n        INJECT_ADAPTER_SUFFIX);\n\n    TypeSpec injectAdapter = new Type", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        */\r        // 打开/关闭透传消息\r\n        public static void enableReceiveNormalMsg(boolean enable){\r\n            new EnableReceiveNormalMsgApi().enableRe", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "=====================\n\n  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser()\n  params", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "\n    if suffix:\n        return f'{path}/{suffix}'\n    return etree_iter_paths(elem, context)\n\n@method(function('string-join', nargs=2, nilled=True))\ndef evaluate_string_join_function(self,", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "=====================\n\ndef last_record(table, fill=False):\n\"\"\"\nReturn the last record of the table\n\n:param table: a Table\n:param fill: True if empty values have to be filled with NaN\n:return: a dictionary with the last record\n\"\"\"\nreturn", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else if (message.getType() == MessageType.USER_INFO_REQUEST)\n            {\n                if (_pendingAudiologistInfo", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "=====================\n\n\t\tEXOG_A = []\n\t\tEXOG_B = []\n\n\t\tif opts.exogA:\n\t\t\tEXOG_A = []\n\t\t\tfor exogA in opts.exogA:\n\t\t\t\tEX", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       main.getLock().acquire();\n        pause(100);\n        main.getLock().release();\n        pause(100);\n        main.getLock().acquire();\n        pause(100);\n        main.getLock().release();\n        pause", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               DatePicker datePicker = new DatePicker(this, new DatePicker.OnYearMonthDayPickedListener() {\n                    @Override\n                    public void onYearMonthDayPicked(int year, int month, int day) {\n                        LunarCalendar lunarCalendar =", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0)", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n\n    private ViewPager mViewPager;\n    private TabLayout tabLayout;\n\n    private List<Fragment> fragmentList = new ArrayList<>();\n    private List<String> titleList = new ArrayList<>();\n\n    private static final int RE", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "```python\nself.tracerouter = Tracerouter.Tracerouter(self)\n```\n\n        self.tracerouter = Tracerouter.Tracerouter(self)\n        self.tracerouter.start()\n\n        self.link.start()\n        self", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "```python\nassert isinstance(deltas.deltas[4].attributes, Thread)\n```\nThis line of code should raise an AssertionError because the `deltas` object does not contain a Delta for a Thread object. The `deltas` object only contains Delt", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "   @property\n    def outbox(self):\n        return Outbox(self)\n\n    def is_opensource_api(self):\n        return environ.get(\"NYLAS_API_KEY\") is None\n\n    def is_enterprise_api(self):\n       ", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "   activityLightLevelManager = new ActivityLightLevelManager(this, activityLightLevelChanger);\n\n    // Set up the UI\n    setContentView(R.layout.activity_dynamic_star_map);\n\n    // Set up the UI for the time player\n    timePlayerUISetup", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "=====================\nnon_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n=====================\n\n        lnlike = np.", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           ID(**kwargs),  # Identity, 1 to 8 bytes\n            ])\r\n        self._len_gsmrr(kwargs.get('V', 0)) if with_options else ''\r\n\r\n\r\n# section 9.2.13\r\nclass REG", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "```python\n        TcClassParser(self.__con).parse(device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output))\n```\nThis line of code parses the tc class configuration for the given device using the `Tc", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "=====================\nif type(right) == Column:\n    result, index = apply_fast_eq(left.values, right.values,\n                                 left.index, right.index)\n    return Column(result, index)\n\nelse:\n    return Column(np.equal", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "```python\n@validation_error(SwaggerMappingError)\ndef validate_request(request, validator_map):\n    # ...\n```\n\nThis decorator is used to transform a SwaggerMappingError into a\nRequestValidationError. This is necessary because SwaggerMappingError\n", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
