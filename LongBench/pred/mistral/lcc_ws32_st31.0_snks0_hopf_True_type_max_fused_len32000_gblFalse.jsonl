{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tMobile m = p.", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tself._init_graph(Y_, Z_)\n\t\t\tA = self.best(Y_, Z_, root=e_u)\n\t\t\tsolutions.append(A)\n\t\t\tself._init_graph(self.graph, self.Y)\n\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "if __name__ == '__main__':\n    TestSndfile.main()\n# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4\n# End of code.", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def _DEBUG(self):\n        self.click_by_css(self._DEBUG_BUTTON)\n        self.wait_for_element_present(self._DEBUG_DIALOG)\n        self.click_by_css(self._DEBUG_DIALOG_OK)", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t\twriter.addAttribute(\"label\", styleValue.getLabel());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n    def __init__(self, question, category, id):\n        super(_QuestionData, self).__init__()\n        self.question = question\n        self.category = category\n        self.id = id\n        self.type = \"question\"\n\nclass _AnswerData", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Target = new SR_TargetLocation(RuneAcc, mob);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc,", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n *\n * Server", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           try {\n                sp = new JESpace (name, path);\n                spaceRegistrar.put (name, sp);\n            } catch (SpaceError e) {\n                error (e);\n                return null;\n            }\n        }\n        return sp", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item instanceof AlchemyPotion) {\n\t\t\t\tAlchemyPotion potion = (AlchemyPotion) item;", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "# Create a dispatcher instance\ndispatcher = SoapDispatcher(soap_namespace=\"http://example.com/soap\",\n                           soap_action=\"http://example.com/soap/example\",\n                           location=\"http://example.com:8000/soap\",\n                ", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "   def lock_status(self, status_id):\n        self.statuses = [s for s in self.statuses if s.id_ != status_id]\n        self.update_timestamps()\n        self.update_statuses(self.statuses)\n       ", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "def get_process_data(self, status_id, name, params=None, session=None):\n    \"\"\"\n    Get process data\n    :param status_id:\n    :param name:\n    :param params:\n    :param session:\n    :return:\n   ", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsNotNull (c);\n\t\t\tAssert.IsInstanceOf<ZoneIdentityPermission> (c);\n\t\t\tAssert.AreEqual (SecurityZone.Unrestricted,", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "# This is the main function that sets up the SSL context and returns a socket\n# that can be used to connect to a remote server.\ndef create_ssl_context(keyfile, certfile, ca_certs=None):\n    context = _get_ssl_context(keyfile,", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "       self.__tmp_file = os.path.join(self.__tmp_dir, str(uuid.uuid4()))\n        self.__datastream_fd = os.open(self.__tmp_file, os.O_RDWR | os.O_CREAT)\n        self.__", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, 0).ToString());\n\t\t\t\t\t//update database\n\t\t\t\t\t//...\n\t\t\t\t}\n\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            String argName = args[i].getName();", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}));\n\t\tprivate ConfigFile configFile;\n\t\tprivate String name;\n\t\tFile(ConfigFile configFile, String name)\n\t\t{\n\t\t\tthis.configFile =", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"Auto save\",\n\t\t\t\t\t\tget", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               if (m_Owner.Caster.AccessLevel > AccessLevel.Player)\n                {\n                    if (m_Owner.Caster.InRange(m_Owner.SpellTarget, 12))\n                    {\n                        m_Owner.Target(m_", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "#    for state in states:\n#        if state.is_new:\n#            self._new[state.instance] = state\n#        elif state.is_deleted:\n#            self._deleted[state.instance] = state\n#        else:\n#            self.identity", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named == null) {\n\t\t\t\tnamed = new ArrayList", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "====================\n\nclass UIHandler(RequestHandler):\n    @authenticated\n    @removeslash\n    def get(self):\n        self.render(\"ui.html\")\n\nclass LoginHandler(RequestHandler):\n    @authenticated\n    @removeslash\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "if __name__ == '__main__':\n    args = parser.parse_args()\n    downloader = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    downloader.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Poss", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds += [{'os': 'Windows', 'os_pretty': 'Windows',\n                   'arch': 'x86', 'arch_pretty': '32-bit',\n                   'download_link': make_download_link(\n                       'firefox', version", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeIssueType(projectID, issueTypeID);\n\t\t}\n\t\tif (stateBeansList!=null && stateBeansList.", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax && memberList.Any( x => x.Identifier.ValueText == identifierNameSyntax.Identifier.ValueText ) ) {\n                    toReplace[argumentSyntax", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the children are the correct verticals for the first group configuration.\n        self._assert_children(2)\n        # Set to second group configuration.\n        split_test = self._update_partition_", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           //if (vertical) {\n            //    writer.DirectObject();\n            //    writer.BeginText();\n            //    writer.SetFontAndSize(this);\n            //    writer.ShowText(\"V\");\n            //    writer.EndText();\n            //    writer.", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the parent\n\t\t\t\t\t\t\tCell", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(Bitmap result) {\n            bitmapReference = new SoftReference<>(result);\n          }\n          @Override public void onFailure(Throw", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\nif __name__ == \"__main__\":\n    # TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\n    # TODO: Add tests for NodeCollection and NodeAllView\n    # TODO", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles, sequences);\n\t\t}\n\t\tnotifyPoseListeners(timestamp, getCurrentPose());\n\t}\n\tpublic void notifyP", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               if (Enabled)\n                    ImageUrl = EnabledImageURL;\n                else\n                    ImageUrl = DisabledImageURL;\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "sharpness = compound.getInteger(\"sharpness\");\nfireAspect = compound.getInteger(\"fireAspect\");\nknockback = compound.getInteger(\"knockback\");\nluckOfTheEnder = compound.getInteger(\"luckOfTheEnder\");\n\n\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return getId() + \" [\" + getProbabilityString() + \"]\";\n    }\n    /**\n     * Get the probability as a percentage string.\n     *\n     * @return The probability as a percentage string.\n     */\n    private String getProbabilityString()", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "# test admin can access any group\ni = store.handle_indicator_create(indicator=indicator, token=token, groups=['everyone'])\nassert i is not None\n# test admin can access any group search\ni = store.handle_indicator_search(query={'", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "# Test that the delta is correct when updating a field that is a list\n# of dictionaries\n# Test that the delta is correct when updating a field that is a list\n# of lists\n# Test that the delta is correct when updating a field that is a list\n# of lists of diction", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "=======================\n\ndef inspect_lidar_data(file_path: str):\n    \"\"\"\n    Inspects lidar data file.\n    :param file_path: The path to the lidar data file.\n    \"\"\"\n    with open(file_path, 'rb", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (!ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in toScan)\n            {\n                _commandBus.Send(new ScanMediaFilesCommand(path, root", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            obj = resbrains[0].getObject()\n            objcomments = pdt.getDiscussionFor(obj)\n            objcomments.toggleView()\n            json", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic bool IsWater\n\t\t{\n\t\t\tget { return ( m_ID & 0x8000 ) != 0; }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // get channel_uri:\n                    // if it's not there:\n                    // create it\n                    // cache it\n                    // send it to the client\n                    if (null == scene.LandChannel)\n                    {\n                        // create a new channel", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.DateTime;\n\t\t\tPayPeriodCur.DateStop=textDateStop.DateTime;\n\t\t\tPayPeriodCur.DatePaycheck=textDatePaycheck.DateTime;", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_timeseries(column_headings)\n        # Convert averaging period to datetime.\n        column_headings['Time'] = [\n            _parse_time_series_datetime(x) for x in column_headings['", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "# This function is used by the `group_member_create` and `organization_member_create`\n# functions to check if the user is allowed to add a new member to the group or\n# organization.\n# It checks if the user has the `create_member` permission for the group", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tString childClassName = predictionAttribute.getValue(example).toString();\n\t\t\t\tNode childNode = node.getChild(childClassName);\n\t\t\t\t// setting outcome\n\t\t\t\toutcomes[parentIndex] = childNode.getPartitionId();\n\t\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return this.SearchSegments(settings, segments, null);\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = string.charAt(offset++) << 10\n                      | string.charAt(offset++) & 0x3FF;\n         }\n         if (_range != null && _range.contains(codePoint)) {\n            return offset;\n         }\n         return", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tObservationHistoryDAO observationHistoryDAO = new ObservationHistoryDAOImpl();\n\t\tObservationHistory observationHistory = observationHistoryDAO.getObservationHistoryByAccessionNumber(accessionNumber);\n\t\tif (observationHistory != null) {\n\t\t\tString", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != Mod.CurrentModId)\n\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif (beans != null) {\n\t\t\tfor (ims.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean bean : beans) {\n\t\t\t\tcoll.add(new CatsReferralPendingEmergencyNonEDAd", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify()\n#-------------------\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.Length];\n            A.GetValueSeq(seqindex, ref ret);\n            return ret;\n        }\n    }\n}", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " pD[ 'plotName' ] = pD[ 'plotName' ].replace( ' ', '_' )\n  pD[ 'plotName' ] = pD[ 'plotName' ].replace( '/', '_' )\n  pD[ 'plotName' ] =", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (player.IsPaused || player.IsDead || player.IsDisconnected || player.IsIdle)\n\t\t\t\treturn;\n\t\t\tif (player.IsWon || player.IsLost)\n\t\t\t\treturn;\n\t\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       // Save the compiled plan to disk\n        String planFileName = BuildDirectoryUtils.getTestPlanFileName(name);\n        plan.saveToFile(planFileName);\n        // Save the JSON plan to disk\n        String jsonPlanFileName = BuildDirectoryUtils.getTestJsonPlanFileName(name);", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(221, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.DataBits = (byte)data_bits;\n\t\t\tdcb.StopBits = (byte)bits;\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "   page = self.get(reverse('user_profile', args=(self.user.username,)))\n    self.assertEqual(page.status_code, 200)\n    self.assertTemplateUsed(page, 'user_profile.html')\n    self.assertContains(page", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   _keep_tempdir = parser.parse_args().keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n    main()\n# vim: set fileencoding=utf-8 :\n# Local Variables:\n# mode: python\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tself[\"list\"].setList(self.newAPList)\n\t\tself[\"list\"].setCurrent(self.currentListIndex)\n\t\tself[\"list\"].setEntryBgColor(0, 0, 0)\n\t\tself[\"list\"].setEntryBgColor", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               int len = fCode.Length;\n                int width = (int) ((x + fontX) * len);\n                int height = (int) (barHeight + fontY + fontYExt);\n                return new Rectangle(0, 0, width, height", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n\n// The following code is for testing purposes only\npublic static void main(String[] args) {\n  Properties props = new Properties();\n  props.setProperty(\"foo\", \"bar\");\n  props.setProperty(\"bool\", \"true\");\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "#         y_points = np.arange(-89.5, +89.5, 1.23)\n        y_points = np.arange(-89.5, +89.5, 1.23)\n        x_points, y_", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrent", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "# build dataset\nbuild_dataset('mir_1k/mir_1k/')\n# slice the head and tail of the wav file\nslice_wav_head_tail('mir_1k/mir_1k/')\n# get mfcc features\nget_mfcc", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "           }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, name, dll=None, resultType=None, argTypes=(), doc=None, argNames=(), extension=None, deprecated=False ):\n        \"\"\"\n        Create a null function with the given name, DLL, result type, argument types,", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           baos.write(emptyStreams.toByteArray());\n            writeUint64(header, baos.size());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeUint64(final DataOutput header, final long value", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   alphaLevel -= 1;\n                    if (alphaLevel <= 0)\n                    {\n                        inRamp = true;\n                        try {\n                            Thread.sleep(rampDelay);\n                        } catch (InterruptedException e) {\n                            e", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().FirstOrDefault();\n            item.CanRemove.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_allow_removal_if_downloading()", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "           if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n            }\n            if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken,", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "#        f.writelines(['F) ', str(NX), ' ', str(NY), '\t# Image size in pixels\\n'])\n#        f.writelines(['G) ', str(xcent), ' ', str(ycent), '\t# Center of image\\n'])\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 1);\n                    i += ((b & 0x04) << 3);\n                    i += ((b & 0x02) << 6);\n                    i += ((b & 0x", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "   @property\n    def _course_key(self):\n        \"\"\"\n        Return the CourseKey for the course.\n        \"\"\"\n        if self._course_key is None:\n            self._course_key = CourseKey.from_string(\n                u'edX+{", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tString chanceString = splitNumber[1];\n\t\t\tchance = Float.parseFloat(chanceString);\n\t\t}\n\t\treturn (int) (Math.random() * chance) / 1", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "# Define main function\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True, type='str'),\n            state=dict(type='str', choices=['present', 'absent']),\n            apiid=", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy = new System.Windows.Forms.Label();\n            this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 12);\n            this.lblPrivacy.Name = \"lbl", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "```python\n        for plugname, plug in self.loaded_plugins:\n            try:\n                plug.run()\n            except KeyboardInterrupt:\n                self.ui_log.info(_(\"Plugin %s interrupted by user\") % plugname)\n                self._", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class IConferenceSession(IConference, ISession):\n    pass\n\nThis class is used to represent a Conference Session in the Fossil database.\nIt inherits from IConference and ISession classes, which define the common properties and methods for Conference and Session objects respectively.\n\nThe", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText(), subfolders.isSelected(), messageWriter);\n            } else {\n                result = parent.mirth", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(\"value\").intValue();\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.isOpened()) {\n            Bundle parameters = new Bundle();\n            parameters.putString(FIELDS, REQUEST_FIELDS);\n            Request request = new Request(currentSession, \"/me\", parameters, null);\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.chance;\n\t\t}\n\t\tfor (Emotion emotion : emotions) {\n\t\t\temotion.chance /= sum;\n\t\t}\n\t}\n}\nThe code above", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "# test_xml_export\ndef test_xml_export(self):\n    \"\"\"Test exporting a build to XML.\"\"\"\n    # create a build object\n    build = Build()\n    # add a build\n    build.add_build(\n        Build(\n            name=\"test_", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   Long = LongOriginRad + (x/k0 + (1-NorthernHemisphere)*(1/24*sin(2*phi1Rad)\n                                                         + 1/720*sin(4*phi1Rad)\n                                                        ", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\nform = ReportUserForm(request.POST)\nif form.is_valid():\n    report = form.save(commit=False)\n    report.user = user\n    report.reporter = request.user\n    report.save()\n    messages.success(request, \"User", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(StepView):\n    \"\"\"A step for entering the name of the new product series.\"\"\"\n    label = \"Enter the name of the new product series:\"\n    schema = ISourcePackages['name']\n    @property\n    def next_step(self):\n       ", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "=====================\n    config = _Config()\n    define_defaults()\n    define_constants()\n    define_post_processors(config)\n    config._init()\n    return config\n=====================\n# This is the code you need to complete\n# The `define_post", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                throw new", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "# class OBD_PID_XX(OBD_Packet):\n#     name = \"PID_XX\"\n#     fields_desc = [\n#         # Add fields here\n#     ]\n#     def __init__(self, *args, **kwargs):\n#         super", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.bus_name = self.bus_name()\n\t\tself.bus_name.connect('name-acquired', self.on_name_acquired)\n\t\tself.bus_name.connect('name-lost', self.on_name_l", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           }\n            else\n            {\n                index = AddCraft(1044381, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    def __enter__(self):\n        self.push()\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):\n        self.pop(exc_value)\n\n# vim: et:ts=4:sw=4:sts", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer_list(session, cluster_id, topic_name, query_columns)\n    if topic_name:\n        response = response.filter(PubSubTopic.name == topic_name)\n    return response\n# ###################################################################################################", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "dx = (angles - min_rot_angle) / alen\nelse:\n    # Find projection of axis on detector\n    axis_proj = _axis_in_detector(ray_trafo.geometry)\n    # Find distance from projection of rotation axis for each pixel\n    dx", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\nclass ProviderManager:\n    def __init__(self):\n        self.providers = {}\n        self.provider_classes = {\n            'NZB': NZBProvider,\n            'Torrent': TorrentProvider,\n        }\n        self.provider_names =", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (IsEmpty)\n\t\t\t\treturn String.Empty;\n\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\treturn font_size_names [(int) type];\n\t\t}", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidOperationException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(innerObj.Properties[0].Value.Type,", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    int index = h * width + w;\n                    if (w > 0) {\n                        edges.add(T2(w + \"-\" + h, w + \"-\" + (h", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "=======================\n\ni1 = iso.Isoelastics(ds)\n\nThis code imports the necessary modules and defines some helper functions. It also includes some test functions to check the behavior of the Isoelastics class when given incorrect or missing data.\n\nThe `getfile", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final File file1 = new File(args[0]);\n        final File file2 = new File(args[1]);\n        final LocalTripleStore db1 = new LocalTripleStore(file1);\n        final LocalTripleStore db2 = new LocalTripleStore(file2", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "if __name__ == '__main__':\n    unittest.main()\n# This script is a test script for the alerting functionality of the SpotBot.\n# It imports the necessary modules, sets up a test case, and runs the tests.\n# The test case includes several methods to test", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJar = performDownload();\n\t\t\tif (downloadedJar != null) {\n\t\t\t\treturn performInstallation(downloadedJar);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.glVertexArrayID);\n\t\t\tOpenGL.glDeleteProgram(OpenGL.programID);\n\t\t\tOpenGL.glDeleteShader(OpenGL.vertexShaderID);\n\t\t\tOpenGL.", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "   @property\n    def total_cov_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the total *xy* covariance matrix.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._get_node_value('", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 noCanonicalIdAccounts.add(owningAccount.getAccountNumber());\n                } else {\n                  accountMap.put(owningObjectId, owningAccount);\n                }\n              } catch (Exception e) { // Account is deleted\n                LOG.", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public IFolder SelectedFolder\n        {\n            get { return _selectedTreeNode == null ? null : _selectedTreeNode.Folder; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setImportAsNewEntity(isImportAsNewEntity);\n        command.setName(name);\n        List<ConstraintViolation> violations = new ArrayList<ConstraintViolation>();\n        List", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw11 = new global::Gtk.SpinButton (0, 100, 1);\n\t\t\tw11.Name = \"spinbuttonCpuPercent\";\n\t\t\tw11.Value = 50;\n\t\t\tw1", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "# ==============================================================================\n# Set up the database if it's enabled\n# ==============================================================================\nif use_database:\n    self.db = self.get_db()\n# ==============================================================================\n# Set up the obfuscation", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic FieldBuilder DefineField(string name, Type fieldType, FieldAttributes attribs)\n\t\t{\n\t\t\treturn DefineField(name, fieldType, attribs, null);\n\t\t}", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return (Builder)pb.CreateBuilder<SendInvitationRequest>(prototype);\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Returns the index of the vertex in the vertex buffer that corresponds to\n     * the index", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (CmsStringUtil.isNotEmpty(showDateData)) {\n            String[] dateCols = CmsStringUtil.split(showDateData, ';');\n            for (String dateCol : dateCols) {\n                if (COLUMN_NAME_DATECRE", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n//  The MIT License (MIT)\n//\n//  Copyright (c) 2014 Invex\n//\n//  Permission is", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n  }\n}", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n               ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // check if all discount criteria codes are used\n            if (CriteriaCodesUsed.Count != 3)\n            {\n                ValidationColumn = FMainDS.PcConferenceSettings.Columns[\"OutreachCostCriteriaCode\"];\n                VerificationResult = new TScreenVerificationResult", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, (int) stream.Length);\n                // Adding file content as byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __len__(self):\n        \"\"\"Number of requirements\"\"\"\n        return sum(len(v) for v in self._reqs.values())\n\n    def __iter__(self):\n        \"\"\"Iterator over requirements\"\"\"\n        return iter(self._reqs.values())\n\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && !CopyRange; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (_customRange == value)\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t}\n\t}\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation lineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (lineAnnotation.getLineNumber() < 0) {\n                    throw new IllegalStateException(\"Invalid line number: \" + lineAnnotation.get", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "}\nThis code is a base class for various types of food items in Ultima Online. It includes properties and methods for handling food consumption, as well as serialization and deserialization. The Food class is abstract, meaning it cannot be instantiated directly, and instead serves as a base class for other food", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.Item(\"Q\").GetValue<bool>())\n                    {\n                       ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraints with default values\n\t * @param x\n\t * @param y\n\t * @param", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "# class DWD(object):\n#     def __init__(self, sh, username, password):\n#         self.sh = sh\n#         self.username = username\n#         self.password = password\n#         self.warnings = {}\n#         self.forecast = {}", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "   self.assertEquals(field_model_def, field_def)\nif __name__ == '__main__':\n    run_tests = make_test_suite()\n    run_tests.run(TestParser)\n    run_tests.run(TestParser, 'test_field", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new object[] {\"10\", \"E1\"});\n                // widen to string\n                var stmtText = \"create index idx on MyWidenedWindow(MyString)\";\n                env.CompileDeployAdd(stmtText);\n                var compiled", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        clibound = clibounded(self._lib, c._ptr)\n       ", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "# This is a custom method to save the view arch in a json format\ndef save_view_arch_json(self, cr, uid, view_id, arch, context=None):\n    \"\"\"\n    :param int view_id: The id of the view to update\n    :param", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        c.putClientProperty(documentBaseKey, null);\n        c.putClientProperty(htmlDisable, htmlDisabled);\n    }\n    /**", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "s = create(filename, content)\nassert s.name_is_test\nassert s.content_is_testharness\nassert items(s) == [(\"testharness\", \"/\" + filename)]\n# The following tests are for the test-support files.\n# They are not", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmNamedQuery(namedQueryReference);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.SqlLoader.AddNamedQuery(namedQueryReference);\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.pop();\n    }\n    private void popInvocations(int count) {\n        assert count >= 0;\n        for (int i = 0; i < count; i++) {\n            popInvocation();\n        }\n    }\n    private void", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "# Create a list of appliances to use for the test\nself.appliances = []\nif self.args['provision_appliance']:\n    self.appliances.append(self.appliance)\n    self.provision_appliance()\nelif self", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phiValue = getCachedPhi(key, value.stamp());\n                    mergePhi(phiValue, value, states);\n                }\n            }\n        }\n        private void mergePhi(ValueNode phi, Value", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraEvent */\n    public void handle", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic EodonianMapGump(Mobile from) : base(0x237F, 400)\n\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "=====================\n\nThe code seems to be defining some database models for a bibliographic database using SQLAlchemy. It defines a base `Record` model with some basic attributes like `id`, `creation_date`, `modification_date`, `master_format`, and `additional_info", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def __getstate__(self):\n        state = self.__dict__.copy()\n        del state['module']\n        return state\n\n    def __setstate__(self, state):\n        self.__dict__.update(state)\n        self.module = self.get_cache()\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def __init__(self, fpath=None, **kwargs):\n        \"\"\"\n        Constructor.\n        **Keyword arguments**:\n          - *fpath*: string, the path to the file.\n          - *kwargs*: dictionary, other optional arguments.\n        \"\"\"\n        _Base", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "#######################################################################################\n#                                                                                     #\n#                                                                                     #\n#                                                                                     #\n#                                                                                     #\n#                                                                                     #\n#                                                                                     #\n#                ", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(action.startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t// Allow plugins to be loaded\n\t\t\t\treturn action;\n\t\t\t}\n\t\t\t// Allow access to the plugins directory\n\t\t\tif(action.startsWith(PL", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(\n            reviewCB=sampleReviewCB, startCB=sampleStartCB,\n            summaryCB=sampleSummaryCB)\n        yield gsp.start()\n        yield gsp.sendEvent(1, 'change', {'project':", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'test'\n    self.category.label = 'label'\n    self.category.scheme = 'scheme'\n    self.category.extension_elements =", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<>();\n            for (Map.Entry<String, AnnotationMirror> e1 : r1.entrySet()) {\n                String key = e1.getKey", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# Register classes\nclasses = (\n    MATERIAL_PT_material,\n    MATERIAL_PT_material_new,\n    MATERIAL_PT_material_new_from_image,\n    MATERIAL_PT_material_new_from_file", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Mapper.MapperNo == 16)\n            {\n                var mapper16 = (Mapper16) _engine.Memory.Mapper;\n                Mapper16_VRAM_Address = mapper16.VRAM_Address;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem oMenuItem = new JMenuItem(\"Open Document\");\n            oMenuItem.setActionCommand(\"OpenDocument\");\n            oMenuItem.addActionListener(oActionListener);\n            _jMnuRoot.add(oMenuItem);\n        }\n        private JMenuItem getInspectMenuItem(", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Blue Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Green Bears]\n\t\tAdd(\"Party Quest\",", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = MeasuredHeight;\n\t\t\tint newHeight = 0;\n\t\t\tfor (int i = 0; i < ChildCount; i++) {\n\t\t\t\tView child = GetChildAt (i);\n\t\t\t\tint childHeight", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "=====================\n\n# This is the next line of code that should be added to the file.\n# It creates a custom manager for the Announcement model that will be used to filter announcements by Twitter cross-publications.\nclass AnnouncementTwitterPubManager(models.Manager):\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#lexers.register_lexer(name='php', filename='*.php', lexer=PhpLexer)\n# Override the default lexer for .rst files to enable highlighting of code blocks\n#lexers.register_lexer(name='rst',", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "# The following line of code is where I'm stuck.  I need to sum the durations for all the records\n# in the flight_group table for the current groupID.  I've tried various things but can't get it to work.\n# I've tried using a cursor", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "# TODO: this is a placeholder for the real code that will be called when the\n# backup is complete.  It should be a call to the backup system to mark the\n# backup as complete.\n# TODO: this should be a call to the backup system to mark the backup as complete.\n#", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tcase \"complicity\":\n\t\t\t\tMsg(\"I'm not involved in any kind of complicity.<br/>I'm just a simple shepherd.<br/>I don't have time for that.<br/>I'm busy taking care of my sheep.<br/>", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {}\nWhat should be added to the code?\nThe responses dictionary should be populated with instances of the Response classes.\nFor example:\nresponses['LoginAccepted'] = LoginAcceptedResponse\nresponses['LoginFailed'] = LoginFailedResponse\nresponses['LoginFailed_Invalid", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nclass HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, uuid, name, status", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n            finish();\n        }\n    }\n}\nThis code is a part of an Android app called CrappaLinks. It's a URL", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "# TODO: Add step for checking that primary has no other items than packages\n# TODO: Add step for checking that primary has no other items than packages\n# TODO: Add step for checking that primary has no other items than packages\n# TODO: Add step for checking that primary has no other items than packages\n", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n    def copy_tree (self, srcdir, destdir):\n        \"\"\"Recursively copy a directory tree from 'srcdir' to 'destdir'.\"\"\"\n        if not os.path.isdir(srcdir):\n            raise ValueError, \"Source directory '%s' does not exist", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tif (lazyPropertyNames[j] == fieldName)\n\t\t\t\t{\n\t\t\t\t\tresult = disassembledValues[j", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "#        '-N', job_name,\n#        '-o', log_name,\n#        '-j', 'y',\n#        '-q', 'all.q',\n#        '-l', 'vmem=1024m,h_vmem=1024", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventDelegateViewModel());\n        }\n        // Add relationship (EventDelegate)\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        [Roles(\"Admin\")]\n        public ActionResult AddEventDelegate(EventDelegateViewModel model)\n", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       return string.Format(\"{0} - {1} - {2}\", ((Circle) obj).Radius, ((Circle) obj).Position.X, ((Circle) obj).Position.Y);\n                    }\n                    if (obj is string)\n                    {\n", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    def download(self, canHandleRange=True):\n        self.logDebug(\"Downloading file %s\" % self.pyfile.name)\n        self.logDebug(\"URL: %s\" % self.req.url)\n        self.req.addHeader(\"User-", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path != null && path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\t/// <summary>\n\t\t/// Determines the location from where to search for resources.\n\t\t///", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "       self.logger.info(\"syncing dhcp files\")\n        self.dhcp.sync()\n        return True\n    def clean_dhcp(self):\n        self.logger.info(\"cleaning dhcp files\")\n        self.dhcp.clean()\n        return", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement());\n    }\n}\n\n// The following code snippet is for testing purposes only\npublic static void main(String[] args) {\n    AbstractEventProducer producer = new AbstractEvent", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           for (; context.Suffix != PpmContext.ZERO; context = context.Suffix)\n            {\n                if (context.Number < _maxContextNumber)\n                {\n                    states[stateIndex++] = context.Statistics[context.Number];\n                }", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Sequence of Items\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", new", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[3]);\n\t\t\t//if test is used in any session, we cannot delete it\n\t\t\tbool testIsUsed = false;\n\t\t\tforeach(Session session in session_l)\n\t\t\t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_delete_bytes_empty(self):\n        o = self.file(b'')\n        delete_bytes(o, 8, 0)\n        self.assertEquals(b'', self.read(o))\n\n    def test_delete_bytes_one", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n<td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X</td>\n    <", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# TODO: plot the results\nif __name__ == '__main__':\n    cr = load_and_crunch_result_sets('results/*.json')\n    app = 'Firefox'\n    test = 'startup.system.app.init'\n    stat = '", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "if __name__ == '__main__':\n    unittest.main()", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRoundRect(x + 1, y + 1, controlSize - 2, controlSize - 2, 2, 2);\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " def simulateClassifier(self, classifier, patternDict, testName):\n    \"\"\"\n    Simulates the classifier on the given patterns and prints out the\n    results.\n    \"\"\"\n    failures = \"\"\n    numPatterns = len(patternDict)\n    LOGGER.", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(elementKind, offset - headerSize(), value);\n    }\n    @HOSTED_ONLY\n    public static final class OhmArrayLayoutFactory implements LayoutFactory {\n        private final Kind elementKind;\n        public OhmArrayLayoutFactory(Kind elementKind) {\n", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyPath = FileUtils.CombinePaths(ParentDirectory, relativePath);\n            if (File.Exists(assemblyPath)) {\n                return assemblyPath;\n            }\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef str_format_args(args):\n    \"\"\"\n    Converts a dictionary into a format_map object for str.format()\n    \"\"\"\n    return dict((k, v) for k, v in args.items() if v is not None)\n\ndef str_format_", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "     }\n    }\n  }\n}\nThe code above is incomplete. The next line of code should be:\ni20 = i18 + 1;\nThis line of code is missing in the code snippet provided. The missing line should be added before the comment \"// Next", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"  \" + s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               });\n            #endregion\n            #endregion\n        }\n    }\n}", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.user@test.com\"));\n\t}\n\tprotected void withCodeList(String codeListName, String... codes) {\n\t\tCodeListsFake codeListsFake =", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "   @testlib.with_tempfile\n    def test_popen_reads_from_file(self, tempfile):\n        context = testlib.TestContext()\n        context.add_executable('cat', 'cat')\n        with open(tempfile, 'w')", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (string.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tconfigDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), applicationName, propertiesName);\n\t\t\t}\n\t\t\tif (string.IsNullOrEmpty", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t// This is a workaround for a bug in the DataSet designer\n\t\t// that does not set the DataSet property when a constraint\n\t\t// is added to a DataTable.\n\t\t// This is only needed for constraints that are added\n\t\t// to a DataTable through", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n        Dialog.setTabOrder(self.zoomby_option, self.fontsize_option)\n        Dialog.setTabOrder(self.fontsize_option,", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               return true;\n            }\n            String stationId = wxs.getString( wxs.getColumnIndex( Wxs.ID ) );\n            String stationName = wxs.getString( wxs.getColumnIndex( Wxs.NAME ) );\n            String city = wxs.", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring queryString = \"from Continent c where c.Name = 'Europe'\";\n\t\t\t\tint resultCount = s.CreateQuery(queryString).List<Continent>().Count;\n\t\t\t\tAssert.AreEqual(1, resultCount);\n\t", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crc_it_table[((uiCRCITTSum & 0xFF00) >> 8) ^ uiByteValue];\n            }\n            return (ushort)uiCRC", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn hasSpeedModule() ? 10 : 2;\n\t}\n\t/**\n\t * @return The position below the sentry that is checked for blocks that affect movement\n\t */\n\tprivate BlockPos getBlockPosBelow() {\n\t\treturn position().below();", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = new IHyperlinkDetector[] {\n                new JavaHyperlinkDetector(editor),\n                new CeylonHyperlinkDetector(editor, controller", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "# Here you can add the Object3DAspect and Object3DScale widgets\n# to the layout.\n# self.l.addWidget(Object3DAspect(self))\n# self.l.addWidget(Object3DScale(self))\n        self.l.add", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\tint x, y;\n\t\t\t\t\t\tif ( info.GetInt( 0 ) == -1 || info.GetInt( 1 ) == -1 )\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        String label = selectConverter.convert(valueChoice);\n                        if (Strings.equalsIgnoreCase(label, value.toString()))\n                        {\n                           chosenObj = valueChoice;\n                          ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \"+k+\"\\t\"+totalWithAmount[i][j][k]+\"\\t\"+fractionWithAmount[i][j", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\tpublic void AddParameterInspector (IParameterInspector inspector)\n\t\t{\n\t\t\tinspector.ApplyDispatchBehavior (", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager, ownerId, mode, ownerGroupId);\n        final Subject subject = EasyMock.createMock(Subject.class);\n        expect(subject.hasDbaRole()).andReturn(false);\n        expect(subject", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn new Vector3 (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint(XDRUnion):\n    __slots__ = ['key', 'value']\n    key = XDRTypedef('endpoint_key')\n    value = XDRTypedef('endpoint_value')\n    @classmethod\n    def pack_key(cls, packer, key", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    Console.WriteLine(\"Client \" + i + \" disconnected\");\n\t\t\t\t    RemoveClient(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// sends a message to a single", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == Portal.RequestType.Step) {\n                List<StepBucket> stepBuckets = convertToStepBucketList(list);\n                notifyStepsReceived(FitnessLibraryListener.ExecutionStatus.Success, requestId, stepBuckets);\n            } else", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " # Generate the single use helper function\n  GenerateHelperFunction('NewSingle', bind_count, exec_count, is_method=True)\n\n# Generate the code for the callback classes.\nGenerateBase(0)\nGenerateBase(1)\nGenerateBase(2)\nGenerateBase(", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\"\"\"\nresponse = HttpResponse(mimetype='application/json')\nresponse['Content-Disposition'] = (\n    'attachment; filename=\"{0}.json\"'.format(filename)\n)\njson_data = []\nfor item in items:\n    json_data.append(", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(new ServiceNode(\n                        new ConstantNode(TermId.mockTermId(0,\n                                Vocabulary.SEARCH)), service", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n    def dispatch(self, request, *args, **kwargs):\n        self.object = None\n        try:\n            self.object = self.get_object(queryset=self.model.objects.filter(pk=kwargs[\"pk\"]))\n            if not self.object:", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // Start the iterative process\n            _iterator.Initialize(matrix, _preconditioner, r, d, uodd, ueven, v);\n            double residual = double.MaxValue;\n            int iterations = 0;\n            while (!_hasBeenStopped && resid", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           if reference_set_map[v] != -1:\n                A[reference_set_map[focal], reference_set_map[v]] += 1\n                L[reference_set_map[focal]] += 1\n                sample_count[reference", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "   def test_items(self):\n        \"\"\"Test whether items are correctly loaded to the raw index\"\"\"\n        result = self._test_items()\n        self.assertEqual(len(result['items']), len(self.items))\n        self.assertTrue(len(result['raw']) >", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam && orderManager.LobbyInfo.ClientInSlot(slot.Key) != null)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tif (", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" [\" + _rootCause.ToString() + \"]\";\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "# TODO(roasbeef): Implement DataFrame.\nclass DataFrame(Frame):\n    \"\"\"\n    A DataFrame is a frame that contains application data.\n    \"\"\"\n    def __init__(self, stream_id, data, flags=None):\n        super().__init__(stream", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "#endif\n        }\n    }\n}", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos (m_maxSlopeRadians);\n}\nvoid btCharacterController::setMaxSlope(float slopeDegrees)\n{\n\tsetMaxSlope (btDeg2Rad (slopeDegrees));\n}\nvoid", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            if (initializer != null && canLeak(initializer)) {\n                checker.report(checker.typeLeaked(initializer, node), node);\n            }\n        }\n        return super.visitNew", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tN", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t\t_type = typeAttribute.Value;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the methods associated to this comment item.\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Width = 100;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(annotationType).when(lookup).lookup(Matchers.eq(Type.class), Matchers.eq(FQN));\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(Collections.singleton(instrumenter", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postdominatorsSet != other.postdominatorsSet)\n\t\t\treturn false;\n\t\tif (this.pathSensitive != other.pathSensitive)\n\t\t\treturn false;\n\t\tif (this.pathSensitiveCallGraph != other.", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[start][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowR) { // can this left constituent reach this right constituent?\n              continue;\n            }", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               'rsync', '--archive', '--compress', '--delete', '--exclude=*.pg_xlog',\n                '--exclude=*.pg_wal', '--exclude=pg_hack', '--exclude=pg_stat',\n               ", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.RuntimesChanged -= DbgProcess_RuntimesChanged;\n\t\t\tprocess.DelayedIs", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "writer.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a color value to the XML document.\n\t *\n\t * @param   color  Color value to write.\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tfinal Contact that = (Contact)aThat;\n\t\treturn ( (", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if total_rej > 10:\n      print('Simulation stopped due to too many rejections')\n      sys.exit()\n\nThe code is a multi-body simulation written in Python. It uses the Lubrication solver from the Lubrication library to calculate the forces between", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       idx, = cdata\n        if idx is not None:\n            # If the index is a constant, check if it is a slice\n            if isinstance(idx, (list, tuple, Variable)):\n                # If the slice is equivalent to the full shape,\n                # then", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "=====================\n\ndef add_community_admin(request, community_slug):\n    \"\"\"Adds a user to the community admin group.\"\"\"\n    community = get_object_or_404(Community, slug=community_slug)\n    user = request.user", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "```python\nreturn query\n```\nPlease complete the code for the `QueryEvents` class by implementing the `after_compile` event and the `before_execute` event. The `after_compile` event should receive the `Query` object and the `Session` object as arguments, while the", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "# Register the descriptor class with the system.\nConditionalDescriptor = ConditionalDescriptor()\nsystem = edx_system.EdxContentHostSystem()\nsystem.register_module_descriptor(ConditionalDescriptor)\n# Create a new module descriptor from xml.\nmodule_xml = etree.from", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "=====================\n\nThe code seems to be incomplete and missing some context. Here's a possible completion based on the given code:\n\n```python\n# ...\n\nNext line of code:\n=====================\n\ndef translate_changes(self, data_model_changes):\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && (Method == null && Field == null && Sig == null))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (Method != null && (Class == null || Sig != null))\n\t\t\t{", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description:\";\n\t\t\t//\n", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.getNoPrefix(\"mail/syncmail.5\")\n        self.assertEqual(c.branch, \"trunk\")\n        self.assertEqual(set(c.files), set([\"buildbot/buildmaster.py\"]))\n        self.assertEqual(c.comments,", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> datum : csvData.entrySet())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isActive()) {\n\t\t\taddMana(getValueForActiveGeneration());\n\t\t\tif(acceptsRedstone()) {\n\t\t\t\tredstoneSignal = 15;\n\t\t\t\tworld.playSound(player, pos, BotaniaSoundEvents", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component);\n        }\n        this.memorizeCohesion(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void memorizeCohesion(Community c,", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if __name__ == \"__main__\":\n    do_upgrade()", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.Close();\n\t\t\tcomputerMgmt.Dispose();\n\t\t\tcomputerMgmt=null;\n\t\t\t\n\t\t\tprocessMgmt.Close();\n\t\t\tprocessMgmt.Dispose();\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Gets an occurrence of the specified event, starting at the specified", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Bind( DataSource.Component, SourceEventName );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAnd", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ObjectMapper mapper = new ObjectMapper();\n            SpanConfigBean spanConfigBean = mapper.readValue(jsonData, SpanConfigBean.class);\n            ISpanService spanService = (ISpanService) ServiceHelper.getService(ISpanService.class);\n            SpanConfigBean", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImageHelper(1000001, \"/ims/images/alert.gif\", new Integer(1", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   def make_assertion(self,\n                      subject,\n                      predicate,\n                      object,\n                      project_uuid,\n                      assertion_type,\n                      assertion_label,\n                      assertion_description):\n        \"\"\"\n        Make an assert", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktfit= \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells= \")\n                .Append(StringUtil.ToHexString", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katana\n\t\t\t\tbytes[posn++] = (byte) (ch - 0x30);\n\t\t\t\tbytes[posn++] = (byte) (value >> 8);\n\t\t\t\tbytes[posn++] =", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\ndef tricore_ld(obj, off2, off3, off1, b):\n    src = env.P[b]\n    addr = off1 + off2 + off3\n    obj.operands = [src, addr]\n    obj.type = \"ld\"", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tpropertiesMap.setProperties(properties);\n\t\t\treturn", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n         *", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd = new CommonSecurityDescriptor (false, false, null, null, null, null, null);\n\t\t\tAssert.IsFalse (csd.DiscretionaryAclPresent);\n\t\t\tAssert.IsFalse (csd.SystemAclPresent);\n\t", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "# Here you can add your code to process the results.\n# For example, you can use the results to update the tags of the songs.\n# You can also use the results to display a dialog to the user.\n# The results are stored in the 'releases' dictionary, where the key", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       // add all RPCs from all scripts in the project\n        foreach (Type t in AppDomain.CurrentDomain.GetAssemblies())\n        {\n            foreach (Type scriptType in t.GetTypes())\n            {\n                if (scriptType.IsSubclassOf(typeof", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       if (Config.getBoolean(\"show_message_icons\", true)) {\n            // TODO: 11/11/2016 Add icons here\n        }\n        return rootLayout;\n    }\n    @Override\n    public void onCreateOptionsMenu(@NonNull Menu", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "       # Transform wave function\n        psit_G = self.symmetry.transform(psit_G, s)\n        if time_reversal:\n            psit_G = psit_G.conj()\n        return psit_G\n\n# vim:", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateNewDraftRequest utkastRequest = buildCreateNewDraftRequest(\"intygType\", \"patientPersonnummer\", \"intygTypeVersion\", \"intygTypeName\", \"intygTypeDescription\", \"intygTypeStatus\", \"intygTypeStatusMessage\", \"intygTypeStatus", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILBlock) {\n\t\t\t\t\t\tILBlock childBlock = child as ILBlock;\n\t\t\t\t\t\tif (prevChildAsBB != null) {\n", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //if we're not a ragdoll then set us to be one\n\t    if (!IsRagdoll) {\n\t\t//set the body to be a ragdoll", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class StratumLayer(GeoLayer):\nWhat should be the next class after FractureLayer?\nThe next class after FractureLayer should be the StratumLayer class. The StratumLayer class is similar to the GeoLayer class, but it is used to represent stratig", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte) ((num >>> 24) & 0xff);\n        out[outOff + 2] = (byte) ((num >>> 16) & 0xff);\n        out[outOff + 1] = (byte", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source );\n            this.objectVariables = objectVariables;\n        }\n        private Map<String, PatternNode> objectVariables;\n        @Override\n        protected Iterator<PatternMatch> createIterator()\n        {\n            return new Iterator<PatternMatch>()\n            {\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_xml_to_json(xml_string, validate = True):\n    \"\"\"Transform an XML string to a JSON object.\n\n    :param xml_string: The XML string to transform.\n    :param validate: If True, validate the XML string before transforming it.\n   ", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           frame.setSelected(true);\n            frame.toFront();\n          }\n        }\n      });\n      frame.addInternalFrameListener(new InternalFrameAdapter() {\n        public void internalFrameClosed(InternalFrameEvent e) {\n          if (buttons.containsKey(btn", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "# Define the functions that will be called on the server side\n# These functions should be defined in the server code\n# and should return the result of the function call\n# as a numpy structure or a list of numpy structures\n# The function names should match the names used above\n# e.g. rand", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0; x < p.getRasterWidth(); x++)\n      {\n        double z = p.getRasterValue(x, y);\n", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   ContentValues cv = new ContentValues();\n                    cv.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.ID_GROUP + \" = \" + deleteId,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n        public IntPtr Pointer\n        {\n            get {", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tif (queue[0].RemainingCost > 0)\n\t\t\t\t\tplayer.GiveCash(queue[0].RemainingCost", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    infoText += \" file\" if numberOfFiles==1 else \"files\"\n    infoText += \"<br>\"\n\n    if numberOfHiddenFiles>0:\n        infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n        infoText += \"file", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(r'@\\1@', code)\n        # replace the variables\n        for x in self.env.get_vars():\n            code = code.replace('%' + x, self.env[x])\n        # write the result\n", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "if __name__ == '__main__':\n    rospy.init_node('parsing_server')\n    planning_server = PlanningServer()\n    rospy.spin()\n    rospy.loginfo(\"Shutting down ...\")\n    rospy.", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent - 1 ] + chemical[ 0 ][ idx + reactorExtent ], dt );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tif (qs.Execute())\n\t\t\t{\n\t\t\t\tif (qs.NextResult())\n\t\t\t\t{\n\t\t\t\t\tif (qs.Read())\n\t\t\t\t\t{\n\t\t\t\t\t\tentity.cti_id", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic int PropertyCount\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic string[] PropertyNames\n\t\t{\n\t\t\tget { throw new Not", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "# Define the argument specification\nargument_spec = ce_argument_spec()\nargument_spec.update(dict(\n    key_id=dict(type='int', required=True),\n    password=dict(no_log=True),\n    trusted=dict(type='bool'),", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           component = self.store.get_item(component.location)\n            component.edited_by = editing_user\n            self.store.save(component)\n            self.store.update_ancestors_edit_info(component.location, editing_user)\n            self", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        updateWith(new String(ch, start, length));\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n        digest.update((byte", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "#def mkrange(data):\n#    record = unpack(data, 'llll')\n#    start, end, step, count = record\n#    return aetypes.Range(start, end, step, count)\n#\n#def mkcomparison(data):\n#", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = api.ActionDescriptor.GetParameters()[0].ParameterType;\n            formatters = api.ActionDescriptor.GetParameters()[0].ParameterType.GetCustomAttributes<MediaTypeFormatterAttribute>().Select(a => a.FormatterFactory).Select(f => f.CreateMediaTypeFormatter", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "       elif event.keyval == gtk.keys.KP_Enter:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_qu", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(\"locations\", newLocationList);\n        }\n        return beanProperties;\n    }\n    /**\n     * The order of this post processor.\n     */\n    public int getOrder()\n    {\n        return Ordered.LOWEST_PRE", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           lines = f.readlines()\n        finally:\n            f.close()\n    if lines:\n        for line in lines:\n            if len(line.strip()) == 0:\n                module.fail_json(msg=\"Password file contains blank lines\")\n    if state", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "       [In, MarshalAs(UnmanagedType.Interface)] IntPtr pUnkEvent\n            );\n        [PreserveSig]\n        int QueueEventParamUnkVar(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.Interface)]", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureWriteAccess( directedAclKeys.getAclKey() );\n        spm.addPrincipalToPrincipal( directedAclKeys );\n        return null;\n    }\n}", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag matches what is expected.\n        Arguments:\n        element Element object.\n        Returns:", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "=====================\n\nif node.nodeType == Node.ENTITY_REFERENCE_NODE:\n    clone = newDocument.createEntityReference(node.nodeName)\n    if node.publicId:\n        clone.publicId = node.publicId\n    if node.systemId", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostics, context);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\n\t/**\n\t*\n\t*", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(endOffset) == TlvType.NAME) {\n\t\t\t\tkeyLocator.setKeyName(new Name(decoder.readBlob(endOffset)));\n\t\t\t\tdecoder.advance(decoder.getLength", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update();\n        }\n        \n        //Updates the minimap\n        display.update(myPlayer, ennemies, players);\n        \n", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().addJoin( action );\n        hide();\n      }\n    } );\n    m_btnOk.setEnabled( false );\n    hcenter();\n    m_btnOk.setStyleName( \"button", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "# Raise an error if the response is not 200 OK\nif r.status != 200:\n    err = json.loads(r.data.decode(\"utf-8\"))\n    if \"status\" in err and err[\"status\"] is False:\n        msgs", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.GetMergedOrderResponse.Order;\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception e", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _find_carbon_sources(model: \"Model\") -> List[\"Reaction\"]:\n    \"\"\"Find carbon sources in the model.\n    Parameters\n    ----------\n    model : cobra.Model\n        The model to search for carbon sources.\n    Returns\n    -------\n    list", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "class Unit(CachedTreeItem, base.TranslationUnit, models.Model):\n    \"\"\"A unit of translation, with a source and a target string.\n    \"\"\"\n    #: The source string.\n    source = models.CharField(max_length=settings.MAX_STRING_LENGTH", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        migrations.AddField(\n            model_name='city',\n            name='state',\n            field=models.ForeignKey(to='events.State'),\n        ),\n\n        migrations.AddField(\n            model_name='academic',\n            name='city',\n", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "# start the controller\npox.openflow.libopenflow.ofp.ofp_init_messaging()\npox.openflow.libopenflow.ofp.ofp_register_stats_sink(stats_sink)\npox.openflow.lib", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges) {\n      return;\n    }\n\n    if (m_RecentItems.size() >= m_MaxCount) {\n      m_RecentItems.remove(m_RecentItems.size() - 1);\n    }\n\n   ", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.FightMode == FightMode.Aggressor || src.FightMode == FightMode.PassiveDefensive || src.FightMode == FightMode.PassiveAggressive)\n                return true;\n            return false;\n        }\n    }", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null) {\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        }\n        return half", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompSyncSets(Node p, BitArray set) {\n\t\tif (p == null) return;\n\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWrite(buff);\n\t\t\tif(mReadDone.WaitOne(1000))\n\t\t\t\treturn mReadDone.Data;\n\t\t\telse\n\t\t\t\tthrow new TimeoutException(\"Read timed out\");\n\t\t}\n\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = (order == SortOrder.DESCENDING) ? -1 : 1;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (int j = N1 + N2 + 1; i < N_INDEXES; i++, k += 4)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n        }\n    }\n}\n//", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "# class ComputeRateCollection(BaseCollection):\n#     def create(self, description, currency=None, fields=None):\n#         rate = self.instantiate(description, currency, fields)\n#         rate.create()\n#         return rate\n#         # TODO: Add", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.WriteData( offset, length, src, discardWholeBuffer );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tOpenGL.BindBuffer( All", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.scan_sat = buildTerTransponder(self.scan_sat, self.scan_satselection, self.scan_satselection_index, self.scan_satselection_count, self.scan_satselection_total, self.scan_satselection_index,", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                String[] filters = filterStr.split(\",\");\n                for (String filter : filters) {\n                    String[] parts = filter.split(\":\");\n                    if (parts.length != 2) {\n                        throw new IllegalArgumentException(\"Invalid filter \"", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytesPerRow);\n", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'org.freedesktop.DBus.Properties',\n                                 'PropertiesChanged')\n        self.assertEqual(s.get_interface(),\n                         'org.freedesktop.DBus.Properties')\n", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def __call__(self, x):\n        \"\"\"\n        This method is called when the MASSIVE object is called as a function.\n        It computes the Massey product of the given element with respect to\n        the given degree and the given position.\n        \"\"\"\n        self", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           AssertParseError(\n                \"1:1: Unexpected end of input.\",\n                \"\");\n        }\n    }\n}", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Iterator it = m.entrySet().iterator();\n\t\t\twhile ( it.has", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Closes the log file\n\t\t/// </summary>\n\t\tpublic static void Close", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\nclass HrAttendanceAction(models.Model):\n    _inherit = 'hr.attendance.action'\n\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns the new attendance record.\n        \"\"\"\n        self.ensure_", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults.getRows().get(form.grdResults.getRows().size() - 1);\n\t\tif (parentRow == null)\n\t\t\tparentRow = form.grdResults.getRows().newRow();", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// Selects this item.\n       ", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       terminal = maker.new_terminal(self, cwd, profile, debugtab=debugtab)\n        self.add_terminal(terminal)\n        self.show_all()\n        self.terminal_activated(terminal)\n        self.terminal_focus", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructFieldInfo( name, managedType, marshalType, marshalSize, marshalOffset, marshalName, marshalCustomMarshalerType, isByRef ) );\n                }\n            }\n            return toReturn;\n        }\n    }", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base.IsValueType || (base_type != null && base_type.IsValueType);\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsByRef {\n\t\t\tget { return base.IsByRef || (base_type != null", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.Context(\n        _openssl_version_for_sslcontext(protocol),\n        self._create_verify_callback(),\n    )\n    self.context.set_options(OpenSSL.SSL.OP_NO_SSLv2 |", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label1 = new Label ();\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Text = \"Label\";\n\t\t\tthis.hbox3.PackStart (this.label1, false, false, 0);", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "# The following code is not part of the given code snippet, but it is needed\n# to make the code runnable.\n\n# The following code is not part of the given code snippet, but it is needed\n# to make the code runnable.\n\n# The following code", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Close-all-tabs\": QKeySequence(Qt.CTRL + Qt.Key_W),\n    \"Close-all-tabs-except-current\":", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [name=\" + this.persistenceUnitName + \", providerClass=\"\n\t\t\t\t+ this.persistenceProviderClassName + \", transactionType=\" + this.transactionType\n\t\t\t\t+ \", dataSource=\" + this.jtaDataSource + \", mappingFiles=\"", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   IEditorInput editorInput = getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFileEditorInput fileEditorInput = (IFileEditorInput)editorInput;\n      return fileEditorInput.exists() && !fileEditorInput.isSaveNeeded", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(728, 12);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(75", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}\n\n// The following code is missing, it should be added to the end of the file\n\n// This method is", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"RFC4231_TC1_Normal\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC1_Normal ()\n\t\t{\n\t\t\tbyte[] key = {", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(EnumSwitcher.option_1) {\n\t        case option_1:\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_sum += 4;\n\t            break;\n\t        case option", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      String jdk = java.GetValue(\"InstallPath\").ToString();\n      return jdk;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome != null)\n        return javaHome", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   comment = l\n    if comment == name:\n        return [comment, l]\n\ndef _read_user_crontab(user):\n    \"\"\"\n    Read the user's crontab file.\n    \"\"\"\n    cmd = \"crontab -l -u %", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Add your modifiers here\nmodifiers = [\n    MeshModifier,\n    ArmatureModifier,\n    SubdivisionModifier,\n    LatticeModifier,\n    MeshDeformModifier,\n    MeshBevelModifier,\n    MeshSmoothModifier,\n    M", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           double[] likelihoods = new double[totalBuckets];\n            for (int i = 0; i < totalBuckets; ++i) {\n                double rank = mScoreRankBuckets.get(i);\n                double count = rankCounts[pept", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n       ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\nif __name__ == \"__main__\":\n    p = Pydump()\n    args = p.arguments()\n    if args:\n        p.main(args)\n    else:\n        print(\"Usage: python pydump.py [options]\")\n        sys.exit", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;\n            this.rptComboBox.FormattingEnabled = true;\n            this.rptComboBox.Location = new System.Drawing.Point(91, 1", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'ordering': \"['-created']\"},\n            'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),\n            'document': ('main.Document', [], {'related_name': \"'scans'\", '", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // If the type is not defined in the schema, and we're not processing imports,\n                // then we'll throw an error.\n                if (!isImporting()) {\n                    throw SDOHelper.createTypeNotFoundException(targetNamespace, sdoTypeName);", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_refuse(self, cr, uid, ids, context=None):\n        self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets the <see cref=\"IBOColSelector\"/>'s <see cref=\"IBOColSelector.ControlEnabled\"/> property\n        /// </summary>\n        bool IBOColSelector.IsEnabled", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"{0} ({1}) {2} ({3})\", this.Name, this.ShortName, this.TargetName, this.TypeDescription);\n        }\n    }\n}\n// End of code\nThe code seems to be incomplete, as the next line", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(valueObject.getCareContext().getID(), CareContext.class);\n\t\t}\n\t\tdomainFactory.setDomainObject(valueObject.getID(), valueObject);\n\t\tdomainFactory.setDomainObject(valueObject", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\"],\n            cwd=self.get_project_dir(),\n            env=env,\n            args=opts,\n            stdout=sys.stdout,\n            stderr=sys.stderr,\n            verbose=verbose)\n        if status:\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0, 0, 0 }, true), this.getScore(new double[] { 0, n, 0, 0 }, false));", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash, gitItemStatuses);\n            }\n            Loading.IsLoading = false;\n            Stashed.Update();\n            Stashes.Update();\n            Stashes.Enabled = true;\n            refreshToolStripButton.Enabled", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "# print out the addresses of the beam monitors:\nst_ARCH_TYPE arch = st.get_architecture()\nif arch.is_cuda():\n    for i in range(bm0_index, bm1_index + 1):\n        st_AssignAddressItem", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) > 0;\n    }\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(\"AddInt\", asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += PanelDatenDto.TAB;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "# Load the archive index\narchive_index = load_archive_index(args.index_file)\n# Call the appropriate function based on the command\nargs.func(archive_index, args)\n# Save the archive index\narchive_index.save()\nif __name__ == '__", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.mosi_bits = self.parse_bits(mosi)\n        self.miso_bits = self.parse_bits(miso)\n        self.ss, self.es = ss, es\n        self.samplenum += 1\n        # TODO: Handle", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         cursor = limit - v3;\n          if (cursor > limit) {\n            cursor = limit;\n          }\n          limit = cursor;\n          if (limit <= bra) {\n            break lab0;\n          }\n          cursor = bra;\n          // call R1\n         ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.newInstance();\n                if (cd == null) {\n                    cd = new ChannelData(channel, cls, fingerprint, msg_size);\n                    channelMap.put(channel, cd);\n                    channelList.add(cd);\n                   ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_key_usage(self):\n        try:\n            extension = self.cert.get_extension(X509.X509_EXTENSION_KEY_USAGE)\n            return extension.get_data().get_value()\n        except:\n", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (i != _slots.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\"\"\", file=f)\n    if v:\n        print(\"\\t\\t\\t%s();\" % (An[", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "# The following code is a simple test case. It is not part of the code to be\n# transformed. It is just a simple test case.\nif __name__ == \"__main__\":\n    sm = \"\"\"\n    state S0:\n        on 0x0000: goto", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = t.pos; int col = t.col;\n\t\t\twhile (StartOf(1)) {\n\t\t\t\tif (StartOf(12)) {\n\t\t\t\t\tGet();\n\t\t\t\t} else {\n\t\t\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n#\n#     This is a part of OpenERP sale module.\n#     Please check the licensing terms for use, red", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"s\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\",", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testVirtualPermissionService_getPermissions() throws Exception\n    {", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# Here you can add your test cases for the Enumerator class\n# or any other class you want to test.\n# For example:\n#\n# class TestEnumerator(object):\n#     def test_enumerate(self, context):\n#         enumerator = context.enumerate()\n", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "# Initialize device\ndevice = Device(deviceToken)\n# Initialize user\nuser = user.newUser(loginId, password)\n# Login\nuser.login()\n# Check inspection\ninspection = device.check_inspection()\nprint(inspection)\n# Notification\ndevice.", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# Parse the command line arguments.\nargs = docopt(__doc__)\n# Set up the observatory.\nobserver = ephem.Observer()\nobserver.date = date.today()\nobserver.lon = \"-27.4328\"\nobserver.lat =", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = 0x1011 + (int)(Keys.Count * 0x10);\n        }\n        private class InternalTarget : Target\n        {\n            private KeyRing m_Owner;\n            public InternalTarget(KeyRing owner)\n                :", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iter = devices.iterator(); iter.hasNext();){\n            String deviceName = iter.next();\n            String ipAddress = ipAddressMap.get(deviceName);\n            int model = liveModelMap.get(deviceName);\n            Tuner tuner", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATIONS) {\n      jobs.put(Version.USER_NOTIFICATIONS, new UserNotificationsMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAYDREAM_MIGRATION) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length < 3) {\n        throw new PatternSyntaxException(\"Invalid line \" + lineCount + \" in mapping file: \" + line, 0);\n      }\n      List<Pattern> regex = new ArrayList<>();\n      String regexString = split[0];\n     ", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       for p in path:\n            if os.path.isfile(os.path.join(p, n)):\n                return os.path.join(p, n)\n            # try the sub-path\n            if sub_path:\n                for p in path:\n", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "# Mapnik 3.x compatibility\nif sys.version_info[0] < 3:\n    from mapnik import *\nelse:\n    from mapnik import (\n        Coord,\n        Box2d,\n        Envelope,\n        Point,\n        MergeMode,", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "# Initialize the Ansible module\nmodule = AnsibleModule(\n    argument_spec=f5_argument_spec(),\n    supports_check_mode=True,\n)\n# Set the default values\nparams = Parameters()\nparams.update(\n    dict(\n        name=", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "=====================\nclass MethodAddView(MethodAddView):\n    @NavigateTo(MethodAddView, 'Add Method')\n    class add_method(NavigateToStep):\n        locator = NavigateTo(MethodAddView, 'Add Method')\n\n    @NavigateTo", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"ActionFactory: getActionObject: \"\n                    + \"Action class not found: \" + className);\n        }\n        return result;\n    }\n    public void executeAction(String actionName, Object[] args) throws Exception {\n        IAction action = getAction", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "=====================\n\nclass CreateThreadViewTest(TestCase):\n    \"\"\"Tests for the create thread view.\"\"\"\n\n    def setUp(self):\n        self.client = Client()\n        self.course_key = SluggedCourseKey(\"test_course\")\n        self.course", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "# if not msvc.exists(manifestSrc):\n#     return 0\n# else:\n#     return embedManifestDllAction(target, source, env)\n#\n# This is the action run to embed the manifest in a DLL.\nembedManifestDllAction =", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           ISchedulingRule schedulingRule = getSchedulingRule();\n            Job job = new WorkspaceModifyJob(getOperationMessage(), schedulingRule) {\n                @Override\n                protected IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException, InvocationTargetException", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Allocate output row meta\n\t\tdata.outputRowMeta = new RowMeta();\n\t\t\n\t\treturn super.init(smi, sdi);\n\t}\n}", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "```python\n# both `since` and `until` are optional\ndef parse_time_range(string):\n    \"\"\"\n    Parse a time range string, e.g. \"2014-01-31 12:34:56\" or \"2", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           int count = Utility.ToInt32(snpccount);\n            int fakecount = 0;\n            if (sfakecountA != null)\n                fakecount += Utility.ToInt32(sfakecountA);\n            if (sfakecountB !=", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def test_suspend_mem(test, params):\n    \"\"\"\n    Test suspend to memory.\n    \"\"\"\n    gs = GuestSuspend(test, params)\n    gs.setup_bg_program(suspend_bg_program_setup_cmd=\"python /tmp/suspend", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       service.submit(pub);\n        service.awaitTermination(30, TimeUnit.SECONDS);\n        int received = rc.get();\n        System.out.printf(\"Received %d messages%n\", received);\n        service.shutdown();\n    }\n}\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tuint compressedSize = 0;\n\t\t\tif (value <= 0x7F)\n\t\t\t\tcompressedSize = 1;\n\t\t\telse if (value <= 0x3FFF)\n\t\t\t\tcompressedSize = 2", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.run_command('extract', args=[one_file.path, '.', au_flags])\n        self.fm.run_command('refresh', args=[cwd.path])\n        self.fm.run_command('cd', args=[cwd.path])\n", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringString_ConstructorFlag ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (typeof (COMTest), new string[] { \"MonoTests.System.ActivatorTestInternal.COMTest, \" +", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "   def testOneOldAndOtherNew(self):\n        da = Locale.objects.get(code='da')\n        de = Locale.objects.get(code='de')\n        repo_da = self._setup_repo(da)\n        repo_de = self._setup", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Logging.info(\"Userstate update for user %s: %s\", userstate.session, userstate)\n            self.send_message(mumble_pb2.MUMBLE_USERSTATE, userstate)\n            cmd.response = True\n            self.commands", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.setLeader(player);\n        }\n    }\n    public static PlayerGroup getGroup(int teamId) {\n        return groups.get(teamId);\n    }", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\ndef test_vltable():\n    \"\"\"\n    test vltable\n    \"\"\"\n    logger.debug(\"test_vltable\")\n    # create a table\n    table = vltable()\n    # add some rows\n    table.addrow(\n        [\n           ", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "   def test_update_cell_based_on_data_updates_cell_when_row_has_no_children(self):\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t}\n\twhile (parent instanceof Grid);\n\t((Grid) parent).addColumn(column);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               Image = new CreatureImage(this);\n            } catch (Exception ex) {\n                throw new Exception(\"Error loading creature \" + Convert.ToString(GUID) + \":\\n\" + ex.Message);\n            }\n        }\n        private void ParseStatus(InventoryEntry", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\telse if ( m_Peerless == PeerlessList.MelisandeTrammel || m_Peerless == PeerlessList.MelisandeFelucca )\n\t\t\t\t\t\tm_key[i] = new MelisandeActiv", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version(1, new int[]{3, 3, 3, 3}, new ECBlock(1, 1, 1), new ECBlock(1, 1, 1), new ECBlock(1, 1, 1)),\nVersion(2, new int[]{3,", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = kdf.Derive(p, pbMsg, pbSalt, pbSecret, p);\n\t\t\tif(!Arrays.Equals(pb, pbExpected))\n\t\t\t\tthrow new Exception(\"Test failed\");\n#else\n\t\t\tbyte[] pb", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to increase the amount of mana", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Add your custom middleware classes here.\n#MIDDLEWARE_CLASSES += (\n#    'path.to.your.middleware.class.Name',\n#)\n# Add your custom template tags here.\n#TEMPLATES = [\n#    {", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if (!this.actionTrace", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = PhoneNumberUtils.parse(p.readString(), null);\n            voiceSettings = p.readInt();\n            dc.callType = voiceSettings & RIL_CALL_TYPE_MASK;\n            dc.dataCallId = voiceSettings >> RIL_CALL_TYPE", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(x + leftBottomCorner.x, y + leftBottomCorner.", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_METHOD_ADD, testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = ((Integer) rawResult).intValue();\n\t\t\t\t\n\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void addC", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in.", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                       16 + (~stactics_display[i] & 0x0f),\n                        16,\n                        pixel,\n                        Machine.visible_area,\n                        Machine.drv.gfxdecodeinfo[0].transpen,\n                        1\n              ", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(position) <= spell.Width)\n                                {\n                                    result.Add(target);\n                                    break;\n                                }\n                            }\n                            break;\n                        case CollisionObjectType.Wall:\n                            var wall", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       return existsInducingPath(graph, x, y, new HashSet<>());\n    }\n    public static boolean existsInducingPath(Graph graph, Node x, Node y, Set<Node> visited) {\n        if (x.equals(y)) {\n            return true", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (pop[i] is Drawable)\n                        plcs.Push(pop[i] as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Initialize the element.\n        /// </summary>\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentFile == null && other.attachmentFile != null) {\n            return false;\n        }\n        if (this.attachmentFile != null && other.attachmentFile == null) {\n            return false;\n        }\n        if (!this.attachmentFile.equals(", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] != m_From && SpellHelper.CheckToxic(from, mobiles[i]))\n                            AOS.Damage(mobiles[i], from, m_Item.GetDamage(), 0, 100, 0", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.OrderByDescending(kv => kv.Value.Time).First().Value.Dis", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<ComponentInst> getComponents(String sComponentId, String sUserId) {\n    return mock.getComponents(sComponentId, sUserId);\n ", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog10 = ZipDialog.newInstance(files);\n                    mode.finish();\n                    dialog10.show(", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       if (this.channel != null && this.channel.isOpen()) {\n            this.channel.close();\n        }\n    }\n    public void close(ChatMessage chatmessage) {\n        this.a();\n        if (this.m != null) {\n            this.", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               z_arr[p_index, kk, :] = z_dict[z_key][per][:]\n                z_err_arr[p_index, kk, :] = z_dict[z_key][per][3:]\n            for t", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    String names = \"\";\n    for (Recipient recipient : recipients) {\n      names += recipient.toShortString() + \", \";\n    }\n    names = names.substring(0, names.length() -", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "       env[\"PATH\"] += os.pathsep.join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] += os.pathsep.join(extra_lib)\n        if self.config[\"tools\"][\"ccache\"]:\n            env", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "def load_manifest(tests_root, url):\n    logger = get_logger()\n    logger.info(\"Loading manifest from %s\", url)\n    with open(url) as f:\n        manifest_json = json.load(f)\n        manifest = Manifest.from", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.dispose();\n            compiledScript = null;\n        }\n    }\n    private Binding createBindingForCompilation() {\n        final Binding binding = new Binding();\n        binding.setVariable(\"node\", Node", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass TransformDataset(object):\n  \"\"\"\n  Transforms a dataset using a given Transformer.\n  \"\"\"\n  def __init__(self, dataset, transformer):\n    self.dataset = dataset\n    self.transformer = transformer\n\n  def __len__(self):", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo) obj;\n\t\tif (this.id == null && other.id != null)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif (this.", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n    @Test\n    public void shouldFindAllStacks() throws Exception {\n        updateAll();\n        final List<StackImpl> found = stackDao.searchStacks(null, Collections.", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION_REGEXP\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// If the pattern is a single node, then the candidate must be that node.\n\t\t\tif (pattern.IsLeaf)\n\t\t\t\treturn candidate.IsLeaf && candidate.Equals(pattern);\n\t\t\t// If the pattern is a list, then the", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "               if (colisionList.Any())\n                {\n                    extendedWillHit++;\n                    extendedFarmLocation = colisionList.First().Position;\n                }\n                }\n                int shortWillHit = MinionManager.Minions.Count(\n                ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t\t// Controls\n\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { this, new Integer(0), new Integer(0), new Integer(0), new Integer(0), new Integer", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "@task\n@timed\ndef install_python_prereqs():\n    \"\"\"\n    Install Python prerequisites.\n    \"\"\"\n    if no_python_prereqs():\n        print(\"Skipping Python prerequisites installation.\")\n        return\n    print(\"Installing", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': [(6, 0, [1, 2])]\n        })\n        f = Form(self.env['test_testing_utilities.parent'], view_mode='form', res_id=r.id)\n        with f.subs.edit", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x**2, (x, 0, 1))).change_index((x, 1, 0)) == Sum(x**2, (x, 1, 0))\n    assert simplify(Sum(x**2, (x,", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif (argc == 1) {\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l, 1, out a1);\n\t\t\t\tvar", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(action, changedItems, startingIndex);\n            }\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList new", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           String xml = writer.toString();\n            InputStream is = new ByteArrayInputStream(xml.getBytes());\n            XMLStreamReader xmlStreamReader = XMLInputFactory.newInstance().createXMLStreamReader(is);\n            XMLUnmarshaller unmarshaller = new XMLUnmarshaller(xmlStreamReader", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName = Token2Csv();\n                    break;\n                case Param.CampusStatus:\n                    c.CampusStatus", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  Planes: {0}\", ide.planes", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // adds the JSR instruction to the successor of the RET blocks\n                for (Edge e = l.successors; e != null; e = e.next) {\n                    if (e.target.status == Label.TARGET) {\n                        e.target.success", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectReference(ptr_of_this_method, __domain, __mStack);\n            instance = (UnityEngine.Ray", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.select(position.equals(Position.INSIDE) ? 0 : 1);\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\n\t\t\treturn comboLabelPosition.getSelectionIndex() == 0 ? Position.INSIDE", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self.get_image_value()\n        self.assertEqual(currImageValue, lastImageValue-1, \"Failed to decrement the image animator\")\n\n# Test that the Channel Animator can be set to a specific channel\ndef test_channel_animator_", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "=====================\n\nclass NullHostKey():\n    \"\"\"\n    A dummy host key for use when no host key has been specified.\n    \"\"\"\n    def __init__(self):\n        self.key = None\n        self.signature = None\n    def __str__(self):\n       ", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           FileSystemInterface fileSystem = handler.getFileSystem();\n            FSTree tree = fileSystem.getTree();\n            DefaultMutableTreeNode parentNode = null;\n            for (int i = 0; i < tree.getModel().getChildCount(tree.getModel().", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "               (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                if res:\n                    result = res[0]\n                return result or 0.0\n            def _get_work", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   mf = halo_mass_function(marr, zarr, cosmo)\n    #This is the line that needs to be completed\n    #The function halo_mass_function is defined in the file mass_function.py\n    #It returns the mass function for a given", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.height = font.getSize() + getSettings().getLineHeight();\n        return d;\n    }\n    @Override\n    public void setText(String text) {\n        super.setText(text);\n        setTextWidth();\n    }\n    @Override\n   ", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "#self.cal_dist()\n#self.cal_dist_all()\n#self.print_result()\n#self.print_path()\n#self.print_xyz()\n#self.print_xyz_all()\n#self.print_xyz_all_", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void SecuritiesButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "=====================\n        elif params[0]['bins'] is not None and \\\n             params[1]['bins'] is None and \\\n             params[2]['bins'] is None:\n            Object.__init__(self, name, title, params[0]['nbins'],\n                ", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterStorage rosterStorage = RosterHelper.getRosterStorage(protocol);\n            RosterHelper.updateLastMessage(rosterStorage, contact, query.getLastMessage());\n        }\n    }\n}\n\n// The code above is incomplete, and I would like you", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "       im1L = im1.convert(\"L\", rgb2I)\n        h1 = im1L.histogram()\n    else: \n        #im1.mode == \"L\":\n        h1 = im1.histogram()\n    #compute transform\n    if", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (tag.canDoIt()) {\n\t\t\t\tfinal IsoDep tech = tag.getTechList()[0];\n\t\t\t\tfinal byte[] aid = getApplicationAid();\n\t\t\t\tfinal IsoDep newTech = tech.getService", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "=====================\n\nclass ACEParser(Parser):\n    def __init__(self):\n        Parser.__init__(self)\n        self.current_size = 0\n        self.current_block = None\n        self.blocks = []\n        self.add_handler(\"marker", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter.removeCommListener(this);\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n        path = environ['PATH_INFO']\n        for prefix, app in self.apps:\n            if path.startswith(prefix):\n                return app(environ, start_response)\n        raise NotFoundError(path)\n# vim: set et sw=4 ts", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.reduce()\n\t\tmodel.savemodel( sys.argv[ 3 ] )\n\telse : print \"Usage : python %s <datafile> <outputmodel", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.RandomDouble() < (double)chance / 100.0)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n\nI'm trying to", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n        entries[entry_name] = rdltypes.UserDefinedEnum(\n            name=entry_name,\n            value=entry_value,\n            displayName=displayname,\n            description=desc\n        )\n        return type(type(self).__name__ + \"_", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Unable to find any modules to install.\");\n                    this.Close();\n                }\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (isConfigured())\n            {\n              ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(this.textureArray[textureHash] == null)\n                {\n                    this.textureArray[textureHash] = this.texture;\n                    this.texture", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "@login_required\n@add_p3p_header\n@handle_cors\ndef my_view(request):\n    \"\"\"\n    This is a sample view that does not require any special handling.\n    \"\"\"\n    # Your view code here\n    pass\n# This is a sample", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver driver = idlePool.Dequeue();\n                    if (now.Subtract(driver.IdleSince).TotalMinutes > settings.IdleTimeout)\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   return [var]\ndef _verify_list(var, name):\n    \"\"\"Ensure that list-like parameter is of the correct length.\n    Used to check that shape is of the correct length.\n    \"\"\"\n    if not isinstance(var, (list, tuple)):\n        raise", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the Quest\n# This line is needed to register the quest in the game.\n# It will be read by the game server at startup and is required for you to start the quest in-game.\n# Do not change this comment.\n# -----------------------------------------------------------------------------\n# Register the Quest", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60) % 60);\n\t\t\t\t\tempty = string.Format(\"{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           // Initialize the shader program\n            Program = GL.CreateProgram();\n            GL.DetachShader(Program, GL.CreateShader(ShaderType.VertexShader,\n                System.IO.File.ReadAllText(\"VertexShader.glsl\")));\n            GL.DetachShader(", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def add_metabolite(self, metabolite):\n        \"\"\"Add a metabolite to the model\"\"\"\n        self.metabolites.append(metabolite)\n        metabolite._model = self\n        self._metabolites[metabolite.id]", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(ims.clinical.admin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(TumourGroupListVo.buildFromBean(bean));\n\t\t}\n\t\treturn coll;\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent = lines[selectedLine];\n\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=selected.size()-1; i>=0; i--){\n\t\t\t\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       new LayoutAnimationController(set, 0.2f);\n        mListView.setLayoutAnimation(controller);\n    }\n\t\n\t/**\n\t * Fill the list with data.\n\t */\n\tprivate void fillData() {\n\t\tmListView.setEmptyView", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.SetFieldKey(HighestNumber + 1);\n        }\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(protein.getStructure()[i]) != Mappings.indexUnknown)\n\t\t\t{\n\t\t\t\tInstance instance = this.", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
