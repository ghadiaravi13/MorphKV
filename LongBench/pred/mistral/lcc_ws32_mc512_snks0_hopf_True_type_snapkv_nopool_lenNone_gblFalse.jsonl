{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t\tp.Players[j].Mobile.CloseG", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tself.graph = self.graph.copy()\n\t\t\tself.graph.remove_edge(e_u, e_v)\n\t\t\tself.graph.add_edge(e_v, e_u, **data.copy())\n\t\t\tself.", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "if __name__ == '__main__':\n    TestSndfile.__module__ = __name__\n    TestSndfile.main()\n\n# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4\n# EOF\n# This is the main part", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def _get_subtitle_language(self):\n        \"\"\"\n        Get the language of the subtitle.\n        \"\"\"\n        # TODO: Implement this method\n        pass\n\n\nThis is a Python class for a Video Page. It inherits from UnisubsPage and\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t\twriter.addAttribute(\"label\", styleValue.getLabel());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\nclass _AnswerData(_QAData):\n    def ask_string(self):\n        return self.answer\n    def hint_string(self):\n        return self.answer\nclass _AnswerDataWithHint(_AnswerData):\n    def __init__(self, answer,", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Target = new SR_TargetLocation(RuneAcc, mob);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebook(RuneAcc, mob);", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n *\n * This", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           try {\n                sp = new JESpace (name, path);\n                spaceRegistrar.put (name, sp);\n            } catch (Exception e) {\n                throw new SpaceError (e);\n            }\n        }\n        return sp;\n    }", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = new Point(0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpos = new Point(0, 0);\n\t\t\t\t\n\t\t\t\tif (item instanceof Alche", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "# Create a dispatcher\ndispatcher = SoapDispatcher()\n# Create a server\nserver = HTTPServer(('', 8000), WSGISOAPHandler)\n# Register the dispatcher\nserver.dispatcher = dispatcher\n# Start the server\nserver.serve_fore", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "   def lock_status(self, status_id):\n        self.statuses.append(status)\n        self.update()\n        self.show()\n        self.setFocus()\n        self.setWindowTitle(self.tr('Status: %1') % self.status.", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "def action_copy_from_sftp(request, response, controller):\n    status = \"success\"\n    try:\n        source_path = request.get(\"source_path\")\n        target_path = request.get(\"target_path\")\n        session_id = request.", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsNotNull (c);\n\t\t\tAssert.IsInstanceOf<ZoneIdentityPermission> (c);\n\t\t\tAssert.IsFalse (c.IsSubsetOf (a", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "# This is the main function that sets up the SSLContext and returns a socket\n# that can be used to connect to a remote server.\ndef create_ssl_context(keyfile, certfile, cafile, key_password, cert_password, ca_password, protocols=None):\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "       self.__tmp_file = os.path.join(self.__tmp_dir, 'datastream-%s.dat' % str(uuid.uuid4()))\n        self.__datastream_fd = os.open(self.__tmp_file, os.O_RDWR | os", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, 0);\n\t\t\t\t\t//TODO: change in database\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            Arg arg = args[i];\n            if (arg == null) {\n                continue;\n            }\n            String argName =", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}));\n\t\tprivate ConfigFile configFile;\n\t\tprivate String name;\n\t\tprivate ConfigFile getConfigFile()\n\t\t{\n\t\t\treturn configFile;\n\t\t}", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"Auto save\",\n\t\t\t\t\t\tget", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               if (m_Owner.Caster != null && m_Owner.Caster.Party != null)\n                {\n                    foreach (Mobile m in m_Owner.Caster.Party.Members)\n                    {\n                        if (m != m_Owner &&", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "#    for state in states:\n#        if state.is_new:\n#            self._new_identity_map.add(state.instance)\n#        elif state.is_deleted:\n#            self._deleted_identity_map.add(state.instance)\n#       ", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor (IField field : fields) {\n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named == null) {\n\t\t\t\tnamed = new ArrayList", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "====================\n\nclass Application(RequestHandler):\n    \"\"\"\n    The base class for all request handlers.\n    \"\"\"\n    def __init__(self, request, response):\n        self.request = request\n        self.response = response\n        self.finish = self.response.finish", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "if __name__ == '__main__':\n    args = parser.parse_args()\n    downloader = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    downloader.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Poss", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds += [{'os': 'Windows', 'os_pretty': 'Windows',\n                    'os_icon': 'windows.png', 'os_arch': 'x86',\n                    'os_arch_pretty': '32-bit',\n                    'download", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeans = StatusBL.loadByProjectTypeIssueType(projectID, issueTypeID);\n\t\t\tstateBeans = GeneralUtils.filterByID(stateBeans, objectID);", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax && memberAccessExpression.Name.Value == identifierNameSyntax.Identifier.Value ) {\n                    toReplace.Add( argumentSyntax, new ArgumentSyntax( Sy", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the children are the correct verticals for the first group configuration.\n        self._assert_children(split_test, 2)\n        # Set to second group configuration.\n        split_test = self", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           //if (vertical) {\n            //    PdfDictionary fontDict = writer.DirectObject;\n            //    fontDict.Put(PdfName.FONT, piref);\n            //    fontDict.Put(PdfName.TYPE, PdfName.FONT);", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null) continue;\n\t\t\t\t\t\t// find the parent\n\t\t\t\t\t\tGraphNode parent = null;\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new FutureListener<Bitmap>() {\n          @Override public void onSuccess(Bitmap result) {\n            bitmapReference(result);\n          }\n          @Override public void onFailure(Throwable t) {\n", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# TODO: Add tests for NodeEditTagsForm and NodeEditTags\n# TODO: Add tests for NodeEditTagsForm and NodeEditTags\n# TODO: Add tests for NodeEditTagsForm and NodeEditTags\n# TODO: Add tests for NodeEditTagsForm and NodeEditTags\n# TODO: Add", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralizedPose pose) {\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               if (Enabled)\n                {\n                    if (HoverStyle != null)\n                    {\n                        if (IsPostBack)\n                        {\n                            if (ClientState.IsStartupScriptRegistered(\"onclick\"))\n                                ClientScript.Remove", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "sharpness = compound.getInteger(\"sharpness\");\n\t}\n\t\n\t@Override\n\tpublic NBTTagCompound writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return getId() + \" [\" + getProbabilityString() + \"]\";\n    }\n}\n// End Effect.java\n// Add the following imports at the beginning of the file:\nimport java.util.List;\nimport net.sf.freecol.common.model.", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "# allow admin to access any group\nt = store.tokens.create(\n    username='test_admin',\n    password='password',\n    groups=['admin'],\n    admin=True\n)\nassert t is not None\nassert t['admin'] is True\nassert t['groups']", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "# Test that the delta is empty when nothing has changed\nself.assertEqual(person._get_delta(), {})\n# Test that the delta is correct when the document has changed\nperson.name = \"new name\"\nperson.save()\nself.assertNotEqual(person._get_delta(), {})", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "=====================\n\ndef inspect_l2_product(product_path: str, output_path: str = None):\n    \"\"\"\n    Inspects a L2 product file.\n    :param product_path: The path to the L2 product file.\n    :param output_", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (!ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var item in ignored)\n            {\n                if (toScan.Contains(item))\n                {\n                    to", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn computed == null ? null : read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       resbrains = getToolByName(self.context, 'portal_brain', None)\n        resbrains.setDefaultView('discussion_list')\n        resbrains.setDefaultView('discussion_thread')\n        resbrains.setDefaultView('discussion_", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic bool IsWater\n\t\t{\n\t\t\tget { return ( m_ID & 0x8000 ) != 0; }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // get channel_uri:\n                    // if it's not in the cache, create it\n                    // if it's in the cache, return it\n                    // if it's null, return empty string\n                    if (null == scene.GetRegionChannel(scene", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriod ppCur=PayPeriods.GetCur();\n\t\t\tPayPeriods.Delete(ppCur);\n\t\t\tPayPeriods.Insert(new PayPeriod(PayPeriods.Count+1,PayPeriod", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _parse_NAME_II_location_headings(column_headings)\n        # Convert the X and Y column headings to datetime objects.\n        pattern = re.compile(r'^(\\d{4})-(\\d{2})-(\\d{2", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "# This function is used by the `group_member_create` and `org_member_create`\n# functions to check if the user is allowed to add a new member to the group\n# or organization.\ndef _check_group_or_org_member_create(context, data_", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tString childLabel = predictionAttribute.getValue(example.getExampleIndex());\n\t\t\t\tNode childNode = node.getChildren().get(childLabel);\n\t\t\t\t// setting outcome\n\t\t\t\toutcomes[parentIndex] = childNode.getPartitionId", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return this.SearchSegments(settings, segments, null);\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The search settings.</param>\n        /// <param name=\"", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = string.charAt(offset++) << 10\n                      | string.charAt(offset++) & 0x3FF;\n         }\n         if (_range != null && _range.contains(codePoint)) {\n            return offset;\n         }\n         return", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tObservationDAO observationDAO = new ObservationDAO();\n\t\tList<Observation> observations = observationDAO.getObservationsByAccessionNumber(accessionNumber);\n\t\tif (observations != null && observations.size() > 0) {\n\t\t", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendToClient(newConn => newConn.Send(new ServerOrder(\"ServerError\", message)));\n\t\t\t\t\tDropClient(newConn => newConn.Disconnect());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif (beans == null)\n\t\t\treturn coll;\n\t\tfor (ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVoVo bean : beans)\n\t\t\tcoll.add(bean);\n\t\treturn coll;\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify(header=\"Error\", message", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.Length];\n            A.GetIndex(seqindex: seqindex, index: ref ret);\n            return ret;\n        }\n    }\n}", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get time range\n  if not 'startDate' in pD:\n    return S_ERROR( \"Missing start date!\" )\n  startDate = pD[", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (player.IsPaused || player.IsDead || player.IsDisconnected || player.IsIdle)\n\t\t\t\treturn;\n\t\t\tif (player.IsBuilding || player.IsProducing || player.IsTraining || player.IsRes", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       // Save the compiled plan to disk\n        String planFileName = BuildPlanFileName(name);\n        BuildPlanFile(planFileName, plan);\n        // Save the compiled plan to the catalog\n        catalogStmt.setPlanfile(planFileName);\n        catalogStmt.setPlantext(plan.", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(221, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = (byte)bits;\n\t\t\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "   page = self.get_page(self.user.get_absolute_url(), login_as=self.user)\n    self.assertTemplateUsed(page, 'user_profile.html')\n    self.assertTemplateUsed(page, 'base.html')\n    self.assert", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   _keep_tempdir = parser.parse_args().keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n    main()\n# vim: set fileencoding=utf-8 :\n# Local Variables:\n# mode: python\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tself.cleanList()\n\t\tself.listLength = len(self.newAPList)\n\t\tself.list.append(self.newAPList)\n\t\tself.onLayoutFinish()\n\n\t\tif self.listLength > 0:\n\t\t", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               int len = fCode.Length;\n                int width = (int) ((x + fontX) * len);\n                int height = (int) (barHeight + fontY + font.GetFontSize() + 2 * barSpace);\n                return new Rectangle", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n\n// The following code is for testing purposes only\npublic static void main(String[] args) {\n  Properties props = new Properties();\n  props.setProperty(\"foo\", \"bar\");\n  props.setProperty(\"bool\", \"true\");\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "#         y_points = np.arange(-89.5, +89.5, 1.0)\n        y_points = np.arange(-89.5, +89.5, 1.0)\n        x_points, y_points =", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrent", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n# build dataset\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(261, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, name, dll=None, resultType=None, argTypes=(), doc=None ):\n        \"\"\"\n        Create a null function with the given name, DLL, result type, and argument\n        types.\n        \"\"\"\n        return _NullFunction(", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           baos.write(emptyStreams.toByteArray());\n            writeUint64(header, baos.size());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeUint64(final SevenZFileHeader header, final", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   alphaLevel -= 5;\n                    if (alphaLevel <= 0)\n                    {\n                        inRamp = true;\n                        alphaLevel = 255;\n                        repaint();\n                        try {\n                            Thread.sleep(rampDelay", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = _mocks.Object.GetItem(_title);\n            item.Should().NotBeNull();\n            item.Status.Should().Be(DownloadStatus.Completed);\n            item.CanRemove.Should().BeTrue();\n        }\n    }\n}\n\n// The", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "           if (_diff > 0)\n                await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n            if (_diff > 0)\n                await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWep", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "#        f.writelines(['F) ', str(Npix), '\t\t# Number of pixels in the image\\n'])\n#        f.writelines(['G) ', str(Npix), '\t\t# Number of pixels in the image\\n'])\n#        f.writelines", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 1);\n                    i += ((b & 0x04) << 3);\n                    i += ((b & 0x02) << 6);\n                    i += ((b & 0x", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "   def _create_course(self):\n        \"\"\"\n        Create the course in Studio.\n        \"\"\"\n        # TODO: Implement this method\n        pass\n\n    def _create_course_in_studio(self):\n        \"\"\"\n        Create the course in Studio using the Studio API", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tString chanceString = splitNumber[1].replace(\"%\", \"\");\n\t\t\tchance = Float.parseFloat(chanceString);\n\t\t}\n\t\treturn (int) (Math.random() * ", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "# main\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            state=dict(default=\"present\", choices=[\"present\", \"absent\"]),\n        ),\n        supports_check_mode=", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.chkPrivacy = new System.Windows.Forms.CheckBox();\n            this.chkPrivacy.Location = new System.Drawing.Point(221, 12);\n            this.chkPrivacy.Name = \"chkPrivacy\";\n            this.chkPrivacy", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "```python\n        for plugname, plugin in self.loaded_plugins.items():\n            try:\n                self.ui_log.info(_(\"Running plugin %s\") % plugname)\n                plugin.run()\n                self.ui_log.info(_(\"Plugin", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class IAbstractSession(ISession):\n    def getAbstract(self):\n        \"\"\" Session Abstract \"\"\"\n    def getAbstractHTML(self):\n        \"\"\" Session Abstract HTML \"\"\"\n    def getAbstractText(self):\n        \"\"\" Session Abstract Text \"\"\"\n    def getAbstractPDF(self):\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText(), subfoldersCheckBox.isSelected(), subfoldersCheckBox.isEnabled(), messageBrowser, messageWriter,", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(\"value\").intValue();\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.isOpened()) {\n            Bundle parameters = new Bundle();\n            parameters.putString(FIELDS, REQUEST_FIELDS);\n            Request request = new Request(currentSession, \"/me\", parameters, null);\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.chance();\n\t\t}\n\t\tfor (Emotion emotion : emotions) {\n\t\t\temotion.chanceNormalize(sum);\n\t\t}\n\t}\n\tprivate static class", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "# test xml export\ndef test_xml_export(self):\n    \"\"\"Test xml export.\"\"\"\n    # create sample build\n    self.build = self.create_sample_build()\n    # export xml\n    xml = self.build.to_xml()\n    # compare xml with", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   Long = (x/k + (1/3)*(N/k*N + M/k*M)/2)/_deg2rad\n    Lat = phi1 + (N/(k*k)*(1-e*e)*(1-e*e*sin(phi", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n    form = ReportUserForm(request.POST)\n    if form.is_valid():\n        report = form.save(commit=False)\n        report.user = request.user\n        report.save()\n        messages.success(request, \"User reported successfully.\")\n        return", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddSeriesSetView(MultiStepFormView):\n    \"\"\"A form to add a new product series and set it as the development series.\"\"\"\n    schema = IProductSeries\n    @property\n    def form_fields(self):\n        return self.schema.fields.values()\n   ", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "=====================\n    config = _Config()\n    config.initialize()\n    config.parse_args()\n    config.define_defaults()\n    config.define_post_processors()\n    config.define_post_processors_for_tests()\n    config.define_", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new Attribute[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override Type GetTypeBase ()\n            {\n                return null;\n            }\n            public override", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "# class OBD_PID_01(OBD_Packet):\n#     fields_desc = [\n#         BitField('mil', 0, 1),\n#         BitField('cel', 0, 1),\n#         BitField('p0', 0,", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.connection = self.bus.get_connection()\n\t\tself.connection.add_filter(self.handle_message)\n\t\tself.connection.add_filter(self.handle_method_call)\n\t\tself.connection.add_filter(self.handle", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           }\n            else\n            {\n                index = this.AddCraft(typeof(ScrollOfMysticism), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    def __enter__(self):\n        \"\"\"Binds the request context to the current thread.\"\"\"\n        self.push()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"Unbinds the request context from the current thread", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer_list(cluster_id, topic_name, needs_columns)\n    return response\ndef _pubsub_consumer_list(cluster_id, topic_name, needs_columns=False):\n    \"\"\" All pub/sub consumers.\n   ", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "dx = np.sqrt(det(ray_matrix).*((np.outer(angles, np.ones(angles.shape[0])) - angles)**2))\nelse:\n    # Find projection of axis on detector\n    axis_proj = np.dot(_ray_matrix, np.", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\nclass ProxylessNZBHydra(NZBHydra):\n    def __init__(self):\n        self.name = 'ProxylessNZBHydra'\n        self.provider = ProxylessNZBHydraProvider()\n        self.", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\treturn font_size_names [(int) type];\n\t\t}\n\t\t\n\t\tpublic override string ToString ()\n\t\t{\n\t\t", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\"Blocklength is too large\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add the blocks\n\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(innerObj.Properties[0].Value.Type,", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    int index = h * width + w;\n                    if (w > 0) {\n                        edges.add(T2.of(\"edge-\"+index, \"edge-\"+(index-", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "======================\n\ni1 = iso.Isoelastics(ds, lut_identifier=\"LE-2D-FEM-19\")\ni1.get_data(keys=keys, cols=[\"circ\", \"circ_ratio\"],\n           channel_width=2", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final File file1 = new File(args[0]);\n        final File file2 = new File(args[1]);\n        final LocalTripleStore db1 = new LocalTripleStore(file1);\n        final LocalTripleStore db2 = new LocalTripleStore(file2", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "if __name__ == '__main__':\n    unittest.main()\n# This script is a test script for the alerting functionality of the Spotbot.\n# It imports the alerting module and sets up a test case using the unittest framework.\n# The test case includes several test methods", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJar = performDownload();\n\t\t\tif (downloadedJar != null) {\n\t\t\t\treturn performInstallation(downloadedJar);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.vao);\n\t\t\tOpenGL.glDeleteTextures(1, ref OpenGL.texture);\n\t\t\tOpenGL.glDeleteTextures(1, ref OpenGL.depthTexture);\n\t\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "   @property\n    def total_cov_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the total *xy* covariance matrix.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return np.vstack((self.data", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 noCanonicalIDAccounts.add(owningAccount.getAccountNumber());\n                } else {\n                  accountMap.put(owningAccount.getAccountNumber(), owningAccount);\n                }\n              } catch (Exception e) {\n                LOG.error", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public IFolder SelectedFolder\n        {\n            get { return _selectedTreeNode == null ? null : _selectedTreeNode.Folder; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmCommand<ImportVmCommandParameters> command = new ImportVmCommand<ImportVmCommandParameters>(\n                new ImportVmCommandParameters(\n                        new Guid(\"{00000000-0000-0000-0", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.alignment1 = new global::Gtk.Alignment (0.5F, 0.5F, 0.5F, 0.5F);\n\t\t\tthis.alignment1.Add (this.table1);\n\t\t\tthis.align", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "# ==============================================================================\n# Set up the database\n# ==============================================================================\n# This is where you would set up the database if you were using one.\n# ==============================================================================\n# The following code is commented out as it is not needed for this", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic FieldBuilder DefineField(string name, Type fieldType, FieldAttributes attribs)\n\t\t{\n\t\t\treturn DefineField(name, fieldType, attribs, null);\n\t\t}", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return (Builder)pb.MergeFrom(this);\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Returns the index of the first vertex of quad <code>i</code>.\n    ", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (CmsStringUtil.isNotEmpty(showDateData)) {\n            String[] dateCols = CmsStringUtil.split(showDateData, ';');\n            for (String dateCol : dateCols) {\n                if (dateCol.equalsIgnoreCase(", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n//  Copyright (C) 2014-2015 Invex Games\n//  Licensed under the Apache License, Version 2.", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n  }\n}\n\nThe code above is a partial class of a CommandButton in a TaskDialog. The code is incomplete and I need to add the following functionality", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser != string.Empty)\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            // send emails to the users\n            foreach (string user in", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // Validate that all discounts have a unique criteria code\n            if (CriteriaCodesUsed.Count > 1)\n            {\n                ValidationMessage = Catalog.GetString(\"{0} {1} {2}\",\n                    Catalog.GetString(\"The following discount criteria codes are used", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, (int) stream.Length);\n                // Adding file content as blob/byte[]\n                args.Add (filename, new Blob (buffer));\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __len__(self):\n        \"\"\"Number of requirements\"\"\"\n        return sum(len(v) for v in self._reqs.values())\n\n    def __iter__(self):\n        \"\"\"Iterator over requirements\"\"\"\n        return iter(self._reqs.values())\n\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && !CopyRange; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset { _customRange = value; }\n\t\t}\n\t\tprivate string _", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation instanceof SourceCodeAnnotation) {\n                SourceCodeAnnotation sca = (SourceCodeAnnotation) bugAnnotation;\n                if (sca.getSourceCode() == null) {\n                    throw new IllegalStateException(\"BugInstance \" + bugInstance.toString() +", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "}\nThis code is a base class for food items in Ultima Online. It includes basic functionality such as serialization, deserialization, and a constructor. The class also includes a few abstract methods that need to be implemented by derived classes, such as Eat() and Consume(). The class also includes a", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 3)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.Item(\"Q\").GetValue<bool>())\n                    {\n                       ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraints with default values for all but x, y, width,\n\t * height, and anchor.", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"predanswers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "   self.assertEquals(field_model_def['name'], field_def['name'])\nif __name__ == '__main__':\n    run_tests(TestParser)\n\n# vim:ft=python:et:sw=4:ts=4:sts=4\n#", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new object[] {10, \"E1\"});\n                // widen to string\n                SendEventBean(env, new SupportBean(\"E1\"));\n                result = env.SendEventBean(new SupportBean(\"E2\"));\n                result = env.Send", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        clibm = ctypes.cdll.LoadLibrary(ctypes.util.find", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n\n# This is a custom module for OpenERP 7.0\n# It adds a new field 'website_template'", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n        }\n        if (value != null && oldValue != value) {\n            c.putClientProperty(BasicHTML.propertyKey, value);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "s = SourceFile(\"/\", filename, \"/\", contents=content)\nassert s.content_is_testharness\nassert s.content_is_testharness_script\nassert s.content_is_testharness_worker\nassert s.content_is_testharness_window", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmNamedSqlQuery(namedQueryReference, mapDoc);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.SqlLoader.AddNamedQuery(namedQueryReference, mapDoc);\n\t\t\t}", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.pop();\n    }\n    private boolean contains(CallsiteHolder graph) {\n        for (CallsiteHolder g : graphQueue) {\n            if (g == graph) {\n                return true;\n            }\n        }\n        return false;\n    }", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "# self.pytest_command = pytest\n\nI'm assuming you want to set the pytest command based on the metadata.\nSo, you can replace the next line of code with:\n\nself.pytest_command = pytest\n\nThis will set the pytest command to the", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phiValue = getCachedPhi(key.location, key.stamp, mergeBlock());\n                    if (phiValue != null) {\n                        mergeBlock().replace(value, phiValue);\n                    }\n              ", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException e) {\n                // Ignore exceptions from the callback.\n            }\n        }\n    }\n    /** @see Connection.Video", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic EodonMapGump(Mobile from)\n\t\t{\n\t\t\tGump gump = new EodonMap", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "=====================\n\nThe code above defines two classes, `Record` and `RecordMetadata`, which are\nused to represent records and their metadata in the database. The `Record`\nclass is a subclass of `db.Model` and has several properties and methods\ndefined, including `id`, `", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def __getitem__(self, key):\n        \"\"\"\n        :return: The data for the given user.\n        \"\"\"\n        user = key.split('@')\n        if len(user) != 2:\n            raise KeyError('Invalid user format: %s' % key", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def _get_msgid_from_entry(self, entry):\n        \"\"\"\n        Return the msgid from the given entry.\n        \"\"\"\n        return entry.msgid\n\nThis function is used by the _get_msgid_from_entry_list method to get the", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "#############################################################################################################################################\n#                                                                                                                                           #\n#                                                                                                                                           #\n#                                                                                                                                           #\n#                                                                                                                                           #\n#                                                ", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(action.startsWith(PLUGINS_PREFIX) || action.startsWith(PLUGINS_PREFIX+\"/\")) {\n\t\t\t\tString pluginName = action.substring(PLUGINS_PREFIX.length());\n\t\t\t\tif(pluginName.length()", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.gsp\n        gsp.sendStatus(gsp.builders[0], buildResult, 'review')\n        result = yield gsp.getReviewStatus(gsp.builders[0])\n        self.assertEqual(result['verified'], verifiedScore", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\nclass CategoryTest(unittest.TestCase):\n  def setUp(self):\n    self.category = atom.Category()\n  def testEmptyCategory(self):\n    self.category.term = 'test'\n    self.category.label", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<>();\n            for (Map.Entry<String, AnnotationMirror> e1 : r1.entrySet()) {\n                String key = e1.getKey", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# Register classes\nbpy.utils.register_class(MATERIAL_SSS_PREVIEW_PT_panel)\nbpy.utils.register_class(MATERIAL_SSS_PREVIEW_PT_menu)\nbpy.utils.register_class(MATERIAL", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Mapper.MapperNo == 16)\n            {\n                var mapper16 = (Mapper16) _engine.Memory.Mapper;\n                Mapper16_IRQ_Latch = mapper16.IRQ_Latch;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem oMenuItem = new JMenuItem(\"Open Document\");\n            oMenuItem.setActionCommand(SOPENDOCUMENT);\n            oMenuItem.addActionListener(oActionListener);\n            _jMenuBar.add(oMenuItem);\n        }\n        private JMenuItem getInspect", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Green Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Blue Bears]\n\t\tAdd(\"Party Quest\",", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = MeasuredHeight;\n\t\t\tint newHeight = 0;\n\t\t\tfor (int i = 0; i < ChildCount; i++) {\n\t\t\t\tView child = GetChildAt (i);\n\t\t\t\tint childHeight", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "=====================\n\n# This is the end of the code provided.\n# The next line of code is not part of the code provided.\n# It is just a comment to indicate that the code provided is over.\n# You can add new code below this line if you want to extend the provided code", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#lexers.register_lexer(name='php', filename='*.php', lexer=PhpLexer)\n# Override the default lexer for .rst files to enable highlighting of code blocks\n#lexers.register_lexer(name='rst',", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "#cursor.execute('''SELECT sdate, edate, duration FROM flight_group WHERE groupID=?''', (i,))\n#row = cursor.fetchone()\n#print \"Group %d: Start %s End %s Duration %s\" % (i, row[0", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "# TODO: this is a placeholder for the real code that will be called when the\n#       kubernetes pod is started.  It should be a call to the flexvolume\n#       driver to mount the ZFS filesystems.\n#       See https://github.com/kubernetes/flexvolume", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"I'm not involved in any of that.<br/>I'm just a simple shepherd.<br/>I don't have time for that.<br/>I'm just here to take care of my sheep.<br/>I don't know what you're", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {}\nWhat should be added to the responses dictionary?\nThe responses dictionary should contain the classes for each response type.\nFor example:\nresponses['ANIME_INFO'] = AnimeInfo\nresponses['ANIME_INFO_NEW'] = AnimeInfoNew\nresponses['", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nclass HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, uuid, name, status", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n            finish();\n        }\n    }\n}\nThis code is a part of an Android app that unshortens URLs. The code is", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "# TODO: Add step for checking that primary_db has no packages\n#       (i.e. it is empty)\n#       (i.e. it is empty)\n#       (i.e. it is empty)\n#       (i.e. it is empty)\n#", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n    if self.distribution.has_pure_libs():\n        inputs.extend(self.get_pure_libs())\n\n    return inputs\n\ndef get_pure_libs (self):\n    \"\"\"Return a list of files that are to be installed in", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tif (lazyPropertyNames[j] == fieldName)\n\t\t\t\t{\n\t\t\t\t\t// NH-1331", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "#        '-N', job_name,\n#        '-o', log_name,\n#        '-e', log_name,\n#        '-j', 'y',\n#        '-q', 'all.q',\n#        '-l', 'vmem=1024m", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"~/Views/Delegate/AddEvent.cshtml\");\n        }\n        //[HttpPost]\n        //[ValidateAntiForgeryToken]\n        //public ActionResult AddEvent(Event model)\n        //{\n        //    if (ModelState.IsValid", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       return string.Format(\"({0},{1},{2},{3},{4},{5})\", ((Circle) obj).Center.X, ((Circle) obj).Center.Y, ((Circle) obj).Radius, ((Circle) obj).Width, ((Circle) obj).Height", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    def download(self, canHandleRange=False, forceRepairLinks=False):\n        self.logDebug(\"Filesize: %s\" % self.pyfile.size)\n        self.logDebug(\"Filesize: %s\" % self.pyfile.filesize)\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path != null && path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\t/// <summary>\n\t\t/// Determines the location to search for resources from.\n\t\t/// </", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "       self.clean_dhcp_leases()\n        return True\n    def clean_dhcp_leases(self):\n        \"\"\"\n        Clean out old dhcp leases\n        \"\"\"\n        if self.verbose:\n            self.logger.info(_(\"Cleaning old d", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement());\n    }\n}\n\n// The following code snippet is for testing purposes only\npublic static void main(String[] args) {\n    AbstractEventProducer producer = new AbstractEvent", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           for (PpmContext currentContext = context; currentContext != PpmContext.Zero; currentContext = currentContext.Suffix)\n            {\n                if (currentContext.Symbol == symbol)\n                {\n                    gotoLoopEntry = true;\n                    break;\n              ", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Sequence VR.\n        /// </summary>\n        public static readonly DicomVr Sqvr = new DicomVr(\"SQ\", false", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[3]);\n\t\t\t//if(Sqlite.IsTestTypeInSession(sessionID, tFull[0]))\n\t\t\t//\tcontinue;\n\t\t\t//if(Sqlite.IsTestType", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_delete_bytes_at_end(self):\n        o = self.file(b'abcdefghijklmnopqrstuvwxyz')\n        delete_bytes(o, 10, 14)\n        self.assertEquals(b'", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n<td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X</td>\n    <", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# TODO: plot the results\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--filenames', nargs='+', required=True)\n    parser.add_argument('--app_pattern', default=", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "if __name__ == '__main__':\n    unittest.main()", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRoundRect(x + 1, y + 1, controlSize - 2, controlSize - 2, 2, 2);\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " def simulateKNN(self, patterns, classes, k):\n    \"\"\"\n    Simulate KNN algorithm on given patterns and classes.\n    \"\"\"\n    knn = KNNClassifier(k)\n    knn.fit(patterns, classes)\n    return knn\n", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(elementKind, offset, value);\n    }\n    @Override\n    public void visit(MaxSimulator simulator) {\n        super.visit(simulator);\n        simulator.addMethod(\"readLength\", \"()I\", \"int readLength()\");\n", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           string assemblyPath = FileUtils.CombinePaths(\n                Parent.ProjectDirectory, relativePath);\n            if (File.Exists(assemblyPath)) {\n                return assemblyPath;\n            }\n            return null;\n        }\n        /// <summary>\n        /// Resolves", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef _get_input_history(history_file=None):\n    \"\"\"\n    Returns a list of the last 100 input lines from the history file, or an empty list if the file does not exist.\n    \"\"\"\n    if history_file is None:\n        history_", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "     }\n    }\n  }\n}\n\n// The next line of code is missing:\n// i2 = i15 + 1;\n// and the following lines should be added:\n// i2 = i15 + 1;\n// i = i16;\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"  \" + s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               });\n            #endregion\n            #region Lux\n            SpellSlot luxQ = new SpellSlot(SpellSlotID.Q, 1200, 250, 1500, 1500, 1500, 150", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmptyUser());\n\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmptyUser());\n\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmptyUser());\n\t\twhen(securityContext.", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "   @testlib.with_context(context=context)\n    def test_popen_raises_error_on_non_existent_executable(self):\n        context.setup_error_codes(ENOENT)\n        with self.assertRaises(subprocess.Called", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (string.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tconfigDirectory = Path.Combine(Application.StartupPath, \"config\");\n\t\t\t}\n\t\t\tif (string.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tthrow", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//\n\t\t// Summary:\n\t\t//     Initializes a new instance of the Constraint class.\n\t\t//\n\t\t// Parameters:\n\t\t//   constraintType:\n\t\t//     Type of constraint.\n\t\t//\n\t\t//   constraintName:", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n        Dialog.setTabOrder(self.settings_ui_groupbox, self.settings_kernels_groupbox)\n        Dialog.setTabOrder(self.", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               return true;\n            }\n            String stationId = wxs.getString( wxs.getColumnIndex( DatabaseHelper.COLUMN_ICAO ) );\n            mStationId = stationId;\n            String stationName = wxs.getString( wxs.getColumnIndex(", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring queryString = \"from Continent c where c.Name = 'Europe'\";\n\t\t\t\tint resultCount = s.CreateQuery(queryString).List<Continent>().Count;\n\t\t\t\tAssert.AreEqual(1, resultCount);\n\t", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITT = (uiCRCITT << 8) ^ crc_it_table[(uiCRCITT >> 8) ^ uiByteValue];\n            }\n            return (ushort)uiCRCITT;\n        }\n        private void generate", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn hasSpeedModule() ? 10 : 5;\n\t}\n\t/**\n\t * @return true if this sentry has a speed module installed\n\t */\n\tpublic boolean hasSpeedModule() {\n\t\treturn getMode().hasSpeedModule();\n\t}\n\t", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = \n                new IHyperlinkDetector[] {\n                        new CeylonHyperlinkDetector(editor),\n                        new CeylonJavaHyper", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "# Here you can add the Object3DAspect and Object3DScale widgets\n# and connect the Object3DDrawingModeSignal to the Object3DAspect and Object3DScale\n# widgets.\n# The Object3DAspect and Object3DScale widgets will then react", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set X\n\t\t\t\t\t{\n\t\t\t\t\t\tint x = info.GetInt( 0 );\n\t\t\t\t\t\ttoSet = new Point2D( x, m_Point.Y );\n\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object value : valueChoices)\n                     {\n                        String label = selectConverter.convert(value);\n                        if (Strings.equalsIgnoreCase(label, valueString))\n                        {\n                           chosenValue = value;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tfor (int k=0; k<maxChanges; k++)\n\t\t\t\tsb.append(String.format(\"%10d %15.2f %s\\n\", k, fraction[i][j][k], getChangeName(k)));\n\t\treturn", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that could not be priced\n                                int orderIndex = unpricedLine.Key;\n                              ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\tpublic void AddParameterInspector (IParameterInspector inspector)\n\t\t{\n\t\t\tparent.AddParameterInspector (this", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final SimpleACLPermission permission = new SimpleACLPermission(ownerId, mode, ownerGroupId);\n        final SimpleACLPermission acl = new SimpleACLPermission(ownerId, mode, ownerGroupId);\n        final SimpleACLPermission acl2 = new SimpleACLPermission", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn new Vector3 (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint(XDRTypedef):\n    __slots__ = ['key', 'value']\n    key = XDRUnion([('vlan', XDRInt), ('mac', XDRAddress), ('port', XDRInt)])\n    value = XDRUnion([('stats', endpoint", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    Console.WriteLine(\"Client \" + i + \" disconnected\");\n\t\t\t\t    RemoveClient(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Receives data from a", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == Portal.RequestType.Step) {\n                List<DataSet> dataSets = listDataSets(list);\n                List<StepBucket> stepBuckets = convertToStepBuckets(dataSets);\n                notifyStepsReceived(requestId, step", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " # Generate the callback classes.\n  GenerateCallbackClass('MyClass', 1, 1)\n  GenerateCallbackClass('MyClass', 1, 0)\n  GenerateCallbackClass('MyClass', 0, 1)\n  GenerateCallbackClass('MyClass', 0,", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\"\"\"\nresponse = HttpResponse(content_type='application/json')\njson_data = []\nfor item in items:\n    json_data.append(json.dumps(range_item_dict(item)))\nresponse.content = json.dumps(json_data)\nreturn", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "               new VarNode(\"score\"), null, null, null, null));\n                whereClause.addChild(new ServiceNode(\n                        new ConstantNode(searchIV), service, serviceClause,\n                        null, null, null, null, null, null, null, null,\n", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n    def dispatch(self, request, *args, **kwargs):\n        self.object = self.get_object(queryset=self.model.objects.all())\n        if self.object is None:\n            self.object = self.model()\n        if request.method ==", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // Start the iterative process\n            int iterations = 0;\n            double residual = 0.0;\n            double rnorm = 0.0;\n            double rnormOld = 0.0;\n            double rho = 0.0;\n            double", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[]{sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[]{sortedNumbers[left].add(sortedNumbers[right].divide(Apfloat.TWO)), sortedNumbers[right]};\n", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           if reference_map[v] != -1:\n                A[reference_map[v], :] += sample_weights[edge.child]\n                A[:, reference_map[v]] += sample_weights[v]\n                sample_weights[v] += sample_", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "   def test_backend(self):\n        \"\"\"Test the backend\"\"\"\n        self.connector = self.connector or self.connector.lower()\n        self.connector_backend = self.connector + '_backend'\n        self.connector_backend_index = self.connector_backend + '_index", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam && slot.Value.Team != null)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && slot.", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" : \" + _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "# TODO(roasbeef): Implement the Window Update Frame.\nclass WindowUpdateFrame(Frame):\n    def __init__(self, stream_id, window_size_increment):\n        self.stream_id = stream_id\n        self.window_size_increment = window", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "#endif\n        }\n    }\n}\n\n//The code above is incomplete, the next line of code is missing.\n//What should be the next line of code?\n\n//The next line of code should be:\n//foreach (var node in cluster.Nodes)\n//   ", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos (m_maxSlopeRadians);\n}\nvoid btCharacterController::setMaxSlopeCosine(double slopeCosine)\n{\n\tm_maxSlopeCosine = slopeCosine;\n}\nvoid", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            if (canLeakUniqueResult(initializer)) {\n                checker.report(checker.getCheckerResult(initializer),\n                        \"Leaking a unique result\", node);\n            }\n        }\n       ", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tN", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t\t_type = typeAttribute.Value;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type.\n\t\t/// </summary>\n\t\tprivate void CreateReturn", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()){\n\t\t\t\tmyTrackBar.Size = new Size(100, 50);\n\t\t\t\tmyTrackBar.Orientation = Orientation.Horizontal;\n\t\t\t\tmyTrackBar", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.castTo(AnnotationType.class)).thenReturn(annotationType);\n\t\t\tdoReturn(Collections.singletonList(classType)).when(lookup).findAllByFqn(Matchers.eq(annotationType.getFqn()));\n\t", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postDominator != other.postDominator)\n\t\t\treturn false;\n\t\tif (this.postDominator != null)\n\t\t\treturn this.postDominator.equals(other.postDominator);\n\t\treturn true;\n\t}", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = narrowLE[end][r.label];\n            int min = (min1 > min2) ? min2 : min1;\n            if (min > narrowL) {\n              continue;\n            }\n            int max1 = wideRE[start][r.label", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               'rsync', '--archive', '--compress', '--delete', '--exclude=*.pg_xlog',\n                '--exclude=*.pg_wal', '--exclude=pg_hba.conf', '--exclude=pg_stat_tmp',", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsDisposed = true;\n\t\t\tprocess.IsDisposedChanged += (s, e) => {\n\t\t\t\tif (e.NewValue) {\n\t\t\t\t\tprocess.IsDisposedChanged -= (s, e) => {\n\t", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "writer.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a color value to the XML-stream.\n\t *\n\t * @param   color  The color to write.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tfinal Contact that = (Contact)aThat;\n\t\treturn ( (", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if total_rej > 10:\n      print('Total number of rejected timesteps = %d' % total_rej)\n      sys.exit()\n\nThe code is a multi-body simulation of a system of rigid bodies in 3D. The simulation is performed using", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       idx_list = [c for c in node.inputs[1:] if c in cdata]\n\n        if len(idx_list) == len(node.inputs[1:]):\n            # This is a constant indexing, so we can remove the subtensor\n            #", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "=====================\n\ndef get_community_form_data(request):\n    \"\"\"\n    Returns a dictionary containing the data from the Community form.\n    \"\"\"\n    community_form_data = {}\n    if request.method == 'POST':\n        if 'add_community'", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "```python\n    return query\n```\nThis is the code that needs to be completed.\nThe code above is defining a class `InstanceEvents` which is a subclass of `event.EventBase` and it has several methods defined for handling events related to an ORM instance. The `_", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "# Register the descriptor\nXModuleDescriptor.register_module(ConditionalModule)\n# Register the descriptor with the system\nXModuleDescriptor.register_module_type(ConditionalModule, 'conditional')\n# Register the descriptor with the system\nXModuleDescriptor.register_module_type(Cond", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "=====================\n\nThe code seems to be incomplete and missing some context. Here's a possible completion based on the given code:\n\n```python\n# ...\n\nNext line of code:\n=====================\n\ndef translate_changes(self, data_model_changes):\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && (Method != null || Field != null || Sig != null))\n\t\t\t{\n\t\t\t\tStaticCompiler.CheckType(Class, Type.Type);\n\t\t\t\tif (Method != null)\n\t\t\t\t{\n\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description:\";\n\t\t\t//\n", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.getNoPrefix(\"mail/syncmail.1\")\n        self.assertEqual(c.branch, \"tags/1.0\")\n        self.assertEqual(set(c.files), set([\"build/src/buildbot/test/mail/syncmail.py\"]", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n\n        for (Map.Entry<String, String> datum : csvData.entrySet", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isGenerating()) {\n\t\t\tif(player.capabilities.isCreativeMode) {\n\t\t\t\tsetGenerating(false);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tif(mana > 0", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentative(component).getDegree();\n        }\n        this.memorizeIntrinsicCohesion(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void memorize", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if __name__ == \"__main__\":\n    do_upgrade()", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.ComputerMgmt.ComputerMgmt.ComputerMgmt.ComputerMgmt.ComputerMgmt.ComputerMgmt.ComputerMgmt.ComputerMgmt.ComputerMgmt.Comput", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Creates an occurrence of the event with the specified start and end", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Bind( DataSource, SourceEventName );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAndDont", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getService(IControllerService.class)\n                    .getService(ISwitchManager.class);\n            if (switchManager != null) {\n                ObjectMapper mapper = new ObjectMapper();\n              ", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImageHelper(1000001, \"/ims/images/alert.gif\", new Integer(1", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   old_pred_uuid = pred.uuid\n    old_pred_label = pred.label\n    old_pred_project = pred.project\n    old_pred_manifest = pred.manifest\n    old_pred_item = pred.item\n    old_pred_type =", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktfit= \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .readingorder= \")\n                .Append(StringUtil.ToHexString(", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katakana\n\t\t\t\tbytes [posn++] = (byte) (ch - 0x30);\n\t\t\t\tbytes [posn++] = (byte) (value >> 8);\n\t\t\t\tbytes [posn++]", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\ndef tricore_ld(obj, off2, off3, off1, b):\n    src = env.A[b]\n    addr = composer(off2, off3, off1)\n    dst = env.D[a]\n    obj.operands = [", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();\n\t\t\tmap.setProperties(properties);\n\t\t\treturn map;", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n         *", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.PurgeDefault();\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t\tAssert.AreEqual (0, csd.SystemAcl.Count);\n\t\t}\n\t\t[Test]", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "# Here we go, start the lookup thread\nlookup_thread = AcoustidLookupThread()\nlookup_thread.start()\n# Wait for the lookup thread to finish\nlookup_thread.join()\n# Now we can use the results\nresults = lookup_thread.results\n# We can also", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       // add all RPCs from all scripts in the project\n        foreach (Type t in Assembly.GetExecutingAssembly().GetTypes())\n        {\n            if (t.IsSubclassOf(typeof(MonoBehaviour)))\n            {\n                foreach (FieldInfo field in", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       if (Config.show_discussion_buttons) {\n            discussionBack = (MenuItem) getActivity().findViewById(R.id.discussion_back);\n            discussionBack.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "       # Transform wave function to IBZ\n        psit_G = self.symmetry.transform(psit_G, kpt=KPoint(self.ibzk[k]))\n        # Apply symmetry operation to wave function\n        psit_G = self.symmetry.apply", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(\"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\",", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILLabel) {\n\t\t\t\t\t\tILLabel label = (ILLabel)child;\n\t\t\t\t\t\tif (prevChildAsBB != null) {\n", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll)\n\t\treturn;\n\t    //if we're not a ragdoll then we'll need to set all the parts to ragdolls\n\t    if (!IsRagdoll) {\n\t\tfor (int i = ", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class FractureLayer(GeoLayer):\n\nThis is a subclass of GeoLayer. It is used to represent a geological layer that contains fractures. The main difference between FractureLayer and GeoLayer is that FractureLayer has additional attributes related to fractures.\n\n", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte) ((num >>> 24) & 0xff);\n        out[outOff + 2] = (byte) ((num >>> 16) & 0xff);\n        out[outOff + 1] = (byte", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source );\n            this.objectVariables = objectVariables;\n        }\n        private Map<String, PatternNode> objectVariables;\n        @Override\n        protected Predicate<PatternMatch> getFilter()\n        {\n            return new Predicate<PatternMatch>()\n            {\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_legislation_xml_to_json(legislation_xml):\n    \"\"\"Transform a legislation XML to a JSON object.\n\n    :param legislation_xml: An XML object representing a legislation.\n    :return: A JSON object representing the legislation.\n    \"\"\"\n   ", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           frameToClose = (InternalFrame)frameManager.getFrame(frameManager.getFrames().indexOf(frameManager.getActiveFrame()));\n            if (frameToClose!=null && frameToClose.isIcon()) {\n              frameToClose.setIcon(false);\n              frameTo", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "# Define the functions that will be called by the client\n# These functions should be defined in the same order as they are defined in the client code\n# The first argument is the name of the function as it is defined in the client code\n# The second argument is the docstring for the function\n# The", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   for (int z = 0; z < p.getRasterDepth(); z++)\n    {\n      moveZ(out, Util.round(Util.mm2px(p.getZ(z), dpi), 2));\n      for (int y = 0; y", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   ContentValues cv = new ContentValues();\n                    cv.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.ID_GROUP + \" = \" + deleteId,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n        public IntPtr Pointer\n        {\n            get {", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tif (queue[0].Number > numberToCancel)\n\t\t\t\t\tqueue[0].Number -= numberToCancel;\n\t\t\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    infoText += \" file\" if numberOfFiles==1 else \" files\"\n    infoText += \"<br>\"\n\n    if numberOfHiddenFiles>0:\n        infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \"\n        infoText += \"file\"", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(r'@(\\w+)@', r'self.env.\\1', code)\n        # replace all variables by their value\n        code = self.env.subst(code)\n        # write the result to the output file\n        self", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "if __name__ == '__main__':\n    try:\n        PlanningServer()\n        rospy.spin()\n    except rospy.ROSInterruptException:\n        pass\n    except KeyboardInterrupt:\n        print \"Shutting down\"\n        rosp", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] - h[ 0 ], 2 );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] +", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tif (qs.Execute().ReturnValue < 0)\n\t\t\t\treturn false;\n\t\t\tentity.cti_id = Convert.ToInt32(qs.Parameters[\"@cti_id\"].Value);\n\t\t\treturn true;\n\t\t}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic int PropertyCount\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic string[] PropertyNames\n\t\t{\n\t\t\tget { throw new Not", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "# self.proposed_config = copy.deepcopy(self.existing_config)\n# self.proposed_config['ntp_auth_keyid'][self.key_id]['password'] = self.password\n# self.proposed_config['ntp_auth_keyid", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           component.location.edited_by = editing_user\n            component.location.edited_on = datetime.datetime.utcnow()\n            component.location.subtree_edited_by = editing_user\n            component.location.subtree_edited_on = datetime", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        updateWithCharacters(ch, start, length);\n    }\n    public void characters(char[] ch, int start, int length) throws SAXException {\n        updateWithCharacters(ch, start,", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "#def mkrange(data):\n#    record = unpack('>I', data[:4])[0]\n#    start = unpack('>I', data[4:8])[0]\n#    end = unpack('>I', data[8:12])[", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = apiExplorer.GetApiVersion(apiVersion).GetControllerType(controllerName).GetMethod(actionName).ReturnType;\n            if (type == typeof(HttpResponseMessage))\n            {\n                type = typeof(ObjectContent<,>).MakeGenericType(", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "       elif event.keyval == gtk.keysyms.Return:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_value()", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigurer.LOCATIONS_PROPERTY, newLocationList);\n        }\n        return beanProperties;\n    }\n    /**\n     * The order of this bean factory post processor.\n     */\n    public int getOrder()\n    {\n", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           lines = f.readlines()\n        finally:\n            f.close()\n    if lines:\n        for line in lines:\n            if len(line.strip()) == 0:\n                module.fail_json(msg=\"Password file contains blank lines\")\n    if state", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "       [In, MarshalAs(UnmanagedType.Interface)] IntPtr pUnkEvent,\n            [In, MarshalAs(UnmanagedType.Interface)] IntPtr pUnkEventParam\n            );\n        [PreserveSig]\n        int GetEvent(\n            [In] IntPtr", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureWriteAccess( directedAclKeys.getAclKey() );\n        spm.addPrincipalToPrincipal( directedAclKeys.getAclKey(), directedAclKeys.getPrincipalId() );\n        return null;\n    }\n}\nThe code above is", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag matches the expected tag.\"\"\"\n        expected_tag = self.expected_tag(element)\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "=====================\n\nif node.nodeType == Node.DOCUMENT_TYPE:\n    clone = newDocumentType(node.nodeName, node.publicId, node.systemId)\n    if node.internalSubset:\n        clone.internalSubset = node.internalSubset", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostics, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase = validateEMSSceneSectionMassCasualtyIndicatorTestCase;\n\t\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(endOffset) == TlvType.KeyName) {\n\t\t\t\tkeyLocator.setKeyName(new Name(decoder.readBlobTlv(endOffset)));\n\t\t\t\tdecoder.readNestedTl", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the camera\n        updateCamera();\n        \n        //Updates the HUD\n       ", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.instance().getGameEngine().getGameEngineService().joinGame( action );\n        hide();\n      }\n    } );\n    m_btnOk = new Button( MAppBoard.s_messages.join() );\n    m", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "# Get the filename from the Content-Disposition header\nfilename = get_filename(r.headers)\n# Save the file to the current directory\nwith open(filename, \"wb\") as f:\n    f.write(r.data)\nif progress:\n    print(\"Downloaded %", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = response.FailureReason;\n\t\t\t}\n\t\t\tcatch (Exception ex)", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _find_carbon_source(model):\n    \"\"\"Find the carbon source reaction in a model.\n    Parameters\n    ----------\n    model : cobra.Model\n        The model to search for the carbon source reaction.\n    Returns\n    -------\n    cobra.Reaction\n       ", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "class Unit(CachedTreeItem, base.TranslationUnit):\n    \"\"\"A single unit of translation.\n    \"\"\"\n    #: The source string of the unit.\n    source = models.CharField(max_length=settings.MAX_STRING_LENGTH,\n                             db_index=", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        migrations.AddField(\n            model_name='city',\n            name='state',\n            field=models.ForeignKey(to='events.State'),\n        ),\n\n        migrations.AddField(\n            model_name='city',\n            name='city_type',\n", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "# Add the OpenFlow controller to the switch\nself.controller = oflib.ofp_new_controller(dpid=self.dpid, event_handler=self.handle_event,\n                                         ofp_version=ofp.OF10_VERSION,\n                                        ", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_RecentItems.size() >= m_MaxCount) {\n      m_RecentItems.remove(m_RecentItems.size() - 1);\n    }\n    m_RecentItems.add(item);\n    if (m_IgnoreChanges)", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.FightMode == FightMode.Aggressor || src.FightMode == FightMode.PassiveDefensive || src.FightMode == FightMode.PassiveAggressive)\n                return true;\n            return false;\n        }\n    }", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null) {\n            halfTradePeriodDate = new Date(takeOfferDate.getTime());\n            halfTradePeriodDate.setTime(halfTradePeriodDate.getTime() + getOffer().get", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\n\t/* Computes the sets of symbols which can follow a given symbol in a given context. */\n\tstatic void CompFollow(Node p,", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteAsync(buff);\n\t\t\tBeginAsyncRead();\n\t\t\treturn m_ReadBuffer;\n\t\t}\n\t\tprivate void WriteAsync(byte[] data)\n\t\t{\n\t\t\tif (m_WriteBuffer == null)\n\t\t\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order);\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tif(o1 == null && o2 == null)\n\t\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List<Item>();\n\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (int j = 0; j < N_INDEXES; j++)\n            {\n                _units2Indx[j] = j;\n            }\n        }\n    }\n}\n// N_INDEXES is defined as 128 in the code above\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "# class Rates(Base):\n#     \"\"\"Intellectual property of Red Hat, Inc.\n#     This class is used to represent the Rates page in the Chargeback UI.\n#     \"\"\"\n#     label = 'Rates'\n#     view_class = Rates", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.WriteData( offset, length, src, discardWholeBuffer );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tOpenTK.Graphics.ES", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself[\"satfinder_scan_nims\"] = self.satfinder_scan_nims\n\t\tself[\"satfinder_scan_nims\"].list = self.scan_sat_list\n\t\tself[\"satfinder_scan_nims\"].setList(self.scan_", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else if (filterStr.isEmpty()) {\n                throw new IllegalArgumentException(\"filter string cannot be empty\");\n            }\n            else {\n                String[] filters = filterStr.split(\",\");\n                for (String filter : filters) {\n                    String[] parts = filter.", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the previous row\n                Array.Copy(curr, prior, bytesPerRow);\n            }\n        }\n", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage(interface='org.freedesktop.DBus',\n                                  member='org.freedesktop.DBus.Properties.Get',\n                                  signature='(ssssssssssssssssssssssssssssssss", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def __call__(self, x):\n        \"\"\"\n        This is the main function that is called when the MASSIVE\n        program is run.  It sets up the database, and then runs the\n        various functions to compute the Massey products.\n        \"\"\"\n        self.", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           AssertParseError(\n                \"1:1: Message \\\"protobuf.Message\\\" has no field named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message \\\"protobuf.Message\\\" has", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isReadOnly() ) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t\tinitialize();\n\t\tfor ( Object key", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Account ).Username );\n\t\t\t}\n\t\t\tcatch { }\n\t\t}\n\t\t/// <summary>\n\t\t/// Writes a message to the log\n\t\t/// </summary>\n\t\t/// <param name=\"message", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\nclass HrEmployee(models.Model):\n    _inherit = 'hr.employee'\n\n    def _get_employee_attendance_state(self):\n        attendance_obj = self.env['hr.attendance']\n        attendance_ids = attendance_obj.", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResults.Rows.Add(new grdResultsRow(orderInvestigationLiteVo.OrderSpecimen.SpecimenNumber, orderInvestigationLiteVo.OrderSpecimen.SpecimenType, orderInvestigationLiteVo.OrderSpecimen.SpecimenTypeDescription, orderIn", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.Read(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// Set the position of this item.\n       ", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       terminal = maker.new_terminal(self, cwd, profile, debugtab=debugtab)\n        self.add_terminal(terminal)\n        self.show_all()\n        self.terminal_focus(terminal)\n        self.terminal_activate(", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructFieldInfo( name, managedType, marshalType, isByRef, isMarshalAs, isMarshalAsType, isMarshalAsSize, isMarshalAsCustomMarshaler, isMarshalAsCustomMarshalerType, isMarshalAsCustomMarshalerTypeSize, is", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn attributes.HasFlag (TypeAttributes.ValueType);\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsByRef {\n\t\t\tget {\nNext line of code:\n\t\t\t\treturn attributes.HasFlag (TypeAttributes.ByRef);", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.Context(\n        _openssl_version_to_constant(_openssl_version_from_ssl_version(protocol))\n    )\n    self.context.set_options(OpenSSL.SSL.OP_NO_SSLv2)", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label1 = new global::Gtk.Label ();\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.LabelPropagate = true;\n\t\t\tthis.label1.UseMarkup = true;\n\t", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "# headbook = headbook.connect(\"page-reordered\", page_reordered)\n\n# This is the function that is called when a page is reordered\n# It is used to update the gamewidgets in the statusbar\n# and the docking area\ndef page_reordered (", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Close-Tab\": QKeySequence(Qt.CTRL + Qt.Key_W),\n    \"Close-All-Tabs\": QKeySequence(Qt", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [name=\" + this.persistenceUnitName + \", providerClass=\"\n\t\t\t\t+ this.persistenceProviderClass + \", transactionType=\" + this.transactionType\n\t\t\t\t+ \", dataSource=\" + this.dataSource + \", properties=\" + this", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   IEditorInput editorInput = getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFile file = ((IFileEditorInput)editorInput).getFile();\n      return file.isReadOnly();\n    }\n    return false;\n  }\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(812, 12);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(10", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}\n\n// The code above is incomplete, it is missing the last part of the encode method.\n// The missing", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void HMACSHA512_TC2 ()\n\t\t{\n\t\t\tbyte[] key = { 0x0", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(EnumSwitchUnion.m_d) {\n\t        case option_1:\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_sum += 4;\n\t            break;\n\t        case option", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      String jdk = java.GetValue(\"InstallPath\").ToString();\n      return jdk;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome != null)\n        return javaHome", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   comment = l\n    if comment == name:\n        return [comment, lines.index(l)]\n\n    # attempt to find job by name\n    if job := re.search(r'^(.*)\\s+(.*)\\s+(.*)\\s+(.*)\\", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Mesh modifiers\nclass MeshModifier:\n    def __init__(self, modifier_type):\n        self.modifier_type = modifier_type\n        self.modifier = None\n        self.modifier_json = None\n        self.mesh = None\n       ", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           double[] likelihoods = new double[totalBuckets];\n            for (int i = 0; i < totalBuckets; ++i) {\n                double rank = peptideLengthRankBuckets.get(i);\n                int rankCount = rankCounts", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n       ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\nif __name__ == \"__main__\":\n    p = Pydump()\n    p.main()\n\n#This is the main function that runs the script.\n#It creates an instance of Pydump class and calls its main function.\n#This is the entry point of the script", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(12, 12);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(224, ", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'ordering': \"['-created_at']\"},\n            'created_at': ('created_at', 'datetime.datetime'),\n            'document': ('document', 'main.Document'),\n            'id': ('id', 'django.db.models.fields.Auto", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // If the type is not defined in the schema, and we're not processing imports,\n                // then we'll assume it's an anonymous complex type and create a new SDOType\n                // for it.\n                if (!isProcessImports()) {\n                ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state': 'validate'})\n    def holidays_validate_notificate(self, cr, uid, ids, context=None):\n", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets the currently selected <see cref=\"IBusinessObject\"/>\n        /// </summary>\n        IBusinessObject IBOColSelector.SelectedItem\n        {\n            get { return this.", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"{0} ({1}): {2} ({3}): {4} ({5})\",\n                this.Name,\n                this.ShortName,\n                this.TypeDescription,\n                this.TargetName,\n                this.Is", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(valueObject.getCareContext().getID(), valueObject.getCareContext().getClass());\n\t\t}\n\t\tdomainFactory.setDomainObject(valueObject.getCareContext().getID(), value10, valueObject.", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\"],\n            cwd=self.config[\"build_dir\"],\n            env=env,\n            args=opts,\n            verbose=self.config[\"verbose\"],\n            capture_output=True)\n        if status:\n            return status\n        notify", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[] { 0, n }, false));\n\t\t}\n\t}\n\t/**\n\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash, gitStash.Name, gitStash.Message, gitStash.Commit.Parents.Select(p => p.Name).ToList(), gitStash.Commit.Tree, gitStash.Commit.Tree.Items", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "# print out the addresses of the beam monitors\nst.st_print(\n    \"bm0_address: %#x, bm1_address: %#x, bm2_address: %#x\",\n    lattice.cbuffer.get_object(bm0_index", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) > 0;\n    }\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(\"AddInt\", asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += PanelBasis.TAB;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "# Load the archive index\narchive_index = load_archive_index(args.index_file)\n# Call the function based on the command line arguments\nargs.func(archive_index, **args.__dict__)\nif __name__ == '__main__':\n    main()", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.mosi_bits = [(b >> i & 1) for i, b in zip(reversed(range(8)), miso)]\n        self.ss, self.es = ss, es\n        self.samplenum += 1\n        # TODO: Handle", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         cursor = limit - v_1;\n          if (cursor < limit) {\n            // call RV_RV_step()\n            r_step();\n            continue;\n          }\n          limit = cursor;\n          // call RV_RV_suffix_test()\n         ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.newInstance();\n                if (cd == null) {\n                    cd = new ChannelData(channel, cls, fingerprint, msg_size);\n                    channelMap.put(channel, cd);\n                    channelList.add(cd);\n               ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_extension_value(self, extension):\n        \"\"\"\n        Get the value of an extension.\n\n        :param extension: The extension to get the value of.\n        :return: The value of the extension.\n        \"\"\"\n        if extension.get_critical():", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (i != s.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\"\"\", file=f)\n    print(\"\"\"\n\t\t\t\t/* Call the slot */\n\t\t\t\t%s %s", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "# The following code is the original code, which is to be extended.\n# It is assumed that the interval X is split up into intervals X1 and X2\n# such that X1 contains all values that are represented by a single word\n# and X2 contains all values that are represented by a sur", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = t.pos;\n\t\t\tint col = t.col;\n\t\t\twhile (la.kind != 1 && la.kind != 3) {\n\t\t\t\tif (la.kind == 26) {\n\t\t\t\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n#\n# OpenERP Sale Order Line EDI\n#\n# This module extends the Sale Order Line model to support EDI import", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"s\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\",", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testVirtualFolderPermission() throws Exception\n    {\n        //", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# Here you can add your test cases for the Enumerator class\n# or any other class you want to test.\n# For example:\n#\n# class TestEnumerator(object):\n#     def test_enumerate(self, context):\n#         enumerator = context.enumerate()\n", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "# Initialize device\ndevice = Device(deviceToken)\n# Initialize user\nuser = user.newUser(loginId, password)\n# Login\ndata = user.login()\n# Check inspection\ndata = device.check_inspection()\n# Print inspection data\nprint(data)\n#", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# This is the main part of the code.\nargs = docopt.docopt(__doc__)\n# Set up the observatory.\nobs = miriad.ms()\nobs.open(args['<dataset>'])\n# Set up the calibrator.\ncal = miriad", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = 0x1011 + (int)(0.1 * (double)MaxKeys * (double)(Keys.Count + 1));\n        }\n        private class InternalTarget : Target\n        {\n            private KeyRing m_Owner;\n            public InternalTarget", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iter = devices.iterator(); iter.hasNext();){\n            String deviceName = iter.next();\n            String ipAddress = ipAddressMap.get(deviceName);\n            int model = liveModelMap.get(deviceName);\n            Tuner tuner", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATIONS) {\n      jobs.put(Version.USER_NOTIFICATIONS, new UserNotificationsMigrationJob());\n    }\n    if (lastSeenVersion < Version.USER_NOTIFICATIONS_2) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     List<Pattern> regexes = new ArrayList<>();\n      for (String regex : split[0].split(\"\\\\s+\")) {\n        regexes.add(Pattern.compile(regex, ignoreCase(ignoreCase(ignoreCase(ignoreCase(ignoreCase(ignoreCase(ignoreCase(ignore", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       for p in path:\n            if os.path.exists(os.path.join(p, n)):\n                return SCons.Node(os.path.join(p, n))\n            # try the sub-path\n            if sub_path:\n                if os", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "# Map input plugins\n# Map input plugins are used to read data from various file formats.\n# The following plugins are included by default:\n# - 'gdal': read raster and vector data from GDAL supported formats\n# - 'ogr': read vector data from OGR supported formats\n#", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "# Initialize return dict\nreturn_values = {}\n\n# Module parameters\nmodule_params = AnisibleArgumentSpec(\n    argument_spec=dict(\n        name=dict(required=True, type='str'),\n        state=dict(default='present', choices=['present', 'abs", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "=====================\nclass MethodAddView(MethodAddViewBase):\n    \"\"\"\n    View for the Automate > Methods > Add Method page.\n    \"\"\"\n    @NavigateStep\n    def go_to_method_add(self):\n        \"\"\"\n        Navigate to the Method", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"Action class not found: \" + className);\n        }\n        return result;\n    }\n    public void publishEvent(Event event) {\n        // TODO: implement here\n        // publish event to all registered listeners\n        // for (IAction action : _actionList", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "=====================\n\n    def test_update_thread_no_title(self, mock_request):\n        self._setup_thread_data(mock_request)\n        self._test_request_error(\n            \"update_thread\",\n            {\"thread_id\": \"dummy_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "# if not msvc_version_check(env, '8.0'):\n#     return 0\n#     # This is a workaround for a bug in the msvc 7.1 linker.\n#     # The linker doesn't support the /MANIFEST", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           ISchedulingRule rule = getSchedulingRule();\n            Job job = new Job(\"\") { //$NON-NLS-1$\n                @Override\n                protected IStatus run(IProgressMonitor monitor) {\n                    try {\n                        errorStatus[0]", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Allocate output fields\n\t\tdata.values=new Object[meta.getFieldNr()];\n\t\tdata.counts=new long[meta.getFieldNr()];\n\t\tdata.fieldTypes=new int[meta.getFieldNr()];\n", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "```python\nassert (d(2014,1,31, 12,0,0) <= d(2014,1,31, 12,59,59))\n```\nThis line of code checks if the datetime object representing January", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //Spawning\n            for (int i = 0; i < types.Length; i++)\n            {\n                int id =", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def test_suspend_vm(test, params):\n    \"\"\"\n    Test suspend and resume guest VM.\n\n    :param test: QEMU test object.\n    :param params: Dictionary with the test parameters.\n    \"\"\"\n    # Set up the test environment\n    setup_cmd", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       service.submit(pub);\n        service.awaitTermination(1, TimeUnit.MINUTES);\n        service.shutdown();\n        int received = rc.get();\n        System.out.printf(\"Received %d messages from SUB%n\", received);\n    }\n}", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner instanceof FTBody) {\n                ((FTBody) this.owner).setOnSendRequestParameters(r, destination);\n            }\n            this.owner.getBody().getFaultHandler().onSendRequest(r, destination);\n            this.owner.get", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn (uint)value;\n\t\t\tif (value <= 0xFFFF) {\n\t\t\t\tvalue -= 0x100;\n\t\t\t\treturn (uint)((ushort)(", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.execute_console_command(\n            'ar -x %s %s' % (one_file.path, os.path.basename(one_file.path)),\n            descr,\n            self.fm.get_current_file(),\n            self.", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringString_ConstructorWithParameters ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (typeof (COMTest), new object[] { 1 });\n\t\t\tCOMTest objCOMTest = (COMTest", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "   def testOneOldAndOtherNew(self):\n        da = Locale.objects.get(code='da')\n        de = Locale.objects.get(code='de')\n        repo = self._setup_repo(da, de)\n        self._setup_signoffs(", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.send_message(userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        elif cmd.cmd == PYCMD_TEXTMESSAGE:\n            textmessage = mumble_pb2.TextMessage()\n            textmessage.message = cmd.", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup();\n        if (group != null) {\n            group.setLeader(player);\n        }\n    }\n    public static PlayerGroup getPlayerGroup(Player player) {\n        return player.getPlayerGroup();\n    }\n   ", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\ndef test_vltable():\n    t = vltable()\n    t.addrow([\"a\", \"b\", \"c\"])\n    t.addrow([\"1\", \"2\", \"3\"])\n    t.addrow([\"x\", \"y\", \"z\"])", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "   def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model, tree_iter = self._setup_column_and_model(1, False)\n        column._", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t}\n\twhile (parent instanceof Grid);\n\t((Grid) parent).addColumn(column);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               Image = new CreatureImage(this);\n            } catch (Exception ex) {\n                throw new Exception(\"Error loading creature \" + GUID + \":\\n\" + ex.Message);\n            }\n        }\n        private void ParseStatus(InventoryEntry entry, string status", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = new PeerlessActivation( m_Peerless, i + 1 );\n\t\t\t\t\tfrom", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(ims.vo.ChangeOfServiceVo vo : beans)\n\t\t\tcoll.add(vo);\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version(1, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbOutput = kdf.DeriveKey(pbsSalt, pbMsg, pdwLen, pvInfo,\n\t\t\t\tpParam, pdwIterCount, pvRngState);\n\t\t\tif(!MemUtil.ArraysEqual(pbOutput", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tfloat discount = 0F;\n\t\tfor(ItemStack armor : player.inventory.armorIn", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Add your custom middleware classes here.\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.Cs", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but this queue has {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueueLock) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList != null))\n                return false;\n        } else if (!this.actionTraceList.equals(other.actionTraceList))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = PhoneNumberUtils.parse(p.readString(), null);\n            dc.type = p.readInt();\n            dc.isMultipart = p.readInt() != 0;\n            dc.isVideo = p.readInt() != 0;\n           ", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata != null", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(x + leftBottomCorner.x, y + leftBottomCorner.", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_NAMESPACE, API_METHOD_ADD, testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = ((Integer) rawResult).intValue();\n\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void setSelection", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeInt(-1);\n        }\n        else {\n            out.writeInt(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                       16 + (~stactics[0][i] & 0x0f),\n                        16,\n                        pixelposition(Machine.drv.screen_width, pixelposition(Machine.drv.screen_width, 16) + 2 * (i -", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(position) <= spellData.Width)\n                                {\n                                    result.Add(target);\n                                    break;\n                                }\n                            }\n                            break;\n                        case CollisionObjectType.Wall:\n                            foreach", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       return existsInducedPath(graph, x, y, new HashSet<>());\n    }\n    /**\n     * Returns true if there is a path from x to y in the graph g, and false otherwise.\n     *\n     * @param g the graph\n     * @param x", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (pop[i] is Drawable)\n                        plcs.Push(pop[i] as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Initialize the element.\n        /// </summary>\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentId != other.attachmentId) {\n            return false;\n        }\n        if (StringUtils.isBlank(this.description) && StringUtils.isBlank(other.description)) {\n            return true;\n        }\n        if (!StringUtils", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (m_Item.From != null && m_Item.From.Alive && m_Item.From.CanSee(m))\n                            m_Item.From.SendLocalizedMessage(500447); // You throw a flask of oil at ~1", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.RemoveAt(0);\n\t\t\t\t}\n\t\t\t}\n\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId) {\n    return mock.getAvailCompoIds(sClientSpaceId);\n ", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialogFragment = ZipDialogFragment.newInstance(files);\n                    dialogFragment.show(ActionBarActivity.this.getFragment", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       if (this.channel().eventLoop().inEventLoop()) {\n            this.channel().eventLoop().execute(new Runnable() {\n                public void run() {\n                    NetworkManager.this.close(new ChatMessage(\"disconnect.generic.reason.disconnect\"));", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               z_arr = z_dict[z_key][per]\n                z_arr = np.array(z_arr)\n                z_arr = z_arr.reshape((1, 3))\n                z_arr = z_arr[0]\n", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    String names = String.join(\", \", recipients.stream().map(Recipient::toShortString).toArray(String[]::new));\n    return context.getString(resourceMany, names);\n  }\n}", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "       env = dict(os.environ)\n        env.update({'PATH': ':'.join(env['PATH'] + extra_path)})\n        if extra_lib:\n            env['LD_LIBRARY_PATH'] = ':'.join(extra_lib)\n       ", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "def load_manifest(manifest_file, tests_root, url_base=None):\n    logger = get_logger(__name__)\n    with open(manifest_file, \"r\") as f:\n        manifest_json = json.load(f)\n    manifest = Man", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       compiledScripts.remove(this);\n    }\n    private Binding createBindingForCompilation() {\n        final Binding binding = new Binding();\n        binding.setVariable(\"_\", new ScriptBinding());\n        binding.setVariable(\"_script\", new ScriptBinding(this));", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotImplementedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can set a timeout for a wrapped network layer\n        /// </summary>\n        /// <returns>True indicates we can set a timeout</returns>\n        protected virtual bool ServerCan", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass AtomicTransformer(Transformer):\n  \"\"\"\n  Transforms a dataset by transforming each atom's position and\n  converting it to a molecular graph.\n  \"\"\"\n  def __init__(self, max_num_atoms=1000, max_num", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo) obj;\n\t\tif (this.id != other.id)\n\t\t{\n\t\t\treturn this.id.compareTo(other.id);\n\t\t}\n\t\t", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n    @Test\n    public void shouldFindStacksWithNoTags() throws Exception {\n        stacks[0].getTags().clear();\n        updateAll();\n        final List<StackImpl", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION_REGEX\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// [$]\n\t\t\tif (pattern.Calls(S.Dollar))\n\t\t\t{\n\t\t\t\tif (candidate.Calls(pattern.Calls(S.Dollar).Args[0]))\n\t\t\t\t\treturn true;", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "               if (colisionList.Any())\n                {\n                    extendedFarmLocation = colisionList.First().Position;\n                    extendedWillHit = colisionList.First().HitChance;\n                    extendedWillHit += 10;\n                    extendedWillHit", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t\t// Controls\n\t\tRuntimeAnchoring anchoringHelper = new RuntimeAnchoring(runtime, form, this, startControlID, startTabIndex, designSize, runtimeSize, designLocation, runtimeLocation, designAnch", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "@task\ndef python_requirements():\n    \"\"\"\n    Install Python requirements.\n    \"\"\"\n    # TODO: This task should be split into two tasks:\n    # 1. Install Python packages from requirements.txt\n    # 2. Install Python packages from edx_platform/require", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'sub': self.env.ref('test_testing_utilities.sub_record_1'),\n        })\n        f = Form(r)\n        with f.sub_ids.edit(get=lambda r: r.name) as sub_ids:\n            sub_ids", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, a, b)).change_index((a, b), (b, a)) == Sum(x, (x, b, a))\n    assert Sum(x, (x, a, b)).change_index((a, b), (b, a", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif (argc==1) {\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(action, changedItems, startingIndex);\n            }\n        }\n        private void InitializeAddOrRemove(NotifyCollectionChangedAction action, IList changed", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           String xml = writer.toString();\n            InputStream is = new ByteArrayInputStream(xml.getBytes());\n            XMLStreamReader xmlStreamReader = xmlStreamReaderFactory.createXMLStreamReader(is);\n            XMLStreamReaderHandler handler = new XMLStreamReaderHandler(xmlStreamReader, st", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName = Token2Csv();\n                    break;\n                case Param.CampusStatus:\n                    c.CampusStatus", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  ImageSize: {0}\", ide.imageSize", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // adds the JSR instruction to the RET instruction\n                if (l.successors != null) {\n                    for (Edge e = l.successors; e != null; e = e.next) {\n                        if (e.target.status == Label.TARGET_", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            UnityEngine.Ray __this = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(StackObject.ToObject(ptr_of_this_method, __domain, __", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabel.setText(position.toString());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\n\t\t\tif(comboLabel.getText().equals(\"Inside\"))\n\t\t\t\treturn Position.INSIDE;\n\t\t\treturn Position.", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getImageValue()\n        self._setImageValue( currImageValue - 1 )\n        newImageValue = self._getImageValue()\n        self.assertEqual( newImageValue, currImageValue - 1 )\n\n        # Test that the decrement", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "=====================\n\nclass KexGSS(object):\n    \"\"\"\n    This class implements the GSS-API key exchange method.\n    \"\"\"\n    def __init__(self, transport):\n        self.transport = transport\n        self.kexgss = None\n        self.", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           FileSystemNode newFolder = FileSystemNodeManager.getInstance().getFileSystemNode(connectionData);\n            if (newFolder != null) {\n                FileSystemNodeManager.getInstance().removeFileSystemNode(newFolder);\n            }\n            DatabaseNode newDatabaseNode = new DatabaseNode", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "               self.cr.execute(\"SELECT sum(number_of_days) as number_of_days, sum(number_of_hours) as number_of_hours \\\n                                FROM hr_payslip_worked_days as wd \\\n                              ", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   mf, dlnm = halo_mass_function(marr, zarr, omega_m, omega_b, h, n, sigma, delta_c, delta_v, alpha, beta, gamma, epsilon, nu, mu, sigma_s", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.height = font.getSize() + getSettings().getLineHeight();\n        return d;\n    }\n    /**\n     * Overrides FigText's method to return a new FigText with the same\n     * properties.\n     *\n     * @return a new Fig", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "#self.cal_p2()\n#self.cal_os1()\n#self.cal_os2()\n#self.cal_dist()\n#self.cal_theta()\n#self.cal_phi()\n#self.cal_cutting_plane()\n#self", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void SecuritiesClick(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "=====================\n\nclass _Hist3D(Hist):\n    def __init__(self, *args, **kwargs):\n        Object.__init__(self)\n        self.hist = ROOT.TH3F(*args, kwargs['title'],\n            kwargs['xedges'], kwargs['y", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterStorage rosterStorage = RosterStorage.getInstance(protocol.getConnection());\n            RosterItem rosterItem = rosterStorage.getRosterItem(contact.getUserId());\n            if (rosterItem != null) {\n                rosterItem.setLastMessage(", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "       im1L = im1.convert(\"L\", rgb2I)\n        h1 = im1L.histogram()\n        # compute the transform\n        t = self.computeTransform(h0, h1, scale)\n        # apply the transform to the original image\n       ", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (tag.getSFI() == 0x00) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t}\n\t\tfinal int len = tag.getLength();\n\t\tfinal int rlen = len - 2;\n\t\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "=====================\n\nclass ACE(Block):\n    def __init__(self, parent, name):\n        Block.__init__(self, parent, \"ACE\", \"ACE entry\")\n        self[\"name\"] = name\n\n# This is the end of the code provided.\n# The code", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter = null;\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n        path_info = environ['PATH_INFO']\n        for prefix, app in self.apps:\n            if path_info.startswith(prefix):\n                return app(environ, start_response)\n        raise NotFoundError(path_info)\n\n        # The", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.train()\n\t\tmodel.savemodel( sys.argv[ 3 ] )\n\telse : print \"Usage : python %s <datafile> <outputmodel", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.RandomDouble() < (double)chance / 100.0)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n\nI'd like to", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n        entries[entry_name] = entry_value\n\n        return typing.NewType(type_name, **entries)\n\n        # This is a user-defined enumeration type.\n        # The name of the enumeration is 'type_name'.\n        # The enumeration", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Unable to find any modules to configure.\");\n                    this.Close();\n                }\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (pnlServices.Controls.Count > ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return obj == null ? true : obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(this.textureArray[textureHash] != null)\n                {\n                    if(this.textureArray[textureHash].getImage() != null)\n                   ", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "@login_required\n@add_csrf_protection\n@handle_exception\n@handle_exception_json\n@handle_exception_json_with_message\n@handle_exception_json_with_message_and_status\n@handle_exception_json_with_message_and", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver driver = idlePool.Dequeue();\n                    if (now.Subtract(driver.IdleSince).TotalMinutes > Settings.Default.IdleConnectionTimeout)\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   return [var] if name in ('resolution', 'radius') else var\ndef _verify_list(var, name):\n    \"\"\"\n    Checks that the list is of the correct length and that all elements are numbers.\n    \"\"\"\n    if not isinstance(var, (list,", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the quest\n# This line is needed to register the quest with the system.\n# It will be read by the GM when they compile the game.\n# If you want to test the functions without logging into the game,\n# you can use the \"registerQuest\" method that will register this\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60) / 100);\n\t\t\t\t\tempty = string.Format(\"", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           // Initialize the shader program\n            Program = GL.CreateProgram();\n            GL.DetachShader(Program, GL.CreateShader(ShaderType.VertexShader,\n                System.IO.File.ReadAllText(\"VertexShader.glsl\")));\n            GL.DetachShader(", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def add_reaction(self, reaction):\n        \"\"\"Add a reaction to the model\"\"\"\n        self.reactions.append(reaction)\n        reaction._model = self\n        reaction._metabolites = {}\n        for metabolite in reaction.metabolites:\n", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(ims.clinical.admin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(TumourGroupListVo.buildFromBean(bean));\n\t\t}\n\t\treturn coll;\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent = lines[selectedLine];\n\t\t\t\twhile(current!=null){\n\t\t\t\t\tif(current.contains(x, y)){\n\t\t\t\t\t\treturn current;\n\t\t\t\t\t}\n\t\t\t\t\tcurrent = P", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       new LayoutAnimationController(set, 0.2f);\n        mListView.setLayoutAnimation(controller);\n    }\n\t\n\t/**\n\t * Fill the list with data.\n\t */\n\tprivate void fillList(List<WeatherItem> items) {\n\t", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldInterestKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldInterestKey;\n                }\n            }\n            ARow.SetFieldInterestKey(HighestNumber + ", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tInstance instance = this.dataset.instance(i);\n\t\t\t\n\t\t\t// Copy the values from the instance to the protein\n\t\t\tfor (int j = ", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
