{"pred": "   private final transient KademliaRoutingTable routingTable;\n    private final transient KademliaRoutingTable bootstrapTable;\n    private final transient KademliaRoutingTable closestTable;\n    private final transient KademliaRoutingTable furthestTable;\n    private final trans", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       mEffects.add(new NoEffect());\n        mEffects.add(new SobelEdgeDetection());\n        mEffects.add(new SobelEdgeDetectionHorizontal());\n        mEffects.add(new SobelEdgeDetectionVertical());\n        mEffects.add(", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class MyCipher1(Cipher):  # noqa: D101\n    key_schedule = KeySchedule1\n    encryption = MyFunction\n\n\n# 2nd cipher: linear key schedule and encryption with XOR and rotations\n\nclass MyFunction2(Encryption):", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n\n    public EffectManager(Activity activity, ViewGroup parameterListView, SpectaculumView spectaculumView) {\n        mActivity = activity;\n        mParameterListView = parameterListView;\n        mSpectac", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateIntervalCommand.class, UpdateIntervalEvent::fromCommand, this::queueEvent));\n", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "   private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务队列\n     */\n    private ArrayList<Task> taskQueue = new ArrayList<>();\n\n    /**\n     * 任务队列锁\n     */\n    private Object taskQueueLock = new", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.path(), passphrase.chars(), args.checkFileIntegrity());\n\t\t\tif (problems.isEmpty()) {\n\t\t\t\tprintNoProblems();\n\t\t\t\treturn;\n\t", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           //save public key to shared preferences\n            DatabaseManager.getInstance().getDatabaseManager().getDatabase().savePublicKey(deviceId, pubKeyInBase64);\n\n            //save deviceId to shared preferences\n            DatabaseManager.getInstance().getDatabaseManager().getDatabase().saveDeviceId(", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   Uint8List appId = APP_ID_SIGN;\n    Uint8List challenge = SERVER_CHALLENGE_SIGN;\n    String origin = ORIGIN_SIGN;\n    String accountName = ACCOUNT_NAME;\n    String appName = APP_", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           self.acctA = RadiusAccounting(self.uaA, self.uaO, self.uaS, self.uaC, self.uaT, self.uaD, self.uaL, self.uaR, self.uaI, self.uaP, self.", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\nclass URI(Signature):\n    __typeid__ = -1\n    __slots__ = ('_uri', '_creation_time', '_expiration_time', '_compression_method', '_signature')\n\n    def __init__(self, uri, creation_time=None,", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "=====================\n\ndef convert_ast_constraint(ast_node):\n  \"\"\"\n    Converts an AST node to a constraint.\n  \"\"\"\n  if ast_node is None:\n    return None\n\n  if isinstance(ast_node, ast.UnaryOp):\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, TwitchPlaylist playlist) {\n        if (activity != null && playlist", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       String city = getCity(latitude, longitude);\n        String country = getCountry(latitude, longitude);\n        String language = getLanguage();\n        String timeZone = getTimeZone(latitude, longitude);\n        String timeZoneOffset = getTimeZoneOffset(lat", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "```python\nnetwork = Network('test_pipeline')\n```\nThis line of code creates a new network named 'test_pipeline'.\n\nThe following lines of code set up the network with some layers:\n```python\n# Linear.\nnet.add_layer(InputLayer(", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "```python\nclass BaseModel(Base):\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n        self.__init_subclass__()\n        self.Meta = Meta()\n        self.Meta.model_name = self.__class__.__", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "```python\n@method\n@register(1, 1)\ndef select_nodes(self, context):\n    \"\"\"\n    Selects nodes that match the given expression.\n\n    :param context: The XPath evaluation context.\n    :return: A list of nodes that match the", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapTransformation(),\n                    new PosterizeTransformation(),\n                    new RGBAdjustTransformation(),", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    @Inject Movie movie;\n    @Inject List<Movie> similarMovies;\n    @Inject List<Rating> ratings;\n    @Inject List<Trailer> trailers;\n    @Inject List<Movie> movieList;\n    @Inject MovieInfoPresenter", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(instance, correlationId);\n\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(Collections.EMPTY_MAP, correlationId);\n                log.debugf(\"[%s] CreateMBean - Instance already exists\", e.getMessage());\n           ", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "=====================\n\n        wild.set_message(wild_report)\n        wild.set_location(location)\n        await wild.insert()\n\n        await wild.monitor()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "```python\ndata = SNLIData(\n    part=\"train\",\n    path=\"data/snli_1.0/snli_1.0_train.jsonl\",\n    num_examples=c['num_examples'],\n    batch_size=c['", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n\n  # This test is not valid as DopplerSine is not defined in the code\n  # provided.\n\n  # The correct test would be:\n  # assert isinstance(doppler, Doppler)\n  #", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivity(intent);\n\n            } else if (isWoman(mParticipantFortunate))", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "=====================\n\nclass RedlockTests(TestCase):\n    'Redlock tests.'\n\n    def setUp(self):\n        'Set up the Redlock instance.'\n        self.redlock = Redlock(\n            masters={\n                'localhost': {\n                    'port", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "class Sound(FMOD.Sound):\n    \"\"\"Container for a sound file or stream.\n\n    :ivar int length: Length of the sound in samples.\n    :ivar int channels: Number of channels.\n    :ivar int frequency: Sampling frequency.\n    :ivar", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "\n    @calg.register(CompressionAlgorithm)\n    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n\n    @sdproperty\n    def data(self):\n        return self._data\n\n    @data.register(", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n\n        # intensity of cells\n        findCellIntensity(imgshape, verbose = verbose, out = out, **parameter);\n        \n        # cell intensity thresholding\n        imgshape =", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           Assets.perfectTapSound.play();\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play();\n        } else if (accuracy == Accuracy.GOOD) {\n            Assets", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\r\n                Transaction transaction = transactionIterator.next();\r\n                printer.print(transaction);\r\n                System.out.println(print.toString());\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private boolean checkDirectory", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               //return pgm;\n            }\n        }\n        return pgm;\n    }\n\n    /**\n     * This method is used to execute a query. It accepts a query as a string\n     * and returns a list of Druid's DruidRow.\n     *", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                   Usage=Usage.OWN,\n                    Operation=Operation.ENCRYPT,\n                    Key=Key.SYMMETRIC,\n                    Algorithm=EncryptionAlgorithmCoded.NULL,\n                    KeyLength=KeyLength.NULL,\n                    Key", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.combExpCheck[i] != null) {\n                                regexpError(ErrorType.REGEXP_ERROR_BAD_BACKREF,\n                                        \"Invalid backreference: \" + i,\n                                        getBeginPos(), getEndPos());\n                ", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "=====================\n\napp_name = 'dashboard'\n\nurlpatterns = [\n    # ...\n]\n\nurlpatterns += app_name + '.' + urls.reverse_suffix('')(api_urls)\nurlpatterns += app_name + '.' +", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic ResourceData (Meter meter, Resources res) {\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = new EnumMap<SRSLevel, String> (SRSLevel.class);\n\t\t\tthis.colors = new EnumMap", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "   def set_storage_type(self, storage_type):\n        if storage_type in STORAGE_TYPES:\n            self._storage_type = storage_type\n        else:\n            raise ValueError(\n                \"Invalid storage type: \" + storage_type\n            )", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public GivenWhenSteps<$SystemUnderTest<$SystemUnderTestType, $ArgumentType, $ResultType>, $ArgumentType>\n    when($SystemUnderTestType systemUnderTest, $ArgumentType argument) {\n        return new GivenWhenSteps<>(preparation, systemUnderTest", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "   CommandResult result = await(process);\n    if (expectedExitCodes != null && !Arrays.asList(expectedExitCodes).contains(result.exitCode)) {\n      throw new IosDeviceException(\n          RealDeviceImpl.this,\n          String.format(\n              \"Expected", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = PreferenceManager.getDefaultSharedPreferences(contextRef).getInt(Keys.TEXT_COLOR);\n\t}\n\t\n\tprivate void setTextSize() {\n\t\ttextSize = PreferenceManager.getDefaultSharedPreferences(contextRef).getInt(Keys.TEXT_SIZE);\n", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage msg = XmlUtil.fromXml(xml, Message.class);\n\t\tif (msg instanceof ReceivedTextMessage) {\n\t\t\tReceivedTextMessage textMsg = (ReceivedTextMessage) msg;\n\t\t\tString text = textMsg.getText();\n\t\t\t", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "# 检查以上目录是否存在，如果存在则认为已经运行过该 apk 文件。\nif os.path.exists(os.path.join(UPLOAD_DIR, file_path.split('/')[-1].split('.')", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @command(pass_context=True, name='city', category='Bot Info', aliases=[\"raid-city\", \"rc\"])\n    @checks.is_owner()\n    async def cmd_city(self, ctx):\n        \"\"\"\n        sets the city for the raid party", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertEqual(date_string_to_date(\"25/12/2016\"), datetime(2016, 12, 25))\n\n    def test_date_strings_with_slashes(self):\n        self.assertEqual(date_", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file, 'config_dir')\n        config_actor.start()\n\n        # startup database actor\n        database_actor = DatabaseActor()\n        database_actor.start()\n\n        # startup database actor\n        database_actor = DatabaseActor", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           ShareUtil.shareText(mActivity, pictureUrl, \"分享一张图片\", false);\n                            break;\n                        case 1:\n                            ShareUtil.shareText(mActivity, pictureUrl, \"分享一张图片\", true);\n                           ", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\tfor i in range(num_contrasts):\n\t\t\t\t\t\tsave_surface(image, 'paint_%d.ply' % i, vertex_indices, vertex_normals, vertex_colors, surface_vertices, surface_normals, surface", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               Response.class,\n                Response.Builder.class,\n                ContentResolver.class,\n                AccountManager.class,\n                AccountManagerCallbacks.class,\n                AccountManagerFuture.class,\n                AccountManagerResponse.class,\n                AccountManager", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "=====================\n\nclass SignatureV4(SignatureV4):\n    \"\"\"\n    This is a version 4 signature packet.\n\n    It contains a hash of the packet data, and the signature itself.\n    \"\"\"\n\n    def __init__(self, packet, pubkey, sig", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "```python\n@method\ndef select_self(self, context=None):\n    if context is None:\n        raise self.parser.error(self.parser.XPathError.XPATH_ERR_NO_CONTEXT)\n\n    if isinstance(context, AbstractXPathContext):", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "=====================\n\n    'no_members': Counter,\n      'no_members_max': Gauge,\n      'no_members_min': Gauge,\n      'no_members_avg': Gauge,\n      'no_members_stddev': Gauge,\n", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       message = {\n            'public_key': '0123456789abcdef0123456789abcdef0123456789abcdef',\n            'version': self.version,\n            'message': '", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       assertEquals(\"SELECT * FROM users WHERE id = ?\", qe.getQuery());\n        assertEquals(1, qe.getParameters().size());\n        assertEquals(Types.INTEGER, qe.getParameters().get(0).getType());\n        assertEquals(1, qe.getParameters", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n        Assert.assertThat(ds, executions(0, not(success())));\n        Assert.assertThat(ds, executions", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               continue\n\n            # Send the ADR request\n            log.info(\"Sending ADR request to device: {}\".format(device.address))\n            yield self.sendMACCommand(device, MAC_ADR_REQUEST)\n\n            # Update the device's last_rx", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "=====================\n                    function = FmllrRescoreFunction(\n                        self.working_directory,\n                        self.final_fmllr_paths,\n                        self.final_fmllr_deltas,\n                        self.final_fmllr_", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# IEEE 802.15.4-2003/10-2006, 11.3.2.1\n#\n# Frame format\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       ObservableRegistry.register(this);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRetainInstance(true);\n\n        Bundle args = getArguments();\n        if (args", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "=====================\n\nclass HITANS6(HITANSBase):\n    parameter = DataElement(name='parameter', length=1, encoding='binary')\n    tan_medium = DataElement(name='tan_medium', length=1, encoding='binary')\n    tan_", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "       ref_time = self.img_handle.getReferenceTime()\n\n        # Convert to datetime\n        ref_time_dt = jd2dt(ref_time)\n\n        # Save reference time\n        json_ref_time = ref_time_dt.strftime('", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       if (mPublicRoomsListList != null) {\n            mPublicRoomsListList.clear();\n        }\n        mPublicRoomsListList = new ArrayList<>();\n        mHomeScreenHandler.post(new Runnable() {\n            @Override\n            public void run()", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "```python\n@group(name=\"bingo\", invoke_without_command=True)\nasync def bingo(ctx):\n    await ctx.send(\"Bingo is a game of chance. You can play it by typing `!bingo <event>` or `!bingo <event", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "```python\n        chim_detect = ChimeraDetector(raw_bp_graphs=raw_bp_graphs,\n                                    run_stages=[\"2\"],\n                                    run_threads=args.threads,\n                                    run_debug=args.debug", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new BlockLockListener(this), this);\n        plugins.registerEvents(new BlockUnlockListener(this), this);\n        plugins.registerEvents(new BlockLockListener(this), this);\n", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   initMiPush();}\n                stopGCM();\n                stopHwPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HwPush\":\n                if(shouldInit()) {", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (NOTIFICATION ^ RESPONSE_MASK), new NotificationHandler());\n        registry.put((byte) (QUERY_MBEAN_SERVER_INFO ^ RESPONSE_MASK), new MarshalledResponseHandler<Object>(OBJECT));\n        registry", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public PersonalVulnsWindow() {\n        initComponents();\n        initListeners();\n        initTree();\n        initTreeListeners();\n        initTreeCellRenderer();\n        initTreeModel();\n        initTreeSearch();\n        initTreeSort();\n        initTreeMerge();\n        init", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   private void createAllCharts() {\n        datasetGenerator = new DatasetGenerator();\n        datasetGenerator.addListener(this);\n        datasetGenerator.setGcStats(gcStats);\n        datasetGenerator.setGcTrace(gcTrace);\n        datasetGenerator.setGcTrace", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.getType() == PacketType.CONNECT) {\n            onConnect(packet, client, transport);\n        } else if (packet.getType() == PacketType.DISCONNECT) {\n            onDisconnect(packet, client, transport);\n        } else if (packet", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       videoSource = factory.createVideoSource(videoCapturer, appRtcClient.videoConstraints());\n      } else {\n        videoSource = factory.createVideoSource(videoCapturer);\n      }\n      videoSource.setVideoSource(videoSource);\n      videoSource.addTrack", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 0);\n\n            return contentValues;\n        }\n\n        protected void onCreateInner(SQLiteDatabase db) {\n            db.execSQL(JobStorage.CREATE_TABLE);\n        }\n\n", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "=====================\n\n# Create a publisher\npublisher = Publisher()\n\n# Create a CopyNet\ncopy_net = CopyNet(basedir=basedir, publisher=publisher)\n\n# Create a CopyMaster\ncopy_master = CopyMaster(copy_net=copy_net", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "=====================\n\n        self.setup_docker_config_options(docker_config)\n        self.setup_docker_config_environment(docker_config)\n        self.setup_docker_config_extra_args(docker_config)\n        self.", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   Observable.fromIterable(Arrays.asList(SectionNames))\n        .flatMap(new Function<String, ObservableSource<Board>>() {\n          @Override public ObservableSource<Board> apply(@NonNull String sectionName) throws Exception {\n            return Observable.fromCallable(new Call", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       Log.d(\"SearchContactFragment\", \"onStart()\");\n        //Observable observable = Observable.create(new Observable.OnSubscribe<Integer>() {\n        //    @Override\n        //    public void call(Subscriber<? super Integer> subscriber) {\n        //       ", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tICompilationUnit cu = JDTUtils.createCompilationUnit(model.getProject(), model.getPackage(), model.getClassName(), monitor);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       simulator_data_client = SimulatorDataClient()\n        simulator_data_listener = MockSimulatorDataListener()\n        simulator_data_client.add_simulator_data_listener(simulator_data_listener)\n\n        simulator_data_datagram =", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           String response = new String(httpMessage.getRes().getResponse());\n            String request = new String(httpMessage.getReq().getRequest());\n            String comment = \"\";\n            if (httpMessage.getTable() != null) {\n                comment = \"Table: \" + http", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "\ndef test_simple_status():\n    \"\"\"Status is busy because table isn't ACTIVE, no GSIs\"\"\"\n    description = {\"TableStatus\": \"BACKUP_IN_PROGRESS\"}\n    assert simple_status(description) is None\n\ndef test_status_with", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "=====================\n\nclass IffID3(IffChunk):\n    \"\"\"An ID3 chunk in an IFF file\"\"\"\n\n    def __init__(self, fileobj, offset, size):\n        super().__init__(fileobj, offset, size)\n        self.version =", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitCheckForProximity(new VisitCheckForProximity.ProximityCheck() {\r\n        if (nestingDepth > 0) {\r\n          throw new RuntimeException(\"Proximity search cannot be nested\");\r\n        }\r\n\r\n        if (query != null) {\r", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new EdgeDetectTransformation(),\n                    new EdgeDetectTransformation().setEdgeThreshold(.5f),\n                    new EdgeDetectTransformation().setEdgeThreshold(.2f),\n                ", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "```python\n            if self._header[0] == 1:\n                exception_class = self._decode_field( FIELD_ERROR_CLASS )\n                exception_message = self._decode_field( FIELD_ERROR_MESSAGE )\n                raise exception_class(", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "=====================\n\napi = DERBMDATA(args.apikey)\n\nThe code above is incomplete and needs to be completed to make it functional. Here's a suggested completion:\n\nFirst, you need to define the `DERBMDATA` class that inherits from `", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum();\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage();\n\t\t\t}\n\t\t\titem.copyFrom( proxy );\n\t\t\titems.add( item );\n\t\t}\n\t\treturn items", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   user_key = dump_key(engine, user)\n    assert user_key == {\"id\": {\"S\": \"foo\"}}\n\n\ndef test_load_key():\n    user_key = {\"id\": {\"S\": \"foo\"}}\n    user = User.load(", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new TaskName(\"MyTask\")),\n        StaticString.SPACE,\n        new Spinner(Spinner.SPINNER_DASHES),\n        StaticString.SPACE,\n        new Progression(100),\n        StaticString.SPACE,\n        new", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "public static Iframe iframe(Attribute... attributes) {\n\t\treturn new Iframe(attributes);\n\t}\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\tpublic static H2 h2(Attribute...", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "=====================\n\nevents.append(Event(e))\n\nreturn events\n\n    def list_devices(self, params=None):\n        data = self.call_api(\"GET\", \"/devices\", params=params)\n        devices = list()\n        for device in data[\"data", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   Matcher<? super BatchParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////\n    // PreparedStatementHolderAssertions\n    //////////////////////////////////////////////////////////////////////////////", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           if (mWallpaperManager.isFactorySupported()) {\r\n                WallpaperManager wallpaperManager = (WallpaperManager) getSystemService(Context.WALLPAPER_SERVICE);\r\n                WallpaperManager.Request request = new WallpaperManager.Request();\r\n                request.", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "\n  private static final Map<Operator, Boolean> BOOLEAN_OPERATORS = new HashMap<Operator, Boolean>();\r\n  static {\r\n    BOOLEAN_OPERATORS.put(Operator.AND, true);\r\n    BOOLEAN_OPERATORS.put(Operator.OR", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\n\t\tif len(args.genome)==0:\n\t\t\tprint 'WARNING: You should define genome folder for converting'\n\t\t\tprint '         (for example: --genome /path/to/genome/folder)'\n\t\t\tprint '         or", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "=====================\n        self.beginning_datetime = filenameToDatetime(os.path.basename(self.vid_path))\n\n        # Get the FPS of the video\n        self.fps = self.vidinfo.head(1).get('FPS')\n\n", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "# 3. create image\nim = models.Image(shape=(1024, 1024), dtype=np.float32,\n                background=np.zeros((1024, 1024), dtype=np.float32),\n", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tFoodTracker.sync(player);\n\t}\n\n\tpublic static void setInStone()\n\t{\n\t\tFoodTracker.FoodTracker.setInStone();\n\t}\n\n\tpublic static void setInStone(EntityPlayer player)\n\t{", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "=====================\n\ndef view_post(request, pk, username, slug):\n    post = get_object_or_404(Post, pk=pk, user__username=username, slug=slug)\n    if post.deleted:\n        messages.error", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tISelection selection = new StructuredSelection(selectedCells.iterator().next());\n\t\t\t\t\t\tsetSelection(selection);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tISelection selection = new Structured", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   @keyclass.register(RevocationKeyClass)\n    def keyclass_revocationkeyclass(self, val):\n        self._keyclass = val\n\n    @sdproperty\n    def key(self):\n        return self.keyid.get_key()\n\n    @", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "```python\n        if issubclass(type(item), XPathNode):\n            yield item\n```\nReplace it with:\n```python\n        if issubclass(type(item), (Text, Comment, ProcessingInstruction, Element)):\n            yield item\n```\n", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "\ndef handlePufflePacket(client, packet):\r\n    if packet.startswith('pp'):\n        puffles = client.puffles\r\n        puffle_packet = packet[2:]\r\n        puffle_data = puffle_packet.split('|')\r\n\r", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "\nfig, ax = interaction.make_figure(size=(10,10), title='Test')\n\nfig.canvas.draw()\nfig.canvas.tight_layout()\nplt.show()\n\nfig, ax = interaction.make_figure(size=(10,", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "```python\n        with mp.Pool(processes=self.num_cpus) as pool:\n            results = pool.map(compile_information_func, jobs)\n        self.compile_info = {k: v for k, v in zip(jobs, results)}\n", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "=====================\n\n# Recompute the rotation wrt horizon\nplatepar.rotation_from_horizon = RA_from_hour_angle(platepar.Hour_angle)\n\n# Update the pointing solution\nplatepar.update_pointing_solution()\n", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_INTERVAL_MS, validInterval(validInterval) ? 10_000L : 0L);\n        contentValues.put(JobStorage.COLUMN_BACKOFF_MS, 5_000L);\n", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       FragmentManager manager = getFragmentManager();\n        FragmentTransaction transaction = manager.beginTransaction();\n        mDelAdapter = new UserListAdapter(getActivity(), new ArrayList<User>(), getActivity().getSupportFragmentManager());\n        transaction.replace(R.id.container, mDel", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "class ProgressFilter(django_filters.FilterSet):\n    indicator = django_filters.ModelChoiceFilter(name='component__indicator',\n                                               queryset=Indicator.objects.all())\n    area = django_filters.ModelChoiceFilter(name='area',\n                                          query", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           presenter.getProduceData().updateDatabase(produces, presenter.getProduceData().getCategory());\n            presenter.getProduceData().updateBookmarks(produces, presenter.getProduceData().getCategory());\n            presenter.getProduceData().", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "           @Override\n            protected void onFailure(final Throwable cause) {\n                LOGGER.error(\"Failed to reconnect transport\", cause);\n\n                context.handleError(cause);\n            }\n        }).then(new OnSuccess<Channel>() {\n            @Override\n", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               new RegistrationParam(success, email));\n    }\n\n    public static class RegistrationParam extends RegisterFragment.RegistrationParam {\n        private long userId;\n\n        public RegistrationParam(boolean success, String email) {\n            super(success, email);\n            this.userId", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final Router<Road> router;\n\n    /**\n     * Creates a new {@link Matcher} instance.\n     *\n     * @param map {@link RoadMap} object to be used for map matching\n     * @param router {@link Router} object to be used", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private FilterUrl filterUrl;\n    private FilterType filterType;\n    private List<FilterType> filterTypes;\n    private List<FilterUrl> filterUrls;\n    private List<FilterType> filterTypes_left;\n    private List<FilterUrl> filterUrls_left", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " message = args.gps_sv[0].getMessage()\n  assert isinstance(message, ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  GPS SV message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "=====================\n\n        with self.temp():\n            self.display_list = glGenLists(1)[0]\n            glNewList(self.display_list, glMode.GL_QUADS)\n\n            for tri in tris:\n                self._render", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"A\")) {\n\t\t\t\t\ta = new AppData(data.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\ta = new ShortcutData(data.substring(1));\n\t\t\t\t", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppInfoAction.isShow && AppInfoAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppInfoAction.class);\n                }\n                if (ClipboardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt, self.beg_az = ra2altaz(self.beg_vect, self.lat, self.lon)\n        self.end_alt, self.end_az = ra2altaz(self.end_vect, self.", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope;\n\t\tMethSymbol m = new MethSymbol(s);\n\t\tMethSymbol m2 = new MethSymbol(s); // for Java method\n\t\tm2.isJavaMethod = true;\n\t\tM", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "public boolean visit(Node node) {\n    return enter(node);\n}\n}\n\n/**\n * Visitors that need to add nodes to the tree can implement this interface.\n */\npublic interface NodeAdditionVisitor {\n\n    /**\n     * Called when the visitor reaches a node", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    public OpenAPIProcessor(ProcessingEnvironment processingEnv) {\n        super(processingEnv);\n        requireNonNull(processingEnv);\n\n        this.typeUtils = processingEnv.getTypeUtils();\n        this.filers = processingEnv.getFiler();\n        this.rounds = processing", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritSettings.class);\n\n        bind(GerritSettingsProvider.class);\n        bind(GerritSettingsComponent.class);\n\n        bind(GerritSettingsComponent.Factory.class);\n        bind(GerritSettingsComponent.Factory.class).", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   File snapshot = snapshots.get(i);\r\n                    long zxid = getZxid(snapshot);\r\n                    if (zxid >= zxid) {\r\n                        snapFile = snapshot;\r\n                        break;\r\n                    }\r\n                    i--;\r", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "=====================\n        entries = [e for e in entries if txn_matches_query(e, query)]\n        if filter_type is not None:\n            entries = [e for e in entries if e.filter_matches(filter_type)]\n        self._account_entries[", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   def __init__(self, CallName='', **kwargs):\n        super(segment, self).__init__(CallName, **kwargs)\n        self.set_trans(self.parse_marker)\n        self.set_in_block(True)\n        self.set_in", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Api.api().getSearch(query)\n\t\t\t\t\t\t\t.map(results -> {\n\t\t\t\t\t\t\t\tif (results.isEmpty()) {", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "# 2. background\n# 2.1. background image\n# 2.1.1. create a random image\n# 2.1.1.1. create a random image of size 100x100x100\n# 2.1.1", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "=====================\nif len(left.values) != len(right.values):\n    raise ValueError('The number of rows in the left and right columns must be equal.')\n\nresult, index = apply_fast_and(left.values, right.values)\nreturn Column(result,", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request != null) {\r\n                        stringBuilder.append(\"\\nRequest: \")\r\n                            .append(request.getName())\r\n                            .append(\" - \")\r\n                            .append", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "=====================\n\nclass AbstractDateTime(metaclass=AtomicTypeMeta):\n    \"\"\"Abstract base class for all date-time types.\"\"\"\n\n    def __init__(self, year: int, month: int, day: int, hour: int, minute: int, second: int,", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           return SearchMenuPage()\n        if pageletId == 'Mediathek':\n            return Mediathek()\n        if pageletId == 'LiveTv':\n            return LiveTv()\n        if pageletId == 'Epg':\n            return Epg()\n", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "           if not checkFileExistence(pattern.get(\"DataFile\")):\n                errormsg = \"Pattern:  %s, DataFile:  %s, does not exist!\"%(pattern.name, pattern.get(\"DataFile\"))\n                errormsg += \"\\nPlease", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "=====================\n    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\n    filter_class = ThemeFilter\n\nclass Sector", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "private StarItemAdapter starItemAdapter;\nprivate List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n\n    private Commit", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService service = new GenerationService(ddlService, preprocessingService, postprocessingService,\n\t\t\t\tpreprocessingService, preprocessingService, preprocessingService, preprocessingService,\n\t\t\t\tpreprocessingService, preprocessingService, preprocessingService, preprocessingService,", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       new UserLoginTask().execute(user);\n                    }\n                });\n\n        alertDialog = alertDialog.create();\n        alertDialog.show();\n    }\n\n    @Override\n    public void onBackPressed() {\n        if (alertDialog != null)", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "\n    url(r'^$', login_required(PackageSettingsView.as_view()), name='package-settings'),\n\n    url(r'^$', login_required(PackageSettingsView.as_view()), name='package-settings'),\n    url(r'^$',", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "```python\nencoder = GPSL1L2BitEncoder(NormalConfig)\n```\nAssuming `NormalConfig` is a valid configuration object, this line of code constructs a GPS L1/L2 single bit dual band encoder. The encoder is an instance of `TwoBands", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "class TestSave(unittest.TestCase):\n    def setUp(self):\n        self.inputTg = textgrid.open(\"test_data/test_save.TextGrid\")\n\n    def test_save_and_load(self):\n        outputTg = self.input", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "```python\n                    p = KmpProcess(i, return_value=True, return_values=(str, str), args=(function, error_q))\n                    p.start()\n                    procs.append(p)\n```\nThis code creates a new process for", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "           dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = '/mnt/data/datasets'\n        for dataset_name in ['GOT1", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void set(FixTag tag, Object value) throws InvalidValueException;\n}\n\npublic interface TagValue {\n    Object getValue();\n}\n\npublic interface TagValueConsumer<T> {\n    void accept(T tagValue);\n}\n\npublic interface TagValueSupplier<", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "=====================\n\nyield self._load_chunk(n_samples, chunk_idx=chunk_idx)\n\n# -----------------------------------------------------------------------------\n# Helper functions\n# -----------------------------------------------------------------------------\n\ndef _load_chunk(self, n_samples, chunk_idx", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlternativeQueryNode alternativeQueryNode, Void param) {\n\t\t\tExpansionResult left = expandQuery(fieldOptions, expanderOptions, alternativeQueryNode.getLeft());\n\t\t\tExpansionResult right = expandQuery(fieldOptions, exp", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t}\n\n", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectName>(ObjectName.class));\n        registry.put((byte) (CREATE_MBEAN_SERVER ^ RESPONSE_MASK), new MarshalledResponseHandler", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       String language = lp.detect(content);\n                        String languageCode = language.substring(0, 2);\n                        String languageName = language.substring(0, language.indexOf(\" \"));\n                        String languageDetected = languageCode;\n                        String languageDet", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "=====================\n\n        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{} {} {}'.format(indent, descriptor.op_symbol,\n                                          self._render_descriptor(descriptor.left),\n                                          self._render_descriptor(descriptor.right)))", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "\n    group.add_argument(\n        \"--delay\",\n        dest=\"latency_time\",\n        help=\"network latency [time].\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       try:\n            contact = Contact.objects.get(phone_number=self.phone_number)\n        except Contact.DoesNotExist:\n            contact = None\n        except MultipleObjectsReturned:\n            contact = Contact.objects.get(phone_number=self.phone", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   pipeline.apply(\"Read live projects\", LiveProjectSource.create(org.apache.beam.sdk.options.PipelineOptions.asOptions(options), org.apache.beam.sdk.options.StandardOptions.projectId(projectId), org.apache.beam.sdk.options", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.generator = SimilarPathGenerator()\n\n    def test_get_pattern_for_directory(self):\n        self.assertEqual(self.generator.get_pattern(\"/test/\"), \"/{}/\")\n        self.assertEqual(self.generator.get_pattern(\"/test/\"), \"/", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ff", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(AndCondition(*[condition_for(x) for x in operations if x]))\n    if \"or\" in operations:\n        conditions.append(OrCondition(*[condition_for(x) for x in operations if x]))\n    if \"not\" in operations:\n", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 1\n        assert get_square_idx(0, 2) == 2\n        assert get_square_idx(1, 0)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final IType testType;\n\n    private final IJavaProject javaProject;\n\n    private final IJavaProject javaProjectWithTest;\n\n    private final IJavaProject javaProjectWithTestAndTestClass;\n\n    private final IJavaProject javaProjectWithTestAndTestClassAnd", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "=====================\n\nself.next_sink.SetVarz(self, 'timeout_sink')\nself.next_sink.SetVarz(self, 'timeout_sink_endpoint')\nself.next_sink.SetVarz(self, 'timeout_s", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate static final String[] imageFileNames = { \"page1.png\", \"page2.png\",\n\t\t\t\"page3.png\", \"page4.png\", \"page5.png\", \"page6.png\", \"page7.png\",\n\t\t\t\"page8", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "       () -> StaticFiles.of(JavadocOption::module, layout -> layout.toArray(Path[]::new))\n            .filter(path -> path.toFile().isFile())\n            .map(path -> path.toAbsolutePath())\n            .collect(Collectors", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "   return RespostaSAT()\n\n        return RespostaSAT.comunicar_certificado_icpbrasil_retorno(retorno)\n\n    def consultar_status_certificado(self):\n        \"\"\"\n        Sobrecarga da função", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleMuteAction(this), ToggleMuteAction.TOGGLE_MUTE_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAKER_ACTION_ID);", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "=====================\n\n    cmd = self.commands[name]\n    if not cmd:\n      print('repo error: unknown command \"%s\"' % name)\n      return 1\n\n    if gopts.trace_python:\n      trace.start(trace.Trace(dump=", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   Gson provideGson() {\n        return new Gson();\n    }\n\n    @Provides @Singleton\n    Ion provideIon(IonConfig config) {\n        return Ion.with(config);\n    }\n\n    @Provides @Singleton\n", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(5));\n\n        // then\n        verify(ds).getQueryExecutions();\n    }\n\n    @Test\n    public void testTotalQueryCountWithOtherTypes() {\n        List<QueryExecution> queryExecutions = new ArrayList", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inherit", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       VerifierProperty settings = new VerifierProperty();\n        settings.setName(\"Settings\");\n        settings.setVerifierClass(VerifierProperty.class);\n        settings.setEnabled(true);\n        settings.setActivated(true);\n\n        LocalVerifierProperty localSettings =", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           // Show an error message.\n            emailView.setError(getString(R.string.error_invalid_email));\n            passwordView.setError(getString(R.string.error_invalid_password));\n            Toast.makeText(activity, R.string.error_login", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "   DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user using a DrupalSession object.\n     *\n     * @param session the DrupalSession object to use for the login.\n     * @return the Drupal", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "=====================\n\ndef testQuirks(self):\n    quirks = self.testquirks()\n    quirklist = []\n    for quirk in quirks:\n        if quirk[\"type\"] == \"group\":\n            quirklist.append(quirk", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/problemset', ProblemSetHandler),\n            (r'/problemset/(\\d+)', ProblemSetHandler),\n            (r'/problemset/(\\d+)/(\\d+)', ProblemSetHandler),\n            (r'/problemset/(\\", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvisIRAlvis", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtMLException(\"Invalid criterion: \" + criterion);\n        }\n\n        return informationCriterion.getSelection();\n\n    }\n\n    /**\n     * The main method.\n     *\n     * @param args\n     *            the command line", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(ty1, e1, e2)\n\n\n@with_info(st_term)\ndef box(expr):\n    \"\"\"Turn a term into a Box\"\"\"\n    return Box(typing.bool_type(), expr)\n\n\n@with_info(", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "\n    void inject(Class<BatteryStatusIndicator> batteryStatusIndicatorClass);\n\n    void inject(Context context);\n\n    void inject(Resources resources);\n\n    void inject(EventBus eventBus);\n\n    void inject(EventBus eventBus);\n\n    void inject(Resources", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   private List<SliceValue> sliceValues = new ArrayList<>();\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view = inflater.inflate(R", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Mock()\n    response.content_type = None\n    with pytest.raises(ResponseValidationError):\n        validate_response(response, schema)\n\n\ndef test_response_content_type_json_validates():\n    response = Mock()\n    response.", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t/**\n\t * \n\t */\n\tprivate final Document document;\n\t\n\t/**\n\t * \n\t */\n\tprivate final Scope scope;\n\t\n\t/**\n\t * \n\t */\n\tprivate final Scope currentScope;\n\t\n\t/**\n\t", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "=====================\n\n    except TextGridParseError as e:\n        self.return_dict[\"parse_error_files\"].append(e)\n\n    except TextParseError as e:\n        self.return_dict[\"decode_error_files\"].append(e)\n\n    except", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "```python\nAccelerometerResource, \"/sensors/accelerometer\",\n                      resource_class_args=(sensors.accelerometer,)\n```\n    api.add_resource(\n        AirspeedIndicatorResource, \"/sensors/airspeed_indicator\",", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetVelocities().GetVtrueKnots())\n\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n\n\nclass In", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "\n    '--local-only, --no-local-only, --no-local-only-instance, --no-local-only-class'\n\nINSTANCE_ASSOCIATIONS_HELP_LINES = [\n    'Usage: pywbemcli instance associations [--local", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t/**\n\t * 后台首页\n\t * @return\n\t */\n\t@RequestMapping(\"/manage\")\n\tpublic String manage() {\n\t\treturn \"manage/manage\";\n\t}\n\t\n\t/**\n", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           logError(title, t);\n                            presenter.showErrorMessage(title, t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logWarning(title, t);\n                            presenter.showWarningMessage(title", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "   def test_ten_week_reminder_hindi(self):\n        logging.info(\"Running test for ten week reminder in Hindi...\")\n        # Create a new contact\n        contact = Contact.objects.create(phone_number=\"+9198765432", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected Location currentLocation;\n  protected Location lastLocation;\n  protected Location lastLocationFromProvider;\n  protected Location lastLocationFromNetwork;\n  protected Location lastLocationFromPassive;\n  protected boolean isLocationUpdatesEnabled = false;\n  protected boolean isLocationUpdatesEnabledFromProvider", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "# connect to the device/emulator\nconnect_to_device_or_emulator = connect_to_device_or_emulator(adb)\n\nif SETTINGS.get('upload_apk'):\n    apk_path = UPLOAD_APK_PATH\n   ", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Layer):\r\n    constructorList = [\r\n        Int('MessageType'), # 1 byte, 0-255, 0: RRC message, 1: RRC message with IE, 2: RRC message with IE and extended header\r\n       ", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\tadj_lh = create_adjacency_matrix(voxels=v_lh, faces=faces_lh, adjacency_type='trilateral')\n\t\tadj_rh = create_adjacency_matrix(voxels=v_rh,", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "       result.append(\" \").append(exp.getOperator().getValue());\n    } else {\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n      accept(exp.getRhsValue());\n    }\n    result.append(CLOSE_", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       CacheList newList = new CacheList();\n        newList.setName(listName);\n        cacheLists.add(newList);\n        cacheListsProperty().set(cacheLists);\n      }\n    }\n  }\n\n  private void updateLists() {", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   'Call CP_DATA, CP_DATA_len, CP_DATA_type, CP_DATA_cause, CP_DATA_seq, CP_DATA_status, CP_DATA_reserved, CP_DATA_length, CP_DATA_protocol_version, CP_DATA_message", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       new TimeEntryOvertimeAggregation()));\n\n        dateFrom.setValue(new Date());\n        dateTo.setValue(new Date());\n\n        dateFrom.addValueChangeListener(e -> {\n            if (dateFrom.getValue() != null) {\n                dateTo.", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "=====================\n\nclass PubKeyV4(PubKeyV3):\n    @sd_pub\n    @pub\n    def __init__(self, pk, created, expires, user_id, subpackets=None, trust=None, **kwargs):\n        super().__", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "\n    @property\n    def expansion_type(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                           self._expansion_num, ExpansionInfo.BOARDTYPE)\n\n    @property\n    def mux", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "=====================\n\nclass StrongRefSetProperty(StrongRefSetProperty):\n    def __init__(self, parent, pid, format, version):\n        super(StrongRefSetProperty, self).__init__(parent, pid, format, version)\n\n        self.name = None", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "=====================\nuser = create_inactive_user(email, full_name)\n\n            # Send email to user\n            subject = _('Welcome to Connect!')\n            template = 'connect/email_welcome.html'\n            send_email = send_mail(\n", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "```python\n        draft_channel = ctx.message.channel\n        draft_channel_id = draft_channel.id\n        draft_channel_name = draft_channel.name\n        draft_channel_mention = draft_channel.mention\n        draft_channel_guild =", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc('BCC_BTC')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Hitbtc('BCC_ETH')\n        elif name == \"%s_BCH_BTC\" %", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "```python\n            if isinstance(item, self.xpath_nodes):\n                yield item\n```\nThis code checks if the item is an instance of the `xpath_nodes` class. It's not clear from the provided context what `xpath_nodes` is, but", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   helpTestData(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tString defaultField = elt.getAttribute(AlvisIRConstants.XML", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   initMiPush();\n                }\n                //Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"Huawei\":\n                if(shouldInit()) {\n                    HMSAgent.init(this);", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n    private final KadConfiguration.BootstrapNode bNode;\n    private final KadConfiguration.BootstrapNode[] bootstrapNodes;\n    private final KadConfiguration.BootstrapNode[] bootstrapNodesList;\n    private final KadConfiguration.Boot", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "=====================\n\n    output.append(tabulate(rows, headers=headers, tablefmt=tablefmt,\n                           numalign=numalign, stralign=stralign,\n                           missing=missing))\n\n    if show_status:\n        output.append(status)\n", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "=====================\n    return words_api(wordnik_api, token)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\t@Inject\n\tprivate Connector connector;\n\t@Inject\n\tprivate ConnectorFactory connectorFactory;\n\t@Inject\n\tprivate ConnectorFactory connectorFactory2;\n\t@Inject\n\tprivate ConnectorFactory connectorFactory3;\n\t@Inject\n\tprivate Connector", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "   def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False, lpName=\"test\")\n        self.assertRaises(\n            WindowsError,\n            \"The handle is invalid. (141", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root);\n        this.deployments = new SpringDeployments(restTemplate, root);\n        this.deployments = new SpringDeployments(restTemplate, root);\n        this.deployments =", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHolder.getParser().parse(roundEnv.getElementsAnnotatedWith(annotation))\n                            .stream()\n                            .map(element -> new ParsedPath(parserHolder, element))\n                            .collect(Collectors.toList());\n                })\n", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected PageParser pageParser;\n\n    protected DuplicateFilter duplicateFilter;\n\n    protected AtomicLong totalUrlCount = new AtomicLong(0);\n\n    protected AtomicLong totalPageCount = new AtomicLong(0);\n\n    protected AtomicLong totalContentLength =", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new AddKeyValueAction(this));\n            actionPopupGroup.add(new AddKeyValueListAction(this));\n            actionPopupGroup.add(new AddDocumentAction(this));\n            actionPopupGroup.add(new DeleteKeyValueAction(this));\n", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton addChannel;\n\n    public GuiSettingsChannel(Channel channel) {\n        super(channel.getName());\n        this.channel = channel;\n        setSize(250, 250);\n        setLocation(10, 10);\n", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREENSHOT_CODE:\n                return new BtnScreenShot();\n            case ConstantStr.FUNC_BACK_CODE:\n                return new BtnBack();\n            case ConstantStr.FUNC", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       createWebAppSection(form);\r\n        createWebAppTable(form);\r\n        createWebAppButtons(form);\r\n        form.setSize(500, 400);\r\n        setControl(form);\r\n    }\r\n\r\n    protected void createWebAppSection(Com", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       self.assertEqual(\"string\", Type(\"string\").get_sample())\n\n    def test_type_get_sample__return_default_sample_when_no_sample_defined(self):\n        self.assertEqual(\"any\", Type(\"any\").get_sample())\n\n    def test", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "               new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(Next line of code:\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "self._cluster_type = _cluster_type\n\nThis line sets the value of the instance variable '_cluster_type' to the value passed as an argument '_cluster_type'.\n\nThe '_cluster_type' variable is defined earlier in the class as a string and it represents the type of the data", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "=====================\n\ndef complete_flickr(request):\n    try:\n        frob = request.GET['frob']\n    except KeyError:\n        raise ValueError(\"Redirect back from Flickr did not include a frob\")\n\n    # Get the user's NS", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caught FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t} catch(ConnectionClosedException e) {\n\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "     op, arg = opcode.opname(bytecode[k][2], bytecode[k][2] in (LOAD_CONST, JUMP_IF_TRUE, JUMP_IF_FALSE, POP_JUMP_IF_TRUE, POP_JUMP", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   List<DailyExpenses> dailyExpensesList = new ArrayList<>();\n    List<DailyExpenses> dailyExpensesListFiltered = new ArrayList<>();\n    List<DailyExpenses> dailyExpensesListFilteredByCategory = new ArrayList<>();\n    List<DailyExpenses", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "=====================\n\nclass PlatformAdmin(admin.ModelAdmin):\n    list_display = ('engine', 'subject', 'server_url', 'status')\n    list_filter = ('engine',)\n    search_fields = ('engine', 'subject', 'server_url')\n\nclass", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\tprivate void openCustomPlace(Place place) {\n\t\tif (place != null)\n\t\t\tstartActivity(PlaceActivity.start(this, place._id));\n\t}\n\tprivate void openCustomPlace(Place place) {\n\t\tif (place != null) {\n", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "=====================\n\ndef parse(ping_result: Union[str, bytes, PingResult]) -> PingStats:\n    \"\"\"\n    Parse ping result.\n\n    Args:\n        ping_result (Union[str, bytes, PingResult]):\n            Ping", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           chat = new Chat();\r\n            try {\r\n                chat = DatabaseManager.getInstance().getChatDAO().add(chat);\r\n            } catch (Exception e) {\r\n                Log.e(getClass().getSimpleName(), \"Error while adding new chat to DB: \" + e.", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tgame = new CubicEngine();\n\t\t\tgame.setDisplayMode(new DisplayMode(800, 600));\n\t\t\tgame.setVSyncEnabled(true);\n", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "account = account_for_facebook_user(fb_id, person)\n\ndef account_for_facebook_user(fb_id, person=None):\n    try:\n        account = Account.objects.get(facebook_id=fb_id)\n    except Account.DoesNot", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n        assertThat(qe, is(isStatement()));\n        assertThat(qe, is(isBatchStatement()));\n        assertThat(qe, is(is(statement())));\n        assertThat", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "   } else if (Utils.isXmlHttpRequestError(response)) {\n      log(\"XMLHttpRequest error: \" + response.getStatusText(), null);\n      cancel();\n      return;\n    }\n\n    if (serverRawResponse != null) {\n      log(\"server response", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "=====================\n\nassembly_points_by_source = {k: v for k, v in assembly_points_by_source.items() if len(v) > 0}\nassembly_points = list(assembly_points_by_source.values())\n\nmerged_assembly", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "GyroResource,\n        \"/gryo\",\n        resource_class_args=(sensors.gyro,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/thermometer\",\n        resource_class_args=(sensors.", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "```python\nfields={ key.capitalize():value for key, value in config.items()}, msg=\"\", inline=False)\n```\nThis code snippet is used to create a dictionary where keys are capitalized and values are the corresponding values from the config dictionary. It is used to", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.isInstalled()) {\n\t\t\t\t\t\tshowToast(getString(R.string.level_is_installed));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tshowLoading();", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * The currently selected date.\n     */\n    protected CalendarDate selectedDate = null;\n\n    /**\n     * The currently selected date range.\n     */\n    protected CalendarDateRange selectedDateRange", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root);\n    }\n\n    @Override\n    public Info info() {\n        return info().blockingGet();\n    }\n\n    @Override\n    public Observable<Info> info() {\n        return this.info", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   VerifierProvider rsaLocator = new DefaultRsaVerifierProvider();\n\n    VerifierProviders verifierProviders = new VerifierProviders();\n    verifierProviders.setVerifierProvider(SignatureAlgorithm.RS256, rsaLocator);\n    verifier", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n    protected EasyOnViewRecycled", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "               } catch (IOException e) {\n                    logger.info(\"Expected 404, got \" + e.getMessage());\n                }\n\n                client.deleteObject(containerName, fileName);\n            }\n\n            client.deleteContainer(containerName);\n\t\t", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                   TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();\n                    newTrackHistoryEntry.title = liveInfo.title;\n                    newTrackHistoryEntry.station = liveInfo.station;\n                    newTrackHistoryEntry.artist = liveInfo.artist;\n                ", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "ProjectsActivity, ProjectsActivity.ProjectsActivityListener, ProjectsActivity.ProjectsActivityListener.ProjectsActivityListener,\nProjectsActivity.ProjectsActivityListener.ProjectsActivityListener.ProjectsActivityListener,\nProjectsActivity.ProjectsActivityListener.ProjectsActivityListener.Projects", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       if (home.getImage() != null) {\n                            ((CandyBar) mContext).setImage(home.getImage(), home.getTitle(), home.getSubtitle(), home.getDescription(), home.getUrl(), home.getCategory(), home.getCategoryColor(),", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "=====================\n\ndef load_url(url, format, encoding, logger):\n    \"\"\"\n    Loads a table from a URL.\n\n    :param url: The URL to load the table from.\n    :param format: The format of the table.\n    :param encoding:", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    def items(self):\n        \"\"\"\n        Returns a list of all the items in the playlist.\n\n        :return: list<:class:`MediaItem`>\n        \"\"\"\n        if self._items is None:\n            self._items = []\n            for item in self", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(\n            InputError,\n            message=\"Expected a unicode string for the environment key.\",\n            input_type=text_type,\n            input_value=42)\n\n    def test_type_check_for_environment_value(self):\n", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "=====================\n\n  def Run(self, argv):\n    \"\"\"Runs the command.\"\"\"\n    self.Init()\n    self.ParseArgs(argv)\n    self.Prepare()\n    self.RunCommand()\n    self.PostRun()\n    self.Exit()\n", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 执行任务监听器\n                for (RunnerListener listener : runnerListenerList) {\n                    listener.onTaskFinished(taskData);\n                }\n                // 记录日志\n                TaskRunnerLog log = new TaskRunnerLog();", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       entry = Entry(request=Request(\"http://example.com\"), response=StaticResponse(200, \"\"))\n        result = await r.after_response(entry)\n        self.assertIsNone(result)\n\n    @async_test()\n    async def test_reject", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //保存用户信息到数据库\n        BaseApplication.getAppContext().getSharedPreferences(\"userInfo\", Context.MODE_PRIVATE)\n                .edit()\n                .putString(\"stuXH\", stuXH)\n                .putString(\"", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\n    self.__device = Device(device=device, ip_version=ip_version)\n\nThis code is not present in the given code snippet.\n\n    self.__device = Device(device=device, ip_version=ip_version)\n    self.__logger = logger\n   ", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "       except ActionFailed:\n            pass\n        else:\n            state[\"inventory\"] = [i.__dict__ for i in inv]\n\n    def add_location(self, state: Dict[str, Any], obj: MudObject) -> None:\n        if isinstance(obj", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": " public Query visitOrd4Search(Ord4Search n) throws ParseException {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n  }\r\n\r\n  // This is the code for the ProximitySearch class\r\n  public Query visitOrd4Search(Ord4Search", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaning = false;\n\t}\n\n\t/**\n\t * @param pipeline\n\t * @param inputStream\n\t * @param outputFile\n\t * @param surveyName\n\t * @param inFormat\n", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "\n        try {\r\n\r\n            PropertiesReader propertiesReader = new PropertiesReader();\r\n                    (new File(propertiesFile()));\r\n\r\n            DataDir dataDir = new DataDir(new File(propertiesReader.getDataDir()));\r\n\r\n            DataDir dataDirSnapshot = null;\r\n", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "```python\nself.listener = self.listener_thread()\nself.listener.start()\n```\nThis line of code starts the listener thread, which is responsible for sniffing packets and sending them to the server. The listener thread is created in the `listener_thread()` method, which", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       MovieCursor movieCursorById = new MovieCursor(cursorById);\n        // Make sure we get the correct movie back\n        assertEquals(movieRowId, movieCursorById.getId());\n        assertEquals(DataTestUtilities.MOVIE_ID, movieCursorById.getMovieId());\n", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DocumentDialog(self, DevisAccueilModifications(self.inscription, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratModifications(self.in", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(list(etree.iter(self.elem)),\n                         list(etree.iter(self.elem.getchildren())))\n\n        self.assertEqual(list(etree.iter(self.elem)),\n                         list(etree.iter(self.", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.main);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(false);\r\n\t\tmap", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, position);\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(world, position);\n                    break;\n                case Item.", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "=====================\n\nclass Cisco2960SwitchCore(BaseCiscoSwitchCore):\n    def new_command_processor(self):\n        return EnabledCommandProcessor(\n            self.switch_configuration,\n            ShellCommandProcessor(self.logger),\n            self.logger)", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutput", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "=====================\n\n        return RespostaSAT.analisar_retorno(retorno)\n\n        # TODO: implementar a função RespostaSAT.analisar_retorno\n\n        # TODO: implementar a função RespostaSAT.anal", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "=====================\n\n    axes = axes or plt.gca()\n    axes.set_xlabel(f\"{output_symbol(composition_symbol(composition_symbol(composition_symbol(composition_symbol(composition_symbol(composition_symbol(", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "=====================\n\ndef _add_airspeed_resources(api, aircraft):\n    api.add_resource(AirspeedResource, \"/airspeed\")\n    api.add_resource(AirspeedIndicatorResource, \"/airspeed/indicator\")\n\n\ndef _add_attitude_", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    pass\n\nThis is a placeholder for any code that needs to be executed when the script is run directly. In this case, it is empty.\n\nThe script appears to be defining a Corpus class, which is used to represent", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private static final int MAX_TEXT_LINES = 10;\n\n    // UI elements\n    private TextView mTextViewDetectedText;\n    private TextView mTextViewDetectedText2;\n    private TextView mTextViewDetectedText3;\n    private Text", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\tpublic final TimeZoneUtil tz = new TimeZoneUtil();\n\tpublic final TimeZoneUtil.TimeZoneInfo tzi =", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       MongoConfiguration mongoConfiguration = new MongoConfiguration();\n        try {\n            InputStream inputStream = new FileInputStream(new File(\"mongo.xml\"));\n            Document document = Document.parse(inputStream);\n            List<ServerConfiguration> serverConfigurations = document.toJavaObject", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1(\"h1\", \"TodoMVC\")\n\t\t// Input(\"input\", \"text\", \"new-todo\")\n\t\t//\t\t.att(\"autocomplete\", \"off\")\n\t\t//\t\t.att(\"autofocus\", \"autof", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               new CropImageDialog(CameraActivity.this,output).show();\n            }\n        });\n\n        /**\n         * Set onClickListeners for the buttons\n         */\n        captureButton = (ImageButton)findViewById(R.id.capture);\n        captureButton.setOn", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "   @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        mActivity = (MainActivity) getActivity();\n        mActivity.setSupportActionBar(mToolbar);\n        m", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   validate_search(query_on, key)\n\n    # This test will fail because the hash key is not a column, it's a unique identifier\n    # for the table.  The test will fail with a message like:\n    #   \"Key condition expression is not valid for a", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        datasetChanged();\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String name) {\n        datasetChanged();\n", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "```python\n            '/properties':                   RestAppPropertys,\n        }\n        for endpoint, resource in self.resources.items():\n            self.api.add_resource(resource, endpoint)\n```\n        # Start the API\n        self.api.run(thread", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "=====================\n        self._tree_model = FileTreeModel(self._directory, self._df_manager)\n        self._tree_model.setSortingEnabled(True)\n        self._tree_model.setColumnWidth(0, 250)\n        self._tree", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "====================\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"tc traffic control utility\")\n    parser.add_argument(\"--version\", action=\"version\", version=\"{}\".format(__version__))\n    parser.add_argument(\"--config", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n\n    private final static int BUTTON_WIDTH = 100;\n    private final static int BUT", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "       void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to events when a week is navigated\n     */\n    public interface ForwardListener {\n        /**\n         * Triggered when a week is navigated forward\n         */\n        void", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "   self._db_type = db_type\n    return self\n\nclass DbCloseMessage(BaseMessage):\n    def __init__(self, _socket):\n        super(DbCloseMessage, self).__init__(_socket)\n\n    def prepare(self):\n        self._", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           client.getBaseClient().getHandshakeData().setUpgrade(true);\n            client.getBaseClient().getHandshakeData().setMaxFrameSize(Configuration.getMaxFrameSize());\n            client.getBaseClient().getHandshakeData().setAcceptMasking(true);\n", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tGenerator[] generators = setGenerators(pipeline.getInFormat());\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tbyte[] parameters = pipeline.getParameters();\n\t\t\n\t\tGenerationService generationService = new GenerationService", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<GcpProject> projects = pipeline.apply(\n        \"Read projects\",\n        new LiveProjectSource(org.apache.beam.services.options.PipelineOptions.getDefaultInstance())\n            .setProjectId(org.apache.beam.services.options.PipelineOptions", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "=====================\n\n@pytest.fixture\ndef my_model(session):\n    \"\"\"\n    A fixture that returns a new instance of a model.\n\n    :param session: A fixture that represents the current test session.\n    :return: A new instance of the model.\n", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanPoolingReadDefinitions(\n                    emb_dim=self._main_emb_dim,\n                    def_emb_dim=self._def_emb_dim,\n                    def_word_dim=self._def_word_dim,", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "\n    public ChatManager getChatManager() {\n        return ChatManager.getInstance();\n    }\n\n    public ChatManager getChatManager() {\n        return ChatManager.getInstance();\n    }\n\n    public ChatManager getChatManager() {\n        return ChatManager.getInstance();\n   ", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private ProgressDialog progressDialog;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_video_pick);\n        Toolbar toolbar = (Toolbar) findViewById", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "```python\nif form.is_valid():\n    user = form.save(commit=False)\n    user.is_staff = True\n    user.save()\n    messages.success(request, 'Usuario creado con éxito')\n    return redirect('re", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setColor(fog.getColor().toArray());\n        descriptor.setDensity(fog.getDensity());\n        descriptor.setFog", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif(this.isOpen())\n\t\t{\n\t\t\tthis.handle.close();\n\t\t\tthis.handle = null;\n\t\t\tthis.isOpen = false;\n\t\t}\n\t}\n\t\n\t", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorComponent plusActorComponent();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfException e) {\n\t\t\tthrow new SocketException(\"Socket communication failed\", e);\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark\n\t *\n\t * @return the result of the benchmark\n\t * @", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "class DashboardView(TemplateView):\n    \"\"\"\n    Dashboard View\n    \"\"\"\n    template_name = 'dashboard.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo.getMoreSuitableEndpoint(\n\t\t\t\t\tendpointType, city, networkType);\n\t\t\treturn activateLoginIfRequested(createWrapper(endpoint,\n\t\t\t\t\tapiKey, networkType, dataParser, network", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       if request.method == \"POST\":\n            zona = request.POST.get(\"zona\")\n            zona_obj = Zona.objects.get(pk=zona)\n            plan = request.POST.get(\"plan\")\n            plan_obj = Plan.objects.get(", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "#     self._cstr = self.tree.to_smt2()\n\nInstead, let's create a method to convert the tree to a constraint.\n\nclass Constraint(object):\n  def __init__(self):\n    self._ast = Tree()\n    self._", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);\n  private ActionSupportHandler<CallAction>           callActionSupportHandler           = new ActionSupportHandler<CallAction>(CallAction.class);\n  private ActionSupport", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1), [])\n\ndef test_hash_fnv():\n    \"\"\"Test FNV hash function\"\"\"\n    # Testing with 32-bit integers\n    assert hash(b'test') == ", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "\n        if base_char.islower():\n            result = int_to_alphabetic(value, base_char)\n        else:\n            result = int_to_alphabetic(value, base_char).upper()\n\n        if fmt_token:\n            result =", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\n\t\tif model_item is None:\n\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"Error: \", e)\n\t\t\treturn default_flags\n\n\t\tif model_item.is_hidden:\n\t\t\treturn Qt", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "=====================\n\n        response = Hydrator.hydrate(\n            VersionedObject.factory(\n                \"test\",\n                \"1.0.0\",\n                \"Test\",\n                \"Test\",\n                \"Test\",\n                \"Test\",", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         FAST: {\n        \t//TODO: C, this is a hack to get the ringBuffers to be created.\n        \t//TODO: C, this is a hack to get the ringBuffers to be created.\n        \t//TODO: C, this is a hack", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1))\n  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               hasJsonPath(\"$.hits.total.value\", equalTo(records.size())));\n    }\n\n    @Test\n    public void suggest() throws Exception {\n        String query = \"http://localhost:8080/csw?service=CSW&request=", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "=====================\n\nclass ECCV4(PubKey):\n    @classmethod\n    def _parse_pubkey(cls, packet):\n        #: The algorithm used to generate the key.\n        pubkeyalg = packet.get_pubkey_algorithm()\n\n        #:", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tgeoWriter = new GeoWriter();\n\t}\n\n\t/**\n\t * Registers the request services\n\t */\n\tprivate void registerRequestServices() {\n\t\trequestServices", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = getSearchResult(context, context.getInvokeArgs());\n                    } catch (IOException e) {\n                        context.setExitCode(1);\n                        context.setErrorMessage(\"Error while executing search: \" + e.getMessage());\n                        return;\n", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "url(r'^admin/', admin.site.urls),\n\n    url(r'^ip/$', ip, name='ip'),\n    url(r'^ip/add/$', ip_add, name='ip_add'),\n    url(r'^ip/delete/(", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                               startMixedActivity();\n                        }\n                    }\n                });\n                dialog.show(getFragmentManager(), \"PlaySessionSettings\");\n            }\n        }\n    }\n\n    private void startMixedActivity() {\n        Intent intent = new Intent(", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   private DropDownMenu dropDownMenu;\n    private FilterType filterType;\n    private FilterType filterType1;\n    private FilterType filterType2;\n    private FilterType filterType3;\n    private FilterType filterType4;\n    private FilterType filterType5;\n   ", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateSocketTags();\n\n        # initialize block shape\n        obj.updateBlockShape();\n\n        # initialize block image\n        obj.updateBufferedImage();\n\n        # initialize block label\n        obj.updateBlockLabel();\n\n        # initialize block comment\n        obj.", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "=====================\n\n        alpha = Xor(d1, d2)\n        beta = Xor(d1, d3)\n        f = BvAdd(alpha, beta)\n        f_diff = Derivative(f, d1)\n\n        beta_diff =", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newAlternations);\n\t\tpublic abstract Node transformContext(Context node, Context newContext);\n\t\tpublic abstract Node transformConstant(ConstantNode node);\n\t\tpublic abstract Node transformMulti", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the commands\n\t\tgetCommand(\"help\").setExecutor(new CommandHelp());\n\t\tgetCommand(\"create\").setExecutor(new CommandCreate());\n\t\tgetCommand(\"delete\").setExecutor(new CommandDelete", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       SASLMechanism mechanism = connection.getSASLMechanism();\n        if (mechanism != null) {\n            mechanism.handleChallenge(challengeData);\n        }\n    }\n\n    private void parseSuccess(Element doc) throws IOException {", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Pi = Chaining(Pi, Concat(Pi, Constant(0x676f7265676f20626961)))\n\ndef test_chaining_pi():\n    \"\"\"Test Chaining on Pi.\"\"\"\n    pi = Chaining(Pi", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private FastScrollRecyclerView mFastScrollRecyclerView;\n\n    private SongListAdapter mAdapter;\n\n    private TextView mEmptyView;\n\n    private Toolbar mToolbar;\n\n    private FastScroller mFastScroller;\n\n    private boolean mShow", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           FlowAbsEffect flowAbsEffect = (FlowAbsEffect) effect;\n            if (flowAbsEffect.isInitialized()) {\n                throw new RuntimeException(\"Cannot select a FlowAbs effect that is already initialized\");\n            }\n        }\n        mSelectedEffect = effect;\n        mSelected", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "\nclass ESMInfo(Layer):\n    constructor(self, **kwargs):\n        super(ESMInfo, self).__init__(**kwargs)\n        self.append(PDP_Type())\n        self.append(PDP_Address())\n\nclass ESMInfo(Layer):", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           mSongs.load();\n            mSongs.notifyDataSetChanged();\n        }\n    };\n    private OnItemClickListener mOnItemClickListener = new OnItemClickListener() {\n        @Override\n        public void onItemClick(View view, int position) {\n            Song song =", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    begin_time = time.time()\n    if len(sys.argv) > 1:\n        if sys.argv[1] == \"--validate\":\n            self.validate_corpus()\n            sys.exit", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(@PathParam(\"user\") UserDTO user) {\n\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),\n\t\t\t\tuser.getContactEmail(), user.getCallbackUrl());\n\t}\n\n\t@GET\n", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "\n    @GET(\"api-info\")\n    Observable<ApiStatus> apiInfo(@Query(Constants.API_KEY) String apiKey);\n\n    /**\n     * Returns the current API status.\n     */\n    @GET(\"api-info\")\n    Observable<ApiStatus> api", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties);\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.name", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   assert almost_eq(erb(freq), bandwidth)\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 1000),\n      (2000, 1215),\n      (3000,", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "=====================\n\ndef read_sequence(fp, encoding=None):\n    \"\"\"\n    Read a sequence from a file.\n\n    :param fp: A file-like object.\n    :param encoding: The encoding to use for reading the data.\n    :return: A sequence of", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   try {\n      // create a list of all comment processors\n      List<ICommentProcessor> commentProcessors = new ArrayList<>();\n      for (ICommentProcessor commentProcessor : this.commentProcessors()) {\n        commentProcessors.add(commentProcessor);\n      }\n\n      //", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected AbstractRavelryService getRavelryService() {\n        return ravelryService;\n    }\n\n    @Override\n    protected AbstractRavelryService getRavelryService(String token) {\n        return ravelryService;\n    }\n\n    @Override", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "=====================\nclass NotationData(SignatureSubpacket):\n    \"\"\"\n    This subpacket is used to specify a name and a value for a\n    particular notation.\n\n    The name is a string, and the value is a string or a binary\n    blob.\n    \"\"\"\n\n", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "```python\n        self.addMessage(lm, self.chum)\n```\nThis line of code is causing the error. The `self.chum` variable is not defined in the `QuirkTester` class.\n\nTo fix the error, you need to define the `", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "=====================\n\ndef check_args(args, fn_type, env):\n    \"\"\"\n    Checks the arguments against the function type signature.\n    \"\"\"\n    args = list(args)\n    if len(args) != len(fn_type.__args__):\n        raise", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "```python\nif isinstance(value, GregorianMonthDay):\n    return value\n\ntry:\n    if isinstance(value, (str, int, float)):\n        return GregorianMonthDay(value)\n    elif isinstance(value, (list, tuple)):\n        return Greg", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "=====================\n\nif not _param_present_in_database(dbf, phase_name, comps):\n    # TODO: Add a check for the presence of the phase in the database\n    #       and raise an error if it is not present.\n    _log.warning(", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerLogicComponent componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n    //TODO: 1. pause the player\n    controller.getPlayer().getPlayer().pause();\n\n   ", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensor.flushDBCache(deviceID);\n        }\r\n        if(type == 8 || type == 0) {\r\n            ProximitySensor.flushDBCache(deviceID);\r\n        }\r\n        if(type == 9 || type == 0) {\r\n           ", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<Suggestions> suggest(@Query(\"q\") String query, @Query(\"limit\") int limit);\n\n    /**\n     * Get the anon id for the current user\n     *\n     * @param serviceIds the service ids\n     * @return {@link Call}<{", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "\n    def _get_stream_records(self, model, position):\n        \"\"\"\n        Iterate over records in the stream, starting at the given position.\n\n        :param model: The model to stream records from\n        :param position: The position to start streaming from\n        :return", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    main()\n```python\nif __name__ == \"__main__\":\n    main()\n```\nThis line of code is used to run the script as a standalone program. It checks the value of the special variable", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate UserServices userServices;\n\t@Resource\n\tprivate Sub", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "=====================\n\n    def __getattr__(self, name):\n        if name in self.registry:\n            return self.registry[name]\n        elif name in self.registry_reverse:\n            return self.registry_reverse[name]\n        else:\n            raise AttributeError", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "=====================\n\n    @scoped_subgraph\n    def decoder(self) -> FeedForwardRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN is a feedforward RNN with a single hidden layer of size `decoder_", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nclass PlatformAdminForm(forms.ModelForm):\n    api_key = forms.CharField(label=\"API Key\", max_length=255)\n\n", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaQueryNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaQueryListNode node) {\n", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final NiceTable niceTable = new NiceTable(numberOfColumns);\n        niceTable.addHeader(\"Benchmark\", \"Class\", \"Method\", \"Mean\", \"StdDev\", \"Min\", \"Max\", \"Confidence Interval\", \"Error\");\n\n        for (final Class<?>", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     self.control_flow_graph = self.graph.inverse()\n      self.control_flow_graph.traverse(self.entry_block, Walker(visitor))\n      self.loop_blocks = [b for b in visitor.edges if has_parent_loop(b", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m, this.d, this.data);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.error(\"", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "=====================\n\ndef parse_xpath_expression(self, expression: str, context: Optional[XPathContext] = None) -> XPathResult:\n    \"\"\"\n    Parse an XPath expression and evaluate it against the given context.\n\n    :param expression: the XPath expression", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   else if (Event.isCallEvent(event)) {\n                        // Handle call events\n                        handleCallEvent(event);\n                    }\n                    else if (Event.isRoomInviteEvent(event)) {\n                        // Handle room invite events\n                        handleRoom", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsert = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\t// PostProcessing\n\tprivate FOPProcessor fopProcessor = new FOPProcessor();\n\t\n\tprivate FOPProcessor fopProcessor2", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self).ShowModal()\n\n    def OnQuit(self, event):\n        self.Destroy()\n\n    def __init__(self, parent):\n        self.parent = parent\n        self.InitUI()\n\n    def InitUI(self):\n        self", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "=====================\n\n    J_am = self.compute_angular_momentum_jacobian(p)\n    H = dot(J_am, dot(self.compute_angular_velocity_jacobian(p), J_am.T)) + \\\n       ", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n            name.setText(queuedProjectResult.queuedProject.name);\n            author.setText(queuedProjectResult.queuedProject.author);\n", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               new MigrateCommand(),\n                new RefreshCommand(),\n                new VirtualEconomyCommand(),\n                new VirtualEconomySetCommand(),\n                new VirtualEconomyAddCommand(),\n                new VirtualEconomySubtractCommand(),\n                new", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "```python\n        prior_specs = build_prior_specs(symbols=symbols, parameters=parameters, prior=prior)\n        _ = [prior_specs[i].log_prob(parameters[i]) for i in range(len(parameters))]", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const.fromValue(arg[0])\n    elif op == LOAD_NAME:\n      return Ref(arg[0])\n  elif op == LOAD_ATTR:\n    return Ref(arg[0], arg[1])\n  elif op == LOAD_SUBSCR", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final PhysicsWorld physicsWorld;\n\n\tprivate final SpriteBatch batch;\n\tprivate final SpriteBatch debugBatch;\n\tprivate final SpriteBatch hudBatch;\n\tprivate final SpriteBatch fxBatch;\n\tprivate final SpriteBatch fxBatch2;\n", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview = new TempSensorView", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> getAuthorsWithBooks() {\n\t\treturn dslContext.select(AUTHOR.ID, AUTHOR.NAME, BOOK.TITLE)\n\t\t\t\t\t\t.from(AUTHOR)\n\t\t\t\t\t\t", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t\tthis.rootQuery = new SQLQuery(this, null, null, null, null, null);\n\t}\n\n\tpublic SQLBatch", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "# install_and_run(adb, file_path, app_name, is_activity=True)\n\n        install_and_run(adb, file_path, app_name, is_activity=True)\n        \n        # 获取运行时特征\n       ", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   List<Genotype> parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return risks.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into risks\n     */\n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n            Symbol('baz'),\n        ]),\n        {'bar': bar_type},\n    )\n\n\ndef test_record_", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getPrepared(\"SELECT * FROM users WHERE id = ?\");\n\n        // ... perform application logic with prepared statement ...\n\n        // query with parameter\n        assertThat(pe, query(\"SELECT * FROM users WHERE id = ?\"));\n        assertThat(pe,", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "=======================\n\t\t\tif len(selection) > 1:\n\t\t\t\tself._view_widget.on_multiple_selection(selection)\n\n\tdef on_document_modified(self):\n\t\tself._document_modified = True\n\t\tself._view_", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return new ApiException(cause);\n            }\n        };\n        _config = config;\n        // Set up", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(List.class, new DefaultListRenderer());\r\n\t\tregisterRenderer(Set.class, new DefaultSetRenderer());\r\n\t\tregisterRenderer(Map.Entry.class, new DefaultMapEntryRenderer());\r", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\tprivate static FacetSubQueryFactory readFacetSubQuery(Element elt, SearchConfig config) throws IOException {\n\t\tString name = el", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "\n    url(r'^new$', staff_member_required(AddCIPipeline.as_view(), login_url=LOGIN_URL), name=\"add-ci-pipeline\"),\n\nshould be:\n\n    url(r'^new$', AddCIPipeline.as", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "access_token = callable(access_token)\n\nThis is a syntax error.  The `access_token` variable is already an instance of the `oauth.Token` class, so it doesn't need to be called as a function.  Remove the parentheses.\n\naccess", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               pointing, mag = xy2RAS(x=x, y=y, plate_scale=plate_scale, plate_rotation=plate_rotation, \\\n                    plate_center=plate_center, plate_scale_x=plate_scale_x,", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "=====================\ngrid = gen_grid(data, options)\n\n    # Generate prior distributions for each parameter\n    prior = dict()\n    for counter, param in enumerate(['scale', 'slope', 'guess', 'lapse']):\n        if param in options:\n           ", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           UIDialog.show(new DiceDialog(Board.this), \"Roll Dice\", \"Roll Dice\", \"Cancel\", new DialogListener() {\n              @Override\n              public void ok() {\n                Board.this.rollDices();\n              }\n\n              @Override", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "=====================\n\n        self.assertEqual(list(etree.iterpath(root)),\n                         ['/', '/a', '/a/b1', '/a/b1/c1', '/a/b1/c2', '/a/b2', '/a/b3", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "       self.runner.add(self.rule, with_child=True)\n\n    @patch(\"hammer.rules.status_codes.HTTP_NOT_FOUND\")\n    @patch(\"hammer.rules.status_codes.HTTP_OK\")\n    @patch(\"hammer", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "```python\ncfe_cancelamento = CFeCancelamento(\n        chCanc='CFe12345678901234567890123456789012345678901", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "   List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a list of ancestries.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a list", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           EtsiException ex = null;\n            try {\n                final EtsiResponse resp = this.client.sendRequest(req);\n                ex = resp.getException();\n            } catch (Exception e) {\n                ex = new EtsiException(\"Failed to", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is CalcSheet:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is CalcRow", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensor.flushDBCache(deviceID);\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensor.flushDBCache(deviceID);\r\n        }\r\n        if(type == 13 || type == ", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<Player> players;\n\n\tpublic Team(String teamId) throws TeamNotFoundException {\n\t\ttry {\n\t\t\tTeamSummaryResponse teamSummaryResponse = QueryTeamSummary(teamId);\n\t\t\tteamSummary = teamSummaryResponse.getLeague();\n\t\t", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       FeedbackUseCase feedbackUseCase = new FeedbackUseCase(\n                new FeedbackInteractor(\n                        new FeedbackRepository(\n                                new FeedbackRepositoryImpl(\n                                        new FeedbackApiClient(\n                                                new", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "```python\n            table_index[table_name] = self.session.load_items(\n                TableName=table_name,\n                KeyConditionExpression=\"Key = :key\",\n                ExpressionAttributeValues={\":key\": key},\n                ConsistentRead=not", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               art = draw_art(key_size=256, key_algo='RSA', key_fingerprint=fingerprint)\n                print(art)\n            print('{:<32} {:<20} {}'.format(fingerprint", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(Sector, SectorAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(IndicatorType, IndicatorTypeAdmin)\nadmin.site.register(SectorType,", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "=======================\n\n    return RespostaSAT(retorno)\n\n    def ativar_sat(self):\n        \"\"\"\n        :return:\n        \"\"\"\n        retorno = self._comunicar_com_sat(\n            self.funcao_ativar", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "```python\ndef test_node_document_uri_function(self):\n    xml = '''<A xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xmlns:xsd=\"http://www.w3.", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "=====================\n\n    self.logger.info(\"Training started at {}\".format(datetime.now()))\n\nThis line of code sets up the logger to log messages with the prefix \"Training\" and the current date and time. The logger is then used to log a message indicating that training has", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final OAuth2Client oauth2Client;\n\n    public OAuth2Client getOAuth2Client() {\n        return oauth2Client;\n    }\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController state", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Jobs jobs;\n\n    public SpringDirectorClient(URI directorUri, RestTemplateBuilder restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n        this.info = new Info(new InfoOperations(new InfoOperationsImpl(directorUri, rest", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "public void requestAudiologistInfo() {\n    synchronized (_lock) {\n        if (_state != FittingState.IDLE) {\n            throw new IllegalStateException(\"Cannot request audiologist info while fitting session is running.\");\n        }\n        _state = FittingState.REQUESTING", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   public void onMessage(ChatMessageEvent event) {\n        if (event.getChannel() == this.channel) {\n            this.setMessage(event.getMessage().getFormattedText());\n        }\n    }\n\n    @Override\n    public void drawButton(Minecraft", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "         DATA[looptest], EPSILON, FiniteDifferenceSchemes.FORWARD);\n        Double[] d3Sad = BlackFormula2.price_Sad(DATA[looptest][0], DATA[looptest][1], DATA[looptest][2], DATA[", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class\n    };\n\n    /**\n     * Map of module names to their respective classes\n     */\n    private static HashMap<String, Class<?>> moduleMap = new HashMap<>();\n\n    /**\n     * Map of module names to their respective instances\n     */\n   ", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "=======================\npublic static DownloadRequest createDownloadRequest(Context context, String url, File file, DownloadListener listener) {\n    return new DownloadRequest(context, url, file, listener);\n}\n\n/**\n * Create a download request.\n *\n * @param context context.\n *", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void init(MutableConfig config) {\n    // register the plugin properties\n    config.set(Prog.PACKAGER_PLUGIN_DIR, new File(System.getProperty(\"user.home\"), \".prog/plugins/packager\"));\n    config.set(Pro", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "=======================\nprivate QuerySetConfig parseQuerySetConfigTag(Element element) {\n    QuerySetConfig querySetConfig = new QuerySetConfig();\n    NodeList querySetNodes = element.getElementsByTagName(QUERY_SET_TAG);\n    for (int i = 0", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "=====================\n\n        if ExeSQL(sql) == False:\n            print('update sql error')\n            continue\n\n        print('update status success')\n\n        # save status\n        pickle.dump(S, open(self.TF + file, 'wb'))\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "=====================\n\n        self.robot.ik_solver.set_goal(self.robot.left_foot.pose)\n        self.robot.ik_solver.set_weight(swing_weight)\n        self.robot.ik_solver.", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\n@settings(max_examples=100)\n@given(integers=integers(min_value=MIN_SIZE, max_value=MAX_SIZE))\ndef test_simple_operations(integers):\n    \"\"\"Test simple operations.\"\"\"\n    x, y =", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG, aJPEG.mICCProfile).encode(aOutput);\n\t\t}\n\n\t\tnew SOF0Segment(aJPEG, aJPEG.mScanWidth, aJPEG.mScanHeight, aJPEG", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (sl != null) {\n                SqlSessionFactory sqlMapper = sqlSessionFactory;\n                SqlSession session = sqlMapper.openSession();\n                try {\n                    LastschriftMapper mapper = session.getMapper(\n                            LastschriftMapper.class);", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "====================\n\nclass PretrainedDictionary(MetaClass):\n    \"\"\"Class for loading and managing pretrained dictionaries\"\"\"\n\n    def __init__(self, dictionary_path: str):\n        self.dictionary_path = dictionary_path\n        self.dictionary = {}\n        self", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       ItemStack stack = new ItemStack(Item.book);\n        stack.setItemDamage(ItemLorePage.getNextPage(entityPlayer));\n        stack.setTagCompound(new NBTTagCompound());\n        stack.getTagCompound().setString(\"lore", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private final UserService userService;\n    private final BudgetService budgetService;\n    private final TransactionService transactionService;\n    private final CategoryService categoryService;\n    private final GroupService groupService;\n    private final BudgetService budgetService;\n    private final PasswordEncoder passwordEncoder", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "public static final Util getInstance() {\n\treturn instance;\n}\n\n\tprivate static final Logger logger = LogManager.getLogger(Util.class);\n\n\tpublic static final Logger getLogger() {\n\t\treturn logger;\n\t}\n\n\tpublic static final CloudUtil cloudUtil", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    RotateInX(FlipX.class),\n    RotateInY(Flip", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSk(ch, der_mode=der_mode, key_schedule=bvf_cipher.key_schedule)\n\n        if verbose:\n            print(\"Searching characteristics...\")\n        problem.solve(initial_weight=initial_weight, solver_", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "=====================\n\n    def test_hosts_container(self):\n        hosts = HostsContainer(pty=DummyPty,\n                              hosts={ 'h1': self.h1, 'h2': self.h2, 'h3': self.h3, '", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "       return (\n            command.startswith(\"tc\") and command.split()[1] in [\n                \"filter\",\n                \"class\",\n                \"qdisc\",\n                \"link\",\n                \"root\",\n                \"dev\",\n                \"", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "=====================\n\n  assert isinstance(encoder, GLONASS_encoder_class)\n\n\ndef test_selectEncoder_2GLONASS():\n  '''\n  Test selecting encoder for 2 GLONASS bands\n  '''\n  enabledBands = {NormalRateConfig.GL", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "   public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDbHelper.getReadableDatabase();\n        Cursor cursor = db.rawQuery(ExpenseTable.QU", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private TextView monthTitleTextView;\n\n    private TextView monthYearTextView;\n\n    private TextView monthWeekTitleTextView;\n\n    private TextView monthWeekDayTitleTextView;\n\n    private TextView monthWeekDayTitleTextView1;\n\n    private TextView monthWeekDayTitle", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "```python\n    my_wn = white_noise()\n    assert isinstance(my_wn, Stream)\n    assert my_wn.take(100).sum() == 0\n```\n\nThis test checks that the white_noise function returns an instance of the Stream", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "=====================\n\ndef unify(t1, t2, backref=None):\n    \"\"\"Unify `t1` and `t2`\n\n    After unification `t1` and `t2` should be equal or `t1` should be a subtype\n   ", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "```python\n        self.auth = Auth()\n        self.network = None\n        self.homes = CaseInsensitiveDict()\n        self.last_refresh = 0\n        self.last_refresh_time = 0\n        self.last_refresh_error = None\n", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "=======================\n\n\t\treturn default_flags\n\n\tdef create_item(self, parent, data):\n\t\tif data is None:\n\t\t\treturn DocumentItem(self, parent, \"None\")\n\t\telif isinstance(data, Document):\n\t\t\treturn Document", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "=====================\n\ndef _CreateThriftTransport(\n    transport_type,\n    host,\n    port,\n    timeout,\n    max_frame_size,\n    max_message_size,\n    next_provider,\n    sink,\n    properties):\n  \"\"\"\n", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       ProcessBuilder pb = new ProcessBuilder(\"java\", \"-jar\", \"dumpling.jar\", \"threaddump\", \"-\");\n        pb.redirectErrorStream(ProcessBuilder.Redirect.INHERIT);\n        Process p = pb.start();\n        p.inputStream().write(asBytes", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return data;\n    }\n\n    private static Drummer<PLD, PLD> createDrummer(String name, int bucketSize, int numBuckets, int numThreads) {\n        return new Drummer<>(name, new KeyValueSerializer<PLD,", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader(this).loadVideos(new OnLoadFinishedCallback<VideoResult>() {\n            @Override\n            public void onLoadFinished(Loader<VideoResult> loader, VideoResult data) {\n                if (data != null) {\n                    tv", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       RoxanaProperties roxanaProperties = new RoxanaProperties();\n        RoxanaPropertiesMockBuilder roxanaPropertiesMockBuilder = new RoxanaPropertiesMockBuilder();\n        roxanaPropertiesMockBuilder.withLocale(Locale.US);\n        roxanaPropertiesMockBuilder.", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._socket.write(self._ping_msg)\n\n  def _CheckPingResponse(self):\n    \"\"\"Checks for a response to the last ping message.\"\"\"\n    self._log.debug('Checking for ping response.')\n    sz = self._socket.", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert abs(freq2lag(v) - lag2freq(v)) < 1e-12\n\n\nclass TestAlmostEqual:\n  def test_almost_equal(self):\n    assert almost_equal(1.0000000000", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "=====================\n\nclass ConfigCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.dbi = GlobalConfigCache(self.bot)\n        self.dbi.load()\n        self.config = self.", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if self.symbol == 'eq':\n        return numeric_equal(*operands)\n    elif self.symbol == 'ne':\n        return numeric_not_equal(*operands)\n    elif self.symbol == 'lt':\n        return numeric_less(*operands)", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(getResources().getString(R.string.welcome_message, getResources().getString(R.string.app_name)));\n        return header;\n    }\n\n    private void initializeEvents() {\n        // Se inicializan los eventos de los items", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Chat was created successfully\n            Log.d(this.getClass().getName(), \"Chat created successfully. newChatId: \" + newChatId);\n            try {\n                // Notify the fragment to show the chat\n                InvokeMethod.invokeStaticMethod(classToNotify,", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       MAP<String, String> result = wxPayService.unifiedOrder(request);\n        String code_url = result.get(\"code_url\");\n        LOG.info(\"code_url:{}\", code_url);\n        Assert.assertNotNull(code_url);\n   ", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       MessageMapper messageMapper = new MessageMapper(new MockedMessageMapper(KEY_01, SUCCESS),\n                new MockedMessageMapper(KEY_02, SUCCESS),\n                new MockedMessageMapper(KEY_03, SUCCESS));\n\n        List<Parameter", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\tpublic int readSmallIntValue() throws IOException {\n\t\tint d1 = in.read1();\n\t\tint tag = d1 & 0x0F;\n\t\tswitch (tag) {\n\t\t\tcase CODEINT4_TAG:\n\t\t\t\treturn", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "=======================\n\nfrom troveclient.client import Client as TroveClient\n\n\nclass TroveClient(troveclient.client.Client):\n    \"\"\"Top-level object to interact with the Trove API.\n\n    Create an instance with your credentials::\n\n        >> client", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "\n        parser_class_list += [\n            MacOsXPingParser,\n            AlpineLinuxPingParser,\n            FreeBSDPingParser,\n            OpenBSDPingParser,\n            NetBSDPingParser,\n            SolarisPingParser,", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       Main.setDefaultVideoProperties(Integer.parseInt(m.videoSetFrameRate.getText()));\n        }\n\r\n        // set video properties\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) > 0 && Integer.parseInt(m.videoSetHeight.getText", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self._probe = probe\n        else:\n            self._probe = _load_probe(kwargs.pop('probe_file', None))\n        self._kwargs = kwargs\n        self._logger = logging.getLogger(__name__)\n        self._logger.setLevel(logging.INFO)", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   public final Promise<Channel> connect(final Transport transport, final ChannelOptions channelOptions) {\n        // ...\n    }\n\n    @Override\n    public final Promise<Channel> reconnect(final Channel channel) {\n        // ...\n    }\n\n    @Override\n    public final", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "     self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self, filename):\n    \"\"\"\n      Analyzes the given bytecode file.\n    \"\"\"\n    self.load_bytecode(filename)\n    self.parse_byte", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       ObservableRegistry.getInstance().register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "public void visit(final InExp inExp) throws QueryException {\n    final String columnName = inExp.getColumn().getName();\n    result.append(\" \").append(columnName).append(\" IN (\");\n    final Object[] values = inExp.getValues();\n    for (", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/input/ddi-simple.xml\");\n\t\t\tFile outputFile = new File(basePath + \"/output/ddi-simple.xml\");\n\t\t\tFile inputFileCleaned = new File(basePath + \"/", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "       self.assertEqual(\n            Normal(mu=0.0, sigma=1.0).draw(10),\n            np.random.normal(loc=0.0, scale=1.0, size=(10,)),\n        )\n\n        self.assertEqual(\n", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionState.class);\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpad state\n\n        state = stateFactory.createState(VpaidState.class);\n        assertThat(", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(BooleanTag tag, boolean value) throws InvalidValueException {\n\t\tValidity validity = isValid(tag);\n\t\tif (validity != null && validity.isBoolean()) {\n\t\t\tvalidity.acceptBoolean(tag, value);\n\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "=====================\n\n    self.assertEqual(u\"\\u0906\\u092a\\u0915\\u093e \\u0936\\u093f\\u0936\\u0941\", replace_name(", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expect(systemUnderTestMock.nonVoidMethodWithOneParameter(GIVEN_STRING)).andThrow(\n                                new ExpectedException(ExpectedExecution.class,\n                                        \"The non-void method with one parameter of the SystemUnderTest \"\n                                                +", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "\n# Decoder for the rest octets of the RestOctets IE\nclass RestOctets(CSequence):\n    # name for the decoder\n    name = 'RestOctets'\n    # number of octets to decode\n    numOctets = 1\n    # list of", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "```python\n        if not skip_table_setup:\n            table_name = self.table_name(model)\n            table = self.session.describe_table(table_name)\n            if table is None:\n                self.create_table(model)\n           ", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "=====================\n\n    return RespostaSAT(conteudo)\n\n    def _http_post(self, metodo, **kwargs):\n        \"\"\"\n        TODO: implementar o método _http_post\n        \"\"\"\n        url = self.url_base + '/", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "```python\nwith pytest.raises(InvalidModel):\n    engine.bind(int)\n```\n\ndef test_bind_model_with_no_columns(engine):\n    \"\"\"Can't bind a model with no columns\"\"\"\n    class NoColumnsModel(BaseModel", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "=====================\n\nu7 = Unit(\"Msun/pc**3\")\nassert u7.dimensions == mass / length**3\nassert u7.registry_name == \"Msun/pc**3\"\nassert u7.registry_symbol == \"Msun/pc**3\"", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "=====================\n\n['Verify references to instances in a class',\n ['references', 'TST_Person'],\n {'stdout': ['\"root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"\"',\n            '\"root/cimv2:TST", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       loadModules();\n        // Register listeners\n        registerListeners();\n        // Register commands\n        registerCommands();\n        // Register events\n        registerEvents();\n        // Register services\n        registerServices();\n        // Register the Economy\n        registerEconomy();\n        // Register the Econom", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       tag = TAG()\n        if index == -1:\n            self._tags = []\n            self._numtags = 0\n            self._tag_update = True\n            self._tag_update_callback = None\n            self._tag_update_callback_userdata = None", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   public void startEditAccountActivity(Account account) {\n                        startActivity(EditAccountActivity.newIntent(MainActivity.this, account));\n                    }\n\n                    @Override\n                    public void startEditOrderActivity(Order order) {\n                        startActivity(Edit", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponse<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Query(\"page\") int page,\n\t\t\t@Query(\"sort\") String sort,\n\t\t\t@Query(\"nsfw\") boolean n", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(fdmexec)\n\n        resource = ThermometerResource(fdmexec)\n\n        resource = ThermometerResource(fdmexec)\n\n        resource = ThermometerResource(fdmexec)\n\n        resource = ThermometerResource(", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "```python\ndef test_ref_value_path(reference_tracker):\n    \"\"\"has path, value not dumped\"\"\"\n    column = User.name[\"first\"]\n    value = \"John\"\n    expected_path = \"User.name.first\"\n    expected_action", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           Platform.runLater(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    Alert alert = new Alert(Alert.AlertType.ERROR, \"Error adding queue item: \" + e.getMessage(), ButtonType.OK);\r\n                ", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "=====================\n        if request.method == 'POST':\n            form = self.form_class(request.POST)\n            if form.is_valid():\n                comment = form.save(commit=False)\n                comment.post = post\n                comment.user =", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a list of trending terms\n     *\n     * @param serviceIds the ids of the services to retrieve trending terms from\n     * @", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           disconnectFromWifi(mWifiManager);\n            wifiManager.disconnect();\n            }\n            wifiManager.disconnect();\n            of(mHandler).post(() -> {\n                of(mHandler).post(() -> {\n                    of(mHandler).", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorManager.getSensorList(SensorManager.SENSOR_TYPE_LIGHT)\n            LightSensorManager.registerListener(new LightSensorEventListener() {\n                @Override\n                public void onSensorChanged(SensorEvent event) {\r\n                    LightSensorManager.unregisterListener", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack.getArchivedCards()) {", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "=====================\n\nclass SegmentVadFunction(KaldiVadFunction):\n    \"\"\"\n    Multithreaded function to perform VAD on a set of utterances.\n\n    This function takes a list of utterances and their corresponding files, and performs VAD on each utterance", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Vms vms;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    private final VmsCli vmsCli;\n    private final JobsCli jobsCli;\n    private final Task", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self._tags = []\n        self._num_tags = 0\n        self._tags_updated = False\n        self._tags_updated_callback = None\n\n        self._get_tags = cfunc(\n            \"FMOD_RESULT FMOD_Sound_GetTags(F", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "           section.add_parameter(\n                bufr_message.length,\n                'section_length',\n                'unit',\n                'bytes',\n                'value',\n                nbytes_write\n            )\n\n        # TODO: This is a hack to", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "=====================\n\n    form = ReportAbuseForm(request.POST)\n\n    if form.is_valid():\n        report = AbuseReport.objects.create(\n            logged_against=logged_against,\n            logged_by=logged_by,\n", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   public void listenToResultSet(final Benchmark benchmark, final BenchmarkResult result) {\n\n        final NiceTable table = new NiceTable(new String[]{\"Method\", \"Mean\", \"StdDev\", \"Min\", \"Max\", \"Count\"});\n\n        final Ben", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       Application application = new Application();\n        try {\n            application.run(args);\n        } catch (Exception e) {\n            errorln(\"Error: \" + e.getMessage());\n            finalize(1);\n        }\n\n        finalize(0);\n    }\n\n", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t}\n}\n\n// The following code snippet is the missing part of the code.\n// It should be added after the line \"tropo.say(\"Thank you for calling. This call will be recorded.\");\"\n\n// Record the call for 1 minute\nDo record = Do.", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "               listaDeRespostas.getPropriedades().getEstado() != EstadoDaListaDeRespostas.FINALIZADA) {\n\t\t\t// Se a lista não estiver finalizada, salva a resposta\n\t\t\t// Se a questão não", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, Object data) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tadapter = new PageAdapter(getSupportFragmentManager(), ProgramManager.getInstance().getProgramList());\n\t\t\t\t\tmView", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   AdInterface adInterface;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    AdMediaModel adMediaModel;\n\n    @Mock\n    AdMediaModel adMediaModel_1;\n\n    @Mock\n    AdMediaModel adMedia", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tPlatform.runLater(new Runnable() {\n\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String className = rawName(type) + \"Inject\";\n    String injectClassName = adapterClassName(className);\n    String injectClassNameWithSuffix = injectClassName + INJECT_SUFFIX;\n\n    TypeSpec injectSpec = new TypeSpec.Builder(className, TypeSpec.COMPAN", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n        }\r\n        }\r\n        }\r\n        }\r\n        }\r\n        }\r\n        }\r\n        }\r\n        }\r\n        }\r\n        }\r\n        }\r\n        }\r\n        }\r\n       ", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "=====================\n  assert isinstance(args.gps_sv[0].message, ZeroOne)\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepare_args_parser()\n  params = [\n     ", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "\n    if suffix:\n        return path + suffix\n    return path\n\n@method(function('string-join', arity=2, sequence_type='xs:string*'))\ndef evaluate_string_join(self, context):\n    if not self:\n        return ''\n   ", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "=====================\n\ndef last_record(table, fill=False):\n\"\"\"\nReturn the last record of the table\n\n:param table: a Table object\n:param fill: if True, empty values are filled with NaN\n:return: a dictionary with the last record\n\"\"\"\nrecord", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else if (message.getType() == MessageType.USER_INFO)\n            {\n                UserInfoMessage m = (UserInfoMessage", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "=====================\n\n\t\tEXOG_A = []\n\t\tEXOG_B = []\n\n\t\tif opts.lefthemisphere:\n\t\t\tEXOG_A = create_exog(data, dmy_lefthemisphere, dmy_subjects,", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       main.getLock().monitor().enter();\n        pause(100);\n        main.getLock().monitor().exit();\n        pause(100);\n\n        ThreadDump threadDump = sut.runtime().getThreadDump();\n        ThreadDump.Thread", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               DatePicker datePicker = new DatePicker(this, DatePicker.YEAR_MONTH_DAY);\n                datePicker.setOnDateChangedListener(new DatePicker.OnDateChangedListener() {\n                    @Override\n                    public void onDateChanged(DatePicker view,", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensor.flushDBCache(deviceID);\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensor.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            Pro", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n\n    private ViewPager mViewPager;\n    private TabLayout tabLayout;\n\n    private List<Fragment> fragmentList = new ArrayList<>();\n    private List<String> titleList = new ArrayList<>();\n\n    private static final int RE", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "```python\nself.tracerouter = Tracerouter.Tracerouter(self)\n```\n\n        self.tracerouter = Tracerouter.Tracerouter(self)\n        self.tracerouter.start()\n\n        self.launch_threads()\n\n", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "```python\nassert isinstance(deltas.deltas[4].attributes, Thread)\n```\nThis line of code will raise an AttributeError because the `Delta` class does not have an `attributes` attribute. Instead, you should access the `attributes` of the instantiated object", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "   @property\n    def outbox(self):\n        return Outbox(self)\n\n    def is_opensource(self):\n        return self.account_type == \"opensource\"\n\n    def is_enterprise(self):\n        return self.account_type == \"", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "   activityLightLevelManager = new ActivityLightLevelManager(this, activityLightLevelChanger);\n\n    // Set up the UI\n    setContentView(R.layout.activity_dynamic_map);\n\n    // Set up the UI\n    skyView = (GLSurfaceView) findViewById", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "=====================\nnon_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=parameters, context=ctx)\n=====================\n\n        lnlike = np.log(1.0 + np.exp(-", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           ID( 'ID', 'IMSI', 'Str', 'IMSI', Trans=ID_IMSI, LenFunc=LenFunc_IMSI, \\\n                TransFunc=TransFunc_IMSI, Dict=Dict_IMSI, \\\n                Optional=True, **kwargs", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "```python\n        TcClassParser(self.__con).parse(device, run_tc_command=self.is_parse_classid)\n```\nThis line of code parses the tc class configuration for the given device using the TcClassParser class. The parse method of the", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "=====================\nif type(right) == Column:\n    result, index = apply_fast(left.values, right.values, left.index,\n                             operator=np.equal)\n    return Column(result, index)\n\nelse:\n    return Column(np.equal", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "```python\n@validation_error(SwaggerMappingError)\ndef validate_response(response):\n    # ...\n```\n\nThis decorator is used to transform a SwaggerMappingError into a\nRequestValidationError. This is necessary because SwaggerMappingError\nis not a subclass", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
