{"pred": "   private final transient KademliaRoutingTable routingTable;\n    private final transient MessageFactory messageFactory;\n    private final transient JsonSerializer<JKademliaRoutingTable> routingTableSerializer;\n    private final transient JsonSerializer<DHT> dhtSerializer;\n   ", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       mEffects.add(new NoEffect());\n        mEffects.add(new SobelEdgeDetection());\n        mEffects.add(new SobelEdgeDetection2());\n        mEffects.add(new SobelEdgeDetection3());\n        mEffects.add(", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class MyCipher(Cipher):  # noqa: D101\n    input_width = 8\n    output_width = 8\n    rounds = 1\n\n    @classmethod\n    def key_schedule(cls, master_key):\n        return KeySchedule1", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n\n    public EffectManager(Activity activity, ViewGroup parameterListView) {\n        mActivity = activity;\n        mParameterListView = parameterListView;\n\n        mEffects = new ArrayList<>();\n        mEffects.add", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "   private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务配置\n     */\n    private TaskMetaManager taskMetaManager", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.path(), passphrase.chars(), args.checkFileIntegrity());\n\t\t\tif (problems.isEmpty()) {\n\t\t\t\tprint(\"Integrity check passed.\");\n\t\t\t\treturn;\n", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           Log.d(this.getClass().getName(), \"Device registered with id: \" + deviceId);\n            return true;\n        } catch (Exception e) {\n            Log.e(this.getClass().getName(), \"Error registering device: \" + e.getMessage());\n            return false", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   U2FSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID);\n\n    assertEquals(new U2FSignRequest(ACCOUNT_NAME, APP_ID, SERVER_CHALLENGE_SIGN_BASE64),", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           self.acctA = RadiusAccounting(self.ua, self.ua.cId, self.ua.cldi, self.ua.cldi, self.ua.cldi, self.ua.cldi, self.ua.cldi, self", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\nclass URI(Signature):\n    __typeid__ = -1\n    __slots__ = ('_uri', '_creation_time', '_expiration_time', '_compression', '_hash')\n\n    def __init__(self, uri, creation_time=None, expiration", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "=====================\n\ndef convert_ast_constraint(ast_node):\n  \"\"\"\n    Convert an AST node to a constraint.\n  \"\"\"\n  if ast_node is None:\n    return None\n\n  if isinstance(ast_node, (ast.Num, ast.Str", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity != null) {\n            Fragment", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       String login = App.getAppContext().getSharedPreferences(\"AppSettings\", Context.MODE_PRIVATE)\n                .getString(\"userLogin\", \"\");\n        String email = App.getAppContext().getSharedPreferences(\"AppSettings\", Context.MODE_PRIVATE)\n                .getString", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "```python\nnetwork = Network('net1')\n```\n\nCreate a network named 'net1'.\n\nNext line of code:\n```python\npipeline = InterLayerPipeline(network, 16, resource)\n```\n\nCreate an inter-layer pipeline for the network", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "```python\nclass User(BaseModel):\n    id = Column(String, hash_key=True)\n    name = Column(String)\n    age = Column(Integer)\n\n    def __init__(self, name, age):\n        super().__init__()\n        self", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "```python\n@method('path')\ndef nud(self):\n    self.kind = 'path'\n    self.label = 'path'\n    self.xpath = self.parser.parse_xpath(self.value)\n    self.xpath.parser = self", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    @BindView(R.id.movie_title) TextView title;\n    @BindView(R.id.movie_description) TextView description;\n    @BindView(R.id.movie_rating) TextView rating;\n    @BindView(R", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(CREATE_MBEAN, correlationId, instance.getObjectName());\n\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "=====================\n\n        wild.set_message(wild_report)\n        wild.monitor_task = wild.create_task_tuple(self.monitor_wild(wild))\n        await wild.insert()\n\n\n    @cmd_wild.command(name='", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "```python\ndata = SNLIData(\n    part=\"train\",\n    batch_size=c['batch_size'],\n    shuffle=True,\n    seed=c['seed'],\n    get_raw=False,\n    get_definitions=True,\n    reader", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n  # This test fails because DopplerSine is not defined in the code.\n  # To make it pass, you need to define DopplerSine class and implement\n  # its methods.\n\n\ndef test_params_", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivity(intent);\n\n            } else if (raffle.isValidSex(isMan) &&", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "=======================\n\nclass RedlockTests(TestCase):\n    'Redlock tests.'\n\n    def setUp(self):\n        super().setUp()\n        self.redlock = Redlock(\n            masters={self.redis},\n            key='test_redlock',\n", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "class Sound(FmodObject):\n    \"\"\"Container for sample data that can be played on a\n    :py:class:`Channel`.\"\"\"\n\n    def __init__(self, ptr, name):\n        super().__init__(ptr)\n        self.name = name\n\n    @property", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "\n    @calg.register(CompressionAlgorithm)\n    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n\n    @sdproperty\n    def data(self):\n        return self._data\n\n    @data.register(", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "findCellSize(imgshape, findCellSizeParameter = None, maxLabel = imgshape.max(), verbose = verbose, out = out, **parameter);\n\n        # cell intensity\n        findCellIntensityParameter = getParameter(detectSpotsParameter, \"findCellIntensityParameter\",", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           Assets.perfectTapSound.play();\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play();\n        } else if (accuracy == Accuracy.NICE) {\n            Assets", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\r\n                Transaction transaction = transactionIterator.next();\r\n                printer.print(transaction);\r\n                System.out.println(print.toString());\r            }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private boolean", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               //return pgm;\n            }\n        }\n        return pgm;\n    }\n\n    /**\n     * Execute the compiled SQL query.\n     *\n     * @param sqlQuery\n     * @param namedParams\n     * @param reqHeaders\n     * @", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                   UsageMode.OS,\n                    OperationMode.CBC,\n                    EncryptionAlgorithmCoded.TWOKEY3DES,\n                    AlgorithmParameterName.IV,\n                    AlgorithmParameterIVName.IVC,\n                    AlgorithmParameterIVValue=", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.combExpCheck[i] == 0) {\n                                env.combExpCheck[i] = 1;\n                                setupCombExpCheck(root, i);\n                            }\n                        }\n                    }\n                }\n           ", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "=====================\n\nurl(r'^$', login_required(TranStatusDashboardView.as_view()), name=\"dashboard\"),\n\n\n# Django REST Framework\n\napi_urls = [\n    url(r'^api/', include(api_urls)),", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic ResourceData (MainActivity activity, Resources res) {\n\t\t\tmeter = new MeterSpec (MeterSpec.Type.NETWORK, activity, res);\n\t\t\ttags = new EnumMap<SRSLevel, String> (SRSLevel.class);", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "   def set_storage_type(self, storage_type):\n        if storage_type in STORAGE_TYPES:\n            self._storage_type = storage_type\n        else:\n            raise PyOrientError(\n                \"Invalid storage type: \" + storage_type,", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public GivenWhenThenDsl<$SystemUnderTest> when() {\n        return new GivenWhenThenDsl<>(preparation, thenStepFactory);\n    }\n}\n\npackage testasyouthink;\n\nimport java.util.Queue;\nimport java.util.function.", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "   CommandResult result;\n    try {\n      result = process.await();\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(this, e);\n    } catch (CommandFailureException.CommandFailureExceptionWithSuppressed e) {\n      throw new I", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = Themer.getColor(contextRef, R.color.text_color);\n\t}\n\tprivate void setTextSize() {\n\t\ttextSize = Themer.getDimension(contextRef, R.dimen.text_size);\n\t}\n\tprivate", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);\n\t\tif (msg.isTextMessage()) {\n\t\t\tString userId = msg.getFromUserName();\n\t\t\tString text = msg.getText();\n\t\t\tString responseText = talk", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "# 检查以上目录是否存在，如果存在则认为已经运行过该 apk 文件。\nif os.path.exists(os.path.join(UPLOAD_DIR, file_path.split('/')[-1].split('.')", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @command(pass_context=True, name=\"raid-city\", category='Bot Info', aliases=[\"rc\"])\n    @checks.is_owner()\n    async def cmd_raidcity(self, ctx):\n        \"\"\"\n        **!raid-city** - sets the", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25))\n        self.assertEqual(date_string_to_date(\"11/12/2012\"),", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file, '/tmp')\n        config_actor.start()\n\n        # startup session database\n        database_actor = DatabaseActor(99, 999, db_file, config_actor.config)\n        database_actor.start", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           ShareUtil.shareText(mActivity, picture.getText_content().trim());\n                            break;\n                        case 1:\n                            ShareUtil.sharePicture(mActivity, picture.getText_content().trim(),\n                                    picture.getText_content().trim()", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\t\tsaveauto(positive_data[:,j], index, \"pFWER_con%d.mgh\" % (j+1))\n\t\t\t\t\t\tsaveauto(negative_", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               ResponseSyncAdapter.class,\n                SurveyActivity.class,\n                SurveyActivity.SurveyFragment.class,\n                SurveyActivity.SurveyListFragment.class,\n                SurveyActivity.SurveyListAdapter.class,\n                SurveyActivity.SurveyListAdapter", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "=====================\n\nclass SignatureV4(SignatureV4):\n    \"\"\"\n    5.2.  Version 4 Signature Packet\n\n    The Version 4 Signature packet contains the following fields:\n\n       - A version number (4).\n       - The signature type (", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "```python\n@method(nullary('.'))\ndef select_self(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    elif isinstance(context, XPathContext):\n        if context.item is not None:\n           ", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "=====================\n\n    'no_members': Counter,\n    }\n\n    def __init__(self, name, lock):\n      self._name = name\n      self._lock = lock\n      self._size = 0\n      self._no_members = 0\n     ", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       message = {'message': 'store',\n                  'public_key': PUBLIC_KEY,\n                  'key': KEY,\n                  'value': VALUE,\n                  'timestamp': TIMESTAMP,\n                  'signature': SIGNATURE}\n        nc", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"SELECT * FROM users WHERE id = ?\", se.getQuery());\n        assertEquals(1, se.getAllParameters().size());\n        assertEquals(1, se.getSetParams().size());\n        assertEquals(0,", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n\n        // FAILS: expected:<org.hamcrest.Matchers$TypeSafeMatcher@1a322b", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               continue\n\n            # Send the ADR request\n            log.info(\"Sending ADR request to device {}: {}\".format(\n                    device.devaddr, device.tx_datarate))\n            self._sendADRRequest(device)\n\n        self.adr", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "=======================\n                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcess(i, return_queue, function, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# IEEE 802.15.4 MAC header\n#\nclass MAC_header(Layer):\n    '''\n    IEEE 802.15.4 MAC header\n    '''\n    #\n    # debugging\n    #\n    dbg = DB", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       Observable.register(this);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRetainInstance(true);\n\n        Bundle args = getArguments();\n        if (args !=", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "=======================\n\n    parameter = DataElementField(type=ParameterTwostepTAN6)\n\n\nclass HITAN(FinTS3Segment):\n    \"\"\"Zwei-Schritt-TAN-Einreichung, version 1\n\n    Source: FinTS ", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "       ref_time = self.img_handle.ref_time\n\n        # If the reference time is not given, use the current time\n        if ref_time is None:\n            ref_time = datetime.datetime.utcnow()\n\n        # Convert reference time to Julian date\n", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       if (mPublicRoomsListList != null) {\n            mPublicRoomsListList.clear();\n        }\n\n        mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n\n        for (String homeserver : mHomeServers) {\n           ", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "```python\n@group(name=\"bingo\", invoke_without_command=True, category=\"Games\")\nasync def bingo(ctx):\n    await ctx.send(\"Welcome to the Bingo Game!\")\n    await ctx.send(\"Please enter the event name and the number", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "```python\n        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n```\n\n    #running adjacency inference\n    inferer = AdjacencyInferer(raw_bp_graphs", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   initMiPush();}\n                stopGCM();\n                stopHwPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HwPush\":\n                stopGCM();\n              ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new StringArrayResponseHandler());\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new VoidResponseHandler());\n        registry.", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public PersonalVulnsWindow() {\n        initComponents();\n        initListeners();\n        initTree();\n        initTreeListeners();\n        initTreeCellRenderer();\n        initTreeModel();\n        initTreeSorting();\n        initTreeSearching();\n        initTreeMerging();", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   public Panel() {\n        initComponents();\n        initListeners();\n        initData();\n    }\n\n    private void initData() {\n        datasetGenerator = new DatasetGenerator();\n        gcStatsTable.setModel(datasetGenerator.newTableModel());\n        gcStats", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.getType() == PacketType.CONNECT) {\n            onConnect(packet, client, transport);\n        } else if (packet.getType() == PacketType.DISCONNECT) {\n            onDisconnect(packet, client, transport);\n        } else if (packet", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       videoSource = factory.createVideoSource(videoCapturer,\n            appRtcClient.videoConstraints());\n      } else {\n        videoSource = factory.createVideoSource(videoCapturer);\n      }\n      videoSource.addTrack(factory.createVideoTrack(\"ARDAMS", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 0);\n\n            return contentValues;\n        }\n\n        protected void onDatabaseCreated() {\n            if (!mDatabaseCreated) {\n                onCreateInner(getWritableDatabase());\n               ", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    # create a system object\n    class MyClass:\n        def __init__(self):\n            self.x = 0\n\n        def increment(self):\n            self.x += 1\n\n    obj =", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "=======================\n\n        self.setup_docker_support(docker_config)\n        self.setup_docker_environment(docker_config)\n        self.setup_docker_volumes(docker_config)\n        self.setup_docker_network(", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   Observable<List<Board>> boardsObservable = Observable.fromIterable(Arrays.asList(SectionNames))\n        .flatMap(new Function<String, ObservableSource<List<Board>>>() {\n          @Override public ObservableSource<List<Board>> apply(@NonNull String sectionName)", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       FragmentObservable.getInstance().register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tICompilationUnit unit = null;\r\n\tICompilationUnit testUnit = null;\r\n\tICompilationUnit baseUnit = null;\r\n\tICompilationUnit testBaseUnit = null;\r\n\tICompilationUnit testBaseUnitToCreate = null;\r\n\tICompilationUnit test", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       simulator_data_client = SimulatorDataClient()\n        simulator_data_listener = MockSimulatorDataListener()\n        simulator_data_client.add_simulator_data_listener(simulator_data_listener)\n\n        simulator_data = fdm_", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           String response = new String(httpMessage.getRes().getResponse());\n            textareaMessage.setText(response);\n            textareaMessage.setCaretPosition(0);\n            textareaMessage.setSelectionStart(0);\n            textareaMessage.setSelectionEnd(response.length", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "\ndef test_status_with_gsi(description):\n    \"\"\"Status is busy because table isn't ACTIVE, one GSI is busy\"\"\"\n    description[\"TableStatus\"] = \"ACTIVE\"\n    description[\"GlobalSecondaryIndexes\"] = [{\"IndexStatus\": \"BUSY\"", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "=====================\n\nclass IffID3(ID3):\n    \"\"\"A IFF file with ID3v2 tags\"\"\"\n\n    def __init__(self, filething, known_frames=None, translate=True,\n                 v2_version=4, load_v1=", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitCheckForProximity(new VisitCheckForProximity(n.f0, n.f1, n.f2, opToOccur.get(op), n.f3, n.f4, n.f5, n.f6, n.f7", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new EqualizeTransformation(),\n                    new SolarizeTransformation()\n                    )),\n    FILTERS(\"Filters\",\n            Arrays.asList(\n                    new ThresholdTrans", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "```python\n            if self._header[1] == 1:\n                exception_class = PyOrientCommandException\n            elif self._header[1] == 2:\n                exception_class = PyOrientConnectionPoolException\n            elif self._header[1] == 3", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "=====================\n\napi = DERBMDATA(args.apikey)\n\nif args.fromdate and args.fromtime:\n    args_get_datetime(args)\n\nparams = {\n    'FromDate': args.fromdatetime,\n    'ToDate': args", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum();\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage();\n\t\t\t}\n\t\t\titem.copyFrom( proxy );\n\t\t\titems.add( item );\n\t\t}\n\t\treturn items", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   user_key = dump_key(engine, user)\n    assert user_key == {\"id\": {\"S\": \"foo\"}}\n\n\ndef test_load_key():\n    user = User(id=\"foo\")\n    user_key = {\"id\": {\"S\": \"foo", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new TaskName()),\n        StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_SLASHES),\n        StaticString.WHITESPACE,\n        new Percentage(),\n        StaticString.", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "public static Iframe iframe(Attribute... attributes) {\n\t\treturn new Iframe(attributes);\n\t}\n\tpublic static Hr hr() {\n\t\treturn new Hr();\n\t}\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "=======================\n\nevents.append(Event(e))\n\nreturn events\n\n# Projects\ndef list_projects(self, params=None):\ndata = self.call_api(\"projects\", type=\"GET\", params=params)\nprojects = list()\nfor p in data[\"", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   Matcher<? super BatchParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    //////////////////////////////////////////////////////////////////////////////\n    // PreparedStatementAssertions\n    //////////////////////////////////////////////////////////////////////////////\n", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           if (mWallpaper != null) {\r\n                Wallpaper wallpaper = mWallpaper;\r\n                if (mWallpaper.isSet()) {\r\n                    if (mWallpaper.isLockScreen()) {\r\n                        if (mWallpaper.isLockScreen()) {\r\n", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "\n  private static final Map<Operator, Query> opToQuery = new HashMap<Operator, Query>();\r\n\r\n  static {\r\n    opToQuery.put(Operator.AND, new BooleanQuery.Builder().build());\r    // BooleanQuery.Builder() is deprecated, use BooleanQuery()", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\n\t\tif args.vcf:\n\t\t\tprint ('Converting VCF to PLINK format')\n\t\t\tplink_converter(args.vcf, args.out, args.study_name, args.id, args.map, args.ref, args", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "=====================\n\n        self.beginning_datetime = filenameToDatetime(os.path.basename(self.vid_path))\n\n        # Get the FPS of the video\n        self.fps = self.vidinfo.ts/self.vidinfo.seqlen\n", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "# 3. create image\nimg = models.ConfocalImage(shape=(128,128), dtype=np.float32)\n\n# 4. add particles\nfor obj in objects:\n    img += obj.get_image(img.shape, psf=", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tFoodGroupRegistry.sync(player);\n\t}\n\n\tpublic static void setInStone()\n\t{\n\t\tFoodGroupRegistry.setInStone();\n\t}\n\n\tpublic static void clear()\n\t{\n\t\tFoodGroupRegistry.clear", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "=====================\n\ndef view_post(request, pk, username, slug):\n    post = get_object_or_404(Post, id=pk, user__username=username, slug=slug)\n    if post.deleted:\n        messages.error(", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tISelection selection = new SingleCellSelection(selectedCells.iterator().next());\n\t\t\t\t\t\tsetSelection(selection);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tISelection selection = new MultiCell", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   @keyclass.register(RevocationKeyClass)\n    def keyclass_revocationkeyclass(self, val):\n        self._keyclass = val\n\n    @sdproperty\n    def public_key_algorithm(self):\n        return self._public_key_algorithm\n\n", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "```python\n        if is_processing_instruction_node(item):\n            yield item\n```\n\n\n@method(function('document', nargs=0, label='document node'))\ndef evaluate_document_function(self, context=None):\n    if context is None", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "\ndef handlePuffleAdopted(client, puffle):\r\n    client['puffles'].append(puffle)\r\n    client['data'].puffles.append(puffle)\r\n    client['room'].send('p', client['id'], puffle)\n    client['room", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "\nfig, ax = pl.subplots(figsize=(10,10))\n\n# Create the figure and axes\n\n# Set up the interaction widget\n\niw = interaction.InteractionWidget(fig, size=10, cmap='RdBu')\n\n#", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "```python\n        with tqdm.tqdm(total=len(jobs)) as pbar:\n            results = run_mp(compile_information_func, jobs, self.log_directory)\n            for result in results:\n                pbar.update(1)", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "======================\n\n# Recompute the rotation wrt horizon\nplatepar.rotation_from_horiz = RMS.apply(rotationWrtHorizon, [platepar])[0]\n\n\n# Update the reference pointing\nplatepar.updateRefPointing()\n\n", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_INTERVAL_MS, validInterval ? 10_000L : 0L);\n        contentValues.put(JobStorage.COLUMN_TAG, \"test\");\n        contentValues.put(JobStorage.COLUMN_", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       FragmentObservable.getObservable(ChatSettingsInfo.class).register(this);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRetainInstance(true);\n        B", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "class ProgressFilter(django_filters.FilterSet):\n    indicator = django_filters.ModelChoiceFilter(\n        name='component__indicator', queryset=Indicator.objects.all())\n    target = django_filters.ModelChoiceFilter(\n        name='component__target', queryset=", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           presenter.getProduceData().updateDatabase(produces, presenter.getProduceData().getCategory());\n            GoogleAnalytics.getInstance(getContext()).reportEvent(Constants.CATEGORY, Constants.ACTION, Constants.LABEL);\n            GoogleAnalytics.getInstance(", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "           @Override\n            protected void onFailure(final Throwable cause) throws Exception {\n                context.handleError(cause);\n\n                reconnecting.fail(cause);\n            }\n        }).then(new OnComplete<Channel>() {\n            @Override\n            protected", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               new RegistrationParam(success, email, message));\n    }\n}\n\npackage de.fau.cs.mad.yasd.android.yasd;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.Shared", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final Router<Road, RoadPoint> router;\n\n    /**\n     * Creates a new instance of {@link Matcher} filter.\n     *\n     * @param map {@link RoadMap} object for map matching.\n     * @param router {@link Router} object", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private FilterUrl filterUrl;\n    private List<FilterType> filterTypes;\n    private List<FilterType> filterTypes_left;\n    private List<FilterType> filterTypes_right;\n    private HashMap<Integer, Integer> filterTypeMap;\n    private HashMap<Integer,", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " message = args.gps_sv[0].getMessage()\n  assert isinstance(message, ConstMessage)\n  assert message.bitValue == 0\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgs", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "=====================\n\n        with DisplayListGenerator() as dl:\n            self.display_list = dl\n            self._render_stroke()\n            self._render_fill()\n            self._render_text()\n            self._render_shape()\n            self._render_marker()\n", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"A\")) {\n\t\t\t\t\ta = new AppData(data.substring(1).split(\"\\\\s+\"));\n\t\t\t\t} else if (data.startsWith(\"S\")) {\n\t\t\t\t\ta = new", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppInfoAction.isShow && AppInfoAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppInfoAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt, self.beg_az = raDec2AltAz(self.beg_vect[0], self.beg_vect[1], self.lat, self.lon)\n        self.end_alt, self.end_az = ra", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n}\npackage mantra;\nimport java.io.File", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "public boolean enter(Node node) {\n    return true;\n}\n}\n\n/**\n * Visitors that need to add nodes to the tree implement this interface.\n */\npublic interface NodeAdditionVisitor {\n\n    /**\n     * Called when the visitor reaches a node with children.", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    public OpenAPIProcessor() {\n        parserFactories.add(new SpringParserFactory());\n    }\n\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {\n        return new HashSet<>(Arrays.asList(\n                OpenApi.class.getName(),", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritSettings.class).toInstance(new GerritSettings());\n\n        install(new GerritUiModule());\n        install(new GerritDiffModule());\n        install(new GerritActionsModule());\n        install(new GerritRestModule());", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   File snapshot = snapshots.get(i);\r\n                    long zxid = getZxidFromSnapshotName(snapshot);\r\n                    if (zxid >= zxidLong) {\r\n                        snapFile = snapshot;\r\n                        break;\r\n                    }\r\n                ", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "=====================\n\ndef _visible_entries_for_account(self, account):\n        self._invalidate_cache()\n        entries = self.document.account_entries(account, self.document.date_range)\n        if self.filter_string:\n            query = self", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   def __init__(self, CallName='', RepName='', **kwargs):\n        super(segment, self).__init__(CallName, RepName, **kwargs)\n        self.set_in_block(True)\n        self.Trans = True\n        self.Type = kwargs", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Api.getApi().searchBeers(query)\n\t\t\t\t\t\t\t.map(beers -> new SearchResult(beers, query))\n\t\t\t\t", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "# 2. background\nbackground = np.zeros((100, 100, 3), dtype=np.float32)\nbackground[:,:,0] += 100\nbackground[:,:,1] += 100\nbackground[:,:,2]", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "=====================\n\nif __name__ == '__main__':\n    a = Column(np.array([1, 2, 3, 4, 5], dtype=np.int64), np.array([0, 1, 2, 3, 4", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    stringBuilder.append(\"\\nRequest \")\r\n                        .append(request.getName());\r\n                    if (request.isRequested()) {\r\n                        stringBuilder.append(\" (requested)\");\r\n", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "=====================\n\nclass AbstractDateTime(metaclass=AtomicTypeMeta):\n    \"\"\"\n    A base class for representing XSD date and date-time types.\n    \"\"\"\n    xsd_type: str\n\n    def __init__(self, year: int, month: int", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           return SearchMenuPage()\n        if pageletId == 'Mediathek':\n            return Mediathek(self.settings)\n        if pageletId == 'Player':\n            return PlayVideo()\n        if pageletId == 'Playlist':\n            return Playlist()", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "           if not checkFileExistence(pattern.datafile):\n                errormsg = \"Pattern %s:  Data file %s does not exist!\"%(pattern.name, pattern.datafile)\n                errormsg += \"\\n\"\n                errormsg += \"Please", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "=====================\n    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "private StarItemAdapter starItemAdapter;\nprivate List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n\n    private Content", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\t\n\t\tString surveyName = \"test\";\n\t\tString inputPath = basePathDDI2FO + \"/test.xml\";\n\t\tString outputPath = base", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       new UserLoginTask(user, LoginFragment.this).execute(\"1\");\n                    }\n                });\n\n        // \"Cancel\" button to close the dialog\n        alert.setNegativeButton(R.string.cancel, null);\n\n        alert.show();\n   ", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "\n    url(r'^$', login_required(PackageSettingsView.as_view()), name=\"settings-packages\"),\n\n    url(r'^new$', login_required(NewPackageView.as_view()), name=\"settings-packages-new\"),\n    url(r'", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "```python\ndef test_GPSL1L2BitEncoder_init():\n  '''\n  Test construction of GPS L1/L2 single bit dual band encoder\n  '''\n  encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "class TestSave(unittest.TestCase):\n    def setUp(self):\n        self.inputWav = join(\"data\", \"test_save_input.wav\")\n        self.inputTextgrid = join(\"data\", \"test_save_input.TextGrid\")\n        self", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "```python\n                    p = KaldiProcessWorker(i, return_queue, function, stopped, self.log_file)\n                    procs.append(p)\n                    p.start()\n```\nThis code creates a new KaldiProcessWorker instance for each", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "           dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n        dataset =", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void set(FixTag tag, Object value);\n}\n\npublic interface TagValueConsumer {\n    void acceptBoolean(FixTag tag, boolean value);\n    void acceptChar(FixTag tag, char value);\n    void acceptDouble(FixTag tag, double value);\n    void accept", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "=====================\n\nyield self(get_data(self._kwargs['filename']),\n           chunk_bounds=bounds,\n           keep_bounds=self._kwargs['keep_bounds'])\n\n# The following code is not executed in the main loop.\n# It is used to initialize the", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRIQueryNode iriQueryNode, Void param) {\n\t\t\tthrow new RuntimeException(\"Not implemented.\");\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRIQueryNodeList iri", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t}\n\t", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(ObjectInstance.class));\n        registry.put((byte) (GET_OBJECT_INSTANCE ^ RESPONSE_MASK), new MarshalledResponseHandler<Object", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       String language = languageDetector.detectLanguage(content);\n                        if (language != null && language.equals(lang)) {\n                            FileSaver fs = new FileSaver(content, language, \"twitter\", url, this.lang);\n                            String fileName = fs.", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "=====================\n\n        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, descriptor.name))\n\n        elif isinstance(descriptor, AssociativeOperatorDescriptor):\n            lines.append('{}{} {} {}'.format(indent, descriptor", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "\n    group.add_argument(\n        \"--delay\",\n        dest=\"latency_time\",\n        help=\"\"\"network latency [milliseconds].\n        the minimum latency time is 0ms.\n        valid units are: ms.\n        e.g. tcset eth0", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       try:\n            contact = Contact.objects.get(phone_number=self.phone_number)\n        except Contact.DoesNotExist:\n            contact = None\n        except MultipleObjectsReturned:\n            contact = Contact.objects.get(phone_number=self.phone", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   pipeline.apply(\"Read live projects\", new LiveProjectSource(org).apply(Read.fromPCollection(Pipeline.asList(taggedKnownGoodStates, liveProjects))));\n\n    // Extract the state of each project.\n    PCollection<KV<GCPResource", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.generator = SimilarPathGenerator()\n\n    def test_get_pattern_for_directory(self):\n        self.assertEqual(self.generator.get_pattern(\"/test/\"), \"/%{/test/%/}\")\n\n    def test_get_pattern_for_file(", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ff", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(AndCondition(*[condition_for(op) for op in operations if op]))\n    if \"or\" in operations:\n        conditions.append(OrCondition(*[condition_for(op) for op in operations if op]))\n    if \"not\" in operations:\n", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 1\n        assert get_square_idx(0, 2) == 2\n        assert get_square_idx(1, 0)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final IType testClassType;\n\n    private final IType baseClassType;\n\n    private final IType baseClass;\n\n    private final IMethod baseMethod;\n\n    private final IMethod baseMethodWithAnnotation;\n\n    private final IMethod baseMethodWithAnnotationAnd", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "=====================\n\nself.next_sink.SetSinkProperties(sink_properties)\nself.next_sink.SetVarz(self.Varz())\nself.next_sink.SetName('timeout_sink')\nself.next_sink.SetRole", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate static final String[] FONT_NAMES = { \"Helvetica\", \"Helvetica-Bold\",\n\t\t\t\"Helvetica-Oblique\", \"Helvetica-BoldOblique\", \"Courier\",\n\t\t\t\"Courier-Bold", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "       () -> Stable.stream(javadoc.module().getClasses())\n            .map(ClassFile::name)\n            .collect(Collectors.toList()));\n    cmdLine.arguments(files);\n    cmdLine.arguments(input -> Arrays.asList(javad", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "   return RespostaComunicarCertificadoICPBRASIL.analisar(retorno)\n\n    # TODO: implementar a classe RespostaComunicarCertificadoICPBRASIL\n    # e a função analisar()\n\n    return Res", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "=======================\n\n    cmd = self.commands.get(name, None)\n    if cmd is None:\n      print('repo: error: unknown command: %s' % name)\n      return 1\n\n    if gopts.trace_python:\n      trace.start(", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   Gson provideGson() {\n        return new Gson();\n    }\n\n    @Provides @Singleton\n    Ion provideIon() {\n        return Ion.getDefault(app);\n    }\n\n    @Provides @Singleton\n    IonFileProvider", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(5));\n\n        // expected:\n        // 5 query executions\n        // 1 select\n        // 1 select\n        // 1 insert\n        // 1 update\n        // 1 delete\n        // other: ", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inherit", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       VerifierProperty validSchema = new VerifierProperty(\"Valid Schema\", new ValidSchemaVerifierImpl());\n        VerifierProperty validSchemaName = new VerifierProperty(\"Valid Schema Name\", new ValidSchemaNameVerifierImpl());\n        VerifierProperty validSchemaVersion = new VerifierProperty(\"Valid Schema", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           // Show an error message and focus the inputs.\n            if (emailPasswordView != null) {\n                emailPasswordView.setError(getString(R.string.error_invalid_email));\n            }\n            passwordView.setError(getString(R.string.error_invalid", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "   DrupalUser loginUser(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by uid (invokes the drupal service user.load)\n     *\n     * @param uid the user's ID\n     * @", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "======================\n\ndef testQuirks(self):\n    quirks = self.testquirks()\n    quirklist = []\n    for quirk in quirks:\n        if quirk[\"type\"] == \"group\":\n            quirklist.append(quirk", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/problemlist', ProblemListHandler),\n            (r'/problemlist\\?oj=(.*)&problem_id=(.*)', ProblemListHandler),\n            (r'/problemlist\\?oj=(.*)&problem_id", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtMLException(\"Invalid criterion: \" + criterion);\n        }\n\n        return informationCriterion.getSelectionChunk();\n    }\n\n    /* (non-Javadoc)\n     * @see es.ucm.gim.protm", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2, ty1)\n\n\n@with_info(st_term)\ndef app(expr1, expr2):\n    \"\"\"Apply a function to an argument.\n    \n    Arguments:\n    - `expr1`: a function\n", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "\n    void inject(ClassicUiComponent classicUiComponent);\n\n    Context getContext();\n\n    Resources getResources();\n\n    AudioManager getAudioManager();\n\n    EventBus getEventBus();\n\n    AudioBookManager getAudioBookManager();\n\n    DemoSamplesInst", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   private List<SliceValue> sliceValues = new ArrayList<>();\n\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view = inflater.inflate(", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Response()\n    assert response.content_type is None\n    assert response.status_code == 500\n\n\ndef test_response_content_type_present():\n    response = Response()\n    response.content_type = 'application/json'\n    assert", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t/**\n\t * \n\t */\n\tprivate final Document document;\n\t\n\t/**\n\t * @param document\n\t */\n\tCommandExecutor(AtomicalConsole atomicalConsole, Document document) {\n\t\tthis.atomicalConsole = atomicalConsole;\n\t\tthis", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "=====================\n\n    except TextGridParseError as e:\n        self.return_dict[\"parse_error_files\"].append(e)\n\n    except Exception as e:\n        self.return_dict[\"unknown_error_files\"].append(e)\n        self.return_", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "```python\nAccelerometerResource,\n```\n/aircraft/sensors/accelerometer,\nresource\\_class\\_args=(sensors.accelerometer,)\n)\n\napi.add\\_resource(\nGyroResource,\n\"/aircraft/s", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueKts())\n\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n\n\nclass Instr", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "\n    '--association / --no-association',\n\n# This is the help line for the --association option\n# It is not included in the above help lines as it is not a command option\n# but a flag.  It is included here for reference.\nCMD_OPTION_", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t/**\n\t * 后台登录\n\t * @param username\n\t * @param password\n\t * @return\n\t */\n\t@RequestMapping(value=\"/login\",method=RequestMethod.POST)\n\t@ResponseBody\n\t", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           logError(title, t);\n                            presenter.showErrorMessage(title, t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logWarning(title, t);\n                            presenter.showWarningMessage(title", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "   def test_full_e2e_english_signup_and_reminder_flow(self):\n        logging.info(\"running full e2e flow for English signup and reminder...\")\n        texter = Texter(\"+9198765432", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected Location lastLocation;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester passiveLocationUpdateRequester;\n  protected LocationUpdateListener locationUpdateListener;\n  protected LocationUpdateListener passiveLocationUpdateListener;\n  protected boolean isInBackground = false;\n ", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "# connect(DYNAMIC_TOOLS_DIR)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Layer):\r\n    constructorList = [\r\n        Bit('R', 1),\r\n        Bit('RRC_version', 3),\r\n        Bit('CRC_error_indicator', 1),\r\n        Bit('RRC_message_type', 5", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\tadjacency_lh = create_adj_set(v_lh, faces_lh, opts.demean, opts.demean, opts.demean, opts.demean, opts.demean, opts.demean, opts.d", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "       result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n    } else {\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       CacheList newList = new CacheList();\n        newList.setName(listName);\n        cacheLists.add(newList);\n        cacheService.storeList(newList);\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   'CallName', 'CallName', 'Trans',\r\n    ]\r\n\r\nclass CP_DATA(LayerTLV):\r\n    constructorList = [\r\n    'CallName', 'CallName', 'Trans',\r\n    'TP_Address', 'TP_Address',\r\n", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       new TimeEntryOvertimeAggregation()));\n\n        approve.addAction(new Action(\"approve\") {\n            @Override\n            public void actionPerform(Component component) {\n                List<TimeEntry> selectedTimeEntries = timeEntriesTable.getSelectedItems();\n              ", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "=====================\n\n    @pkalg.register(False)\n    @pkalg.register(PubKeyAlgorithm.DSA)\n    def pkalg_int_dsa(self, val):\n        self._pkalg = PubKeyAlgorithm.DSA\n\n    @pkalg", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "\n    @property\n    def ai_channels(self):\n        ai_channel_count = ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                                        self._expansion_num, ExpansionInfo.AI_CHAN)\n        ai_", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "=====================\n\nclass StrongRefSetProperty(Property):\n    \"\"\"\n    A property that holds a set of references to other properties.\n    \"\"\"\n\n    __slots__ = ('references', 'index_name', 'next_free_key', 'last_free_key',", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "=====================\nuser = create_inactive_user(email, full_name)\n\n            # Send email to user\n            subject = _('Welcome to Connect!')\n            template = 'connect/emails/welcome.html'\n            send_connect_email(subject,", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "```python\n        draft = await self.draft_interface.load_draft_from_db(ctx.guild.id, ctx.channel.id)\n```\n\nThis line of code is trying to load a draft from the database using the `draft_interface` object. However,", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Hitbtc('bcceth')\n        elif name == \"%s_BTC_CAD\" % constant.", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "```python\n            if isinstance(item, (Attribute, Text)):\n                yield item\n            elif isinstance(item, Element):\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is not None:\n       ", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   helpTestIteratorNormal(10, 1);\n  }\n\n  @Test\n  public void testDataParanoid() {\n    helpTestIteratorParanoid(10, 1);\n  }\n\n  @Test\n  public void testDataCount() {\n", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tList<FacetSpecification> facets = new ArrayList<Facet", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   initMiPush();\n                }\n                //Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HMS\":\n                if(shouldInit()) {\n                    HMSAgent.init(this);\n", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n    private int attempts;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "=====================\n\n    output.append(tabulate(rows, headers, tablefmt=tablefmt,\n                           numalign=numalign, stralign=stralign,\n                           missingval=''))\n\n    if status:\n        output.append(status)\n\n    return output", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "=====================\n    return words_api(wordnik_api, token)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "   def test_create_event_invalid_handle(self):\n        with patch(\"pywintypes.kernel32.CloseHandle\") as mock_close:\n            handle = CreateEvent(bManualReset=False, bInitialState=False)\n            mock_close.assert_", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHolder.getParser().parse(annotation.getAnnotation(parserHolder.getSupportedAnnotation())).stream();\n                })\n                .collect(Collectors.toList());\n\n        FileManager fileManager = new FileManager(fileManagerFactory, roundDescriptor);\n        file", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected PageParser pageParser;\n\n    protected DuplicateStrategy duplicateStrategy;\n\n    protected CountDownLatch latch = new CountDownLatch(1);\n\n    protected ExecutorService executorService;\n\n    protected AtomicInteger threadCount = new AtomicInteger(0);", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n            actionPopupGroup.add(new DeleteValueAction(this));\n            actionPopupGroup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton addChannel;\n\n    public GuiSettingsChannel(Channel channel) {\n        super(channel.getName());\n        this.channel = channel;\n        setLayout(new BorderLayout());\n        initComponents();\n    }\n\n    private void initComponents() {", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClearNotification();\n           ", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       createWebAppTable(form);\r\n        createButtons(form);\r\n        createSections(form);\r\n        form.setSize(600, 400);\r\n        setControl(form);\r\n        addPerspectiveShortcut(form);\r\n        addHelp(form);\r\n", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type()\n        type.name = \"string\"\n        type.format = TypeFormat()\n        type.format.pretty = \"pretty_string\"\n\n        self.assertEqual(\"pretty_string\", type.get_sample())\n\n    def test_type_", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "               new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "self._cluster_type = _cluster_type\n\nThis line sets the value of the instance variable '_cluster_type' to the value passed as an argument '_cluster_type'.\n\nThe '_cluster_type' variable is defined earlier in the class as:\nself._cluster_type = CLUST", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "=====================\n\ndef complete_flickr(request):\n    try:\n        token = request.GET['oauth_token']\n        token_secret = request.GET['oauth_token_secret']\n    except KeyError:\n        raise ValueError(\"Redirect back from Flick", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caught FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t} catch(InterruptedException e) {\n\t\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "     op, arg = bytecode[k][2], bytecode[k][3]\n      if op in (LOAD_CONST, LOAD_GLOBAL, LOAD_NAME, LOAD_ATTR, LOAD_SUBSCR):\n        cond_stack_size += 1\n      elif", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   List<DailyExpense> dailyExpenses = new ArrayList<>();\n    List<DailyExpense> dailyExpensesByCategory = new ArrayList<>();\n    List<DailyExpense> dailyExpensesByCategoryTotal = new ArrayList<>();\n    List<DailyExpense> dailyExpenses", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "=====================\n\nclass PlatformAdmin(admin.ModelAdmin):\n    list_display = ('engine_name', 'subject', 'api_url', 'server_status', 'ci_status')\n    list_filter = ('engine_name',)\n    search_fields = ('engine_", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\tprivate void openCustomPlace(Place place) {\n\t\tif (place != null)\n\t\t\tstartActivity(PlaceActivity.start(this, place._id));\n\t}\n\n\tprivate void openCustomPlace(Place place) {\n\t\tif (place != null) {", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "=====================\n\ndef parse(self, ping_message: Union[str, bytes, List[str], List[bytes]]) -> PingStats:\n    \"\"\"\n    Parse ping command output.\n\n    Args:\n        ping_message (Union[str, bytes, List", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           chat = DatabaseManager.getInstance().getChatDAO().get(chatId);\r\n            if (chat == null) {\r\n                throw new ExceptionInInitializationError(\"chat is null\");\r\n            }\r\n        }\r\n\r\n        // Set up the ListView and its adapter\r\n       ", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tgame = new Cubeshaft();\n\t\t\tgame.start();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "account = account_for_facebook_user(fb_user, person=person)\n\ndef account_for_facebook_user(fb_user, person=None):\n    try:\n        account = Account.objects.get(service='facebook.com', ident=fb_user['id", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n        assertThat(qe, is(isStatement()));\n        assertThat(qe, is(isBatchStatement()));\n        assertThat(qe, is(isStatementOrBatchStatement()));\n\n", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "   } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {\n      int percent = Integer.parseInt(Utils.getXmlNodeValue(doc, TAG_PERCENT));\n      if (percent >= 100) {\n       ", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "=====================\n\ndef merge_assembly_points(assembly_points_by_source):\n==========================\n\nThis function takes a dictionary where keys are the names of the sources and values are lists of assembly points from those sources. It merges assembly points from different sources into a set of unique ones", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "GyroResource,\n\"/aircraft/sensors/gyro\",\nresource_class_args=(sensors.gyro,),\n)\n\napi.add_resource(\n    GyroResource,\n    \"/aircraft/sensors/gyro\",\n    resource_class", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "```python\nfields={ key:value for key,value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n```\nIt seems like there is a typo in the variable name `msg_color` which should be `msg_", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback<Level>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onFailure(Throwable error) {\n\t\t\t\t\t\t\tshowError(error.getMessage());", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * The currently selected item.\n     */\n    protected ITEM selectedItem = null;\n\n    /**\n     * The currently selected item index.\n     */\n    protected int selectedItemIndex = -1", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n    }\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   VerifierProvider rsaLocator = new DefaultPublicKeyLocator();\n\n    VerifierProviders verifierProviders = new VerifierProviders();\n    verifierProviders.setVerifierProvider(SignatureAlgorithm.HS256, hmacLocator);\n    verifierProv", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "               } catch (FilesNotFoundException e) {\n                    // expected\n                } catch (Exception e) {\n                    fail(\"Unexpected exception: \" + e.getMessage());\n                }\n\n                client.deleteObject(containerName, fileName);\n            }\n\n           ", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                   TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();\n                    newTrackHistoryEntry.title = liveInfo.getTitle();\n                    newTrackHistoryEntry.station = liveInfo;\n                    newTrackHistoryEntry.startTime = new Date(System.currentTimeMillis());", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "ProjectsFragment.ProjectsFragmentListener,\nQueuesFragment.QueuedProjectsFragmentListener,\nStashesFragment.StashesFragmentListener,\nFavoritesFragment.FavoritesFragmentListener,\nStashesFragment.StashesFragmentListener,\nProjectsFragment.ProjectsFragmentListener,\n", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       if (home.getStyle() == Home.Style.STYLE_1) {\r\n                            Intent intent = new Intent(mContext, WallpaperPickerActivity.class);\r\n                            intent.putExtra(\"wallpaper_type\", WallpaperManager.Constants.WALLPAPER", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "=======================\n\ndef load_config(ctx, config_file):\n    \"\"\"\n    Load a configuration file.\n    \"\"\"\n    if not config_file:\n        return {}\n\n    try:\n        with open(config_file, \"r\", encoding=\"utf-8\")", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    def items(self):\n        \"\"\"\n        Returns a list of all the items in the playlist.\n\n        :return: list of :class:`MediaItem` objects\n        \"\"\"\n        if self._items is None:\n            self._items = self.fetchItems('/items')", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertEqual(\n            _environment_to_string({u\"i\": u\"j\"}),\n            u\"i={i!r}\\0\\0\".format(i=u\"i\"))\n\n    def test_type_check_for_environment_value(self):\n", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "=====================\n\n  def Run(self, argv):\n    \"\"\"Runs the repo command.\"\"\"\n    self._Run(self._ParseArgs(argv))\n\nThe `Run` method is the entry point for the `repo` command. It parses the\ncommand line arguments and then calls", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 执行任务前的监听器\n                for (RunnerTaskListener listener : runnerListenerList) {\n                    listener.onPreExecute(taskData);\n                }\n                // 执行任务后的监听器\n                for (Runner", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       entry = Entry.create(\"http://example.com\")\n        result = await r.after_headers(entry)\n        self.assertIsNone(result)\n\n    @async_test()\n    async def test_reject_status_code(self):\n        r = Reject", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //保存用户信息到数据库\n        BaseInfoDao baseInfoDao = new BaseInfoDao();\n        BaseInfoBean baseInfoBean = new BaseInfoBean();\n        baseInfoBean.setStuName(stuName);\n        baseInfoBean.setStuX", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\n    self.__device = device\n    self.__ip_version = ip_version\n    self.__logger = logger\n    self.__tc_command_output = tc_command_output\n    self.__export_path = export_path\n    self.__is_parse_filter_id = is", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "       except ActionError:\n            pass\n        else:\n            state[\"inventory\"] = [mudobj_ref(i) for i in inv]\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": " public Query visit(Ord4Search n, Query parent) throws ParseException {\r\n    Operator op = n.getOperator();\r\n    if (op == Operator.AND) {\r\n      BooleanQuery query = new BooleanQuery();\r\n      for (int i = 0; i < n.", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t}\n\n\t/**\n\t * @param pipeline : the pipeline to use for the generation\n\t * @param surveyName : the name of the survey to generate\n\t * @param", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "\n        try {\r\n\r\n            PropertiesReader propertiesReader = new PropertiesReader(new File(propertiesFile));\r\r\n                    + (propertiesFile.endsWith(\"/\") ? \"\" : File.separator) + propertiesFile));\r\r\n            ));\r\n\r\n            DataDirHelper dataDirHelper =", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "```python\nself.link = self.link(self.config, self.time_manager, self.traceroute)\n```\nThis line of code is creating an instance of the `Alice` class, passing it the `Config` object, the `TimeManager` object, and", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       MovieCursor movieCursorById = new MovieCursor(cursorById);\n        // Make sure we get the correct movie out of the cursor\n        Movie movie = movieCursorById.getMovie();\n        assertEquals(movieRowId, movie.getId());\n\n        // Clean up\n        cursorById", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(list(node_children(self.elem)), [])\n\n    def test_node_children_function_with_element(self):\n        parent = ElementTree.Element('element')\n        child = ElementTree.Element('child')\n        parent.append(child", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.main);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(false);\r\n\t\tmap", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mush", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "=====================\n\nclass Cisco2960SwitchConfiguration(PortBasedSwitchConfiguration):\n    def __init__(self, *args, **kwargs):\n        super(Cisco2960SwitchConfiguration, self).__init__(*args, **kwargs)\n        self.name =", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutput", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "=====================\n\n        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def ativar_sat(self):\n        \"\"\"Sobrecarga do método ``ativar_sat`` da classe ``ClienteS", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "=======================\n\n    axes = ax.ravel() if isinstance(ax, Axes3D) else ax\n    axes = [axes] if isinstance(axes, list) else [axes]\n    for ax in axes:\n        ax.clear()\n       ", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "=====================\n\ndef initialize_simulation(reactor, fdmexec, aircraft, database,\n                          update_rate, clients):\n    \"\"\"Initialize the simulation\n\n    Arguments:\n    reactor: a Twisted reactor object\n    fdmexec: an JSBSim", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    pass\n\nThis is a placeholder for the main function of the script. It is empty in this example, but it can be used to define the main entry point of the script. In this case, it is left empty.", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private static final int[] mExpenseCategoryIds = {\n            R.integer.expense_category_food,\n            R.integer.expense_category_leisure,\n            R.integer.expense_category_transportation,\n            R.integer.expense_category", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tprivate Util() {\n\t\t// empty\n\t}\n\n\tpublic static Util getInstance() {\n\t\treturn", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       MongoConfiguration mongoConfiguration = MongoConfiguration.getInstance(project);\n        return mongoConfiguration.getServerConfigurations();\n    }\n\n    private void installActions() {\n        ActionManager actionManager = ActionManager.getInstance();\n\n        Action addServerAction = actionManager.get", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1(\"h1\", \"TodoMVC\")\n\t\t// Input()\n\t\t// is replaced by:\n\t\tH1(\"h1\", \"TodoMVC\").input();\n\t\tFluent header = container.header().H1(\"h1\", \"", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               new CropImageTask().execute(output);\n            }\n        });\n\n        /**\n         * Initialize click listeners for buttons\n         */\n        captureButton = (ImageView) findViewById(R.id.capture);\n        captureButton.setOnClickListener(new View.On", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "   @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setHasOptionsMenu(true);\n        mActivity = (MainActivity) getActivity();\n        mAdapter = new SongListAdapter(getActivity());\n        m", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   validate_key_condition(query_on, key)\n\n\n@pytest.mark.parametrize(\n    \"model, index, key\", [\n        (ComplexModel, None, ComplexModel.name == \"foo\"),\n        (ComplexModel, None, ComplexModel.", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String name) {", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "```python\n            '/properties':                  RestAppPropertys,\n        }\n        \n        # Register the resources\n        for endpoint, resource in self.resources.items():\n            self.api.add_resource(resource, endpoint)\n```\n\n        # Start the server", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "=====================\n\nself.project_settings = ProjectSettingsDialog(settings_ini=settings_ini, project_directory=directory, log_directory=os.path.join(directory, 'logs'))\nself.project_settings.show()\n\nself.tree_view = tree_view", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    initialize_logging()\n    initialize_logging_format()\n    initialize_logging_level()\n\n    try:\n        args = parser.parse_args()\n    except (ModuleNotFoundError, ContainerError, ValueError,", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final static Color BACKGROUND_COLOR = Color.of(0x111111);\n\n    private final static Color SELECTED_COLOR = Color.of(0x222222);\n    private final static Color HIGHLIGHTED_COLOR", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "       void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to events when a week is clicked\n     */\n    public interface WeekClickListener {\n        /**\n         * Triggered when a week was clicked\n         *\n         * @param week\n", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "   self._db_type = db_type\n    return self\n\nclass ConnectMessage(BaseMessage):\n    def __init__(self, _orient_socket):\n        super(ConnectMessage, self).__init__(_orient_socket)\n        self._need_token = False\n\n", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           client.getBaseClient().upgrade(packet.getData(), transport);\n            break;\n        }\n\n        case CONNECT: {\n            client.getBaseClient().setHandshakeData(packet.getData());\n            client.getBaseClient().setStore(store);\n           ", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tGenerator generator = setGenerator(pipeline.getGenerator());\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\tGenerationService generationService = new GenerationService(preprocessors, generator, postprocessors);\n\t\treturn generation", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<GCPProject> projects = pipeline.apply(\n        \"Read projects\",\n        new LiveProjectSource(org).withoutCaching());\n\n    // Convert projects to GCPProject objects.\n    PCollection<GCPProject> projectsAsJavaObjects = projects.apply(\n", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "=====================\n\n@pytest.fixture\ndef my_model(model):\n    \"\"\"Return a copy of the model so tests don't interfere with each other\"\"\"\n    return model.copy()\n\n\n@pytest.fixture\ndef user(session):\n   ", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanPoolReadDefinitions(def_num_input_words, dim, vocab,\n                                                         lookup=lookup,\n                                                         cache=self._cache)\n            else:\n                raise ValueError(\"Unknown def_reader: \" +", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "\n    public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n    }\n\n    public void start()\n    {\n        Contract.check(_delegate != null, \"delegate == null\");\n\n        synchronized (_lockObject) {\n            _id = _", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private ProgressDialog progressDialog;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_video_pick);\n        Toolbar toolbar = (Toolbar) findViewById", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "```python\nif form.is_valid():\n    user = form.save(commit=False)\n    user.perfil = Perfil.objects.get(user=self.object)\n    user.save()\n    messages.success(request, 'Usuario guardado con", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setColor(fog.color.toCommaDelimitedString(Locale.ENGLISH));\n        descriptor.setDensity(fog.density", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif(this.handle == null) return;\n\t\tthis.handle.close();\n\t\tthis.handle = null;\n\t\tall_open_handles.remove(this);\n\t}\n\t\n\tpublic void writeTo", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorInfoComponent plusActorInfoComponent();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidixException e) {\n\t\t\tthrow new SocketException(\"Socket communication failed\", e);\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark\n\t *\n\t * @return the result of the benchmark\n\t", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "class DashboardView(TemplateView):\n    \"\"\"\n    Dashboard View\n    \"\"\"\n\n    template_name = 'dashboard/dashboard.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo.getMoreSuitableEndpoint(endpointType);\n\t\t\treturn activateLoginIfRequested(createWrapper(endpoint, dataParser,\n\t\t\t\t\tnetworkManager, cache, apiKey));\n\t\t} catch (IOException e) {", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       if request.method == \"GET\":\n            planillas = PlanillaDeRelevamiento.objects.filter(comercio=request.GET.get('comercio'),\n                                                            zona=request.GET.get('zona'),\n                                                            habilitada", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "# self._cstr = self.tree.to_dot()\n\nThis line of code is used to convert the tree representation of the constraint\ninto a string representation that can be used for further processing.\n\nHowever, it seems that the `to_dot()` method is not defined in the `", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " private ActionSupportHandler<RedirectAction>        redirectActionSupportHandler        = new ActionSupportHandler<RedirectAction>(RedirectAction.class);\n  private ActionSupportHandler<TransferAction>       transferActionSupportHandler       = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupport", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1), [0])\n\ndef test_hash_functions():\n    \"\"\"Hash functions\"\"\"\n    # FNV-1a\n    assert hash_functions.hash_fnv1a(b'') == ", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "\n@method(function='format-number',\n        label='format-number',\n        nud=nud_format_number,\n        arity=2,\n        sequence_types=[('arg1', 'anyAtomicType'), ('arg2', 'anyAtomicType')],", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\n\t\tif model_item is None:\n\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str(e))\n\t\t\treturn Qt.ItemIsEnabled\n\n\t\tif model_", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "=====================\n\n        response = Hydrator.hydrate(versions, object1, Hydrator.Types.object)\n        response = Hydrator.hydrate(versions, object2, Hydrator.Types.object)\n        response = Hydrator.hydr", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         FASTDecoder decoder = Dispatcher.loadDispatcher(catBytes, clientConfig);\n\n          //TODO: C, this is a test and should be removed.\n          decoder.setDebug(true);\n\n          //TODO: C, this is a test and should", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n\n  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               hasJsonPath(\"$.hits.total.value\", equalTo(records.size())));\n    }\n\n    @Test\n    public void store_with_suggest() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "=====================\n\n    @sd(int, PubKeyAlgorithm)\n    def __init__(self, version, pkalg, pk, created=None, expires=None, user_ids=None, trust=None, sig=None):\n        super().__init__(version)", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\t\tgeoJSONWriter = new GeoJSONWriter();\n\t}\n\n\t/**\n\t * Registers the request services\n\t * \n\t * @throws IOException\n\t */\n\tprivate", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = getSearchResults(context);\n                    } catch (IOException | SQLException e) {\n                        context.put(ContextKeys.EXIT_STATUS, EXIT_FAILURE);\n                        context.put(ContextKeys.ERROR_MESSAGE, e.getMessage());\n                    }", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "url(r'^users/$', users_list, name='users-list'),\nurl(r'^users/new/$', new_user, name='new_user'),\nurl(r'^users/(?P<pk>\\d+)/edit/$', edit_user, name='", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           startMixedActivity();\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"play_session_settings\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        Intent intent =", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   private DropDownMenu dropDownMenu;\n    private LinearLayoutManager mLayoutManager;\n    private CookBookAdapter mAdapter;\n    private FilterUrl filterUrl;\n    private OkhttpManager okhttpManager;\n    private static final String TAG = \"MentalityHealthActivity\";\n", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateSocketTags();\n\n        # initialize block shape\n        obj.updateBlockShape();\n\n        # initialize block image\n        obj.updateBufferedImage();\n\n        # initialize block label\n        obj.updateBlockLabel();\n\n        # initialize block comment\n        obj.", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "=====================\n\n        alpha = XorDiff(d1, d2)\n        beta = XorDiff(d2, d3)\n\n        f = XDA(alpha, beta)\n        result = self._find_preimage(f, beta)\n\n        if result", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformConstantMultiAlternation(MultiConstantNode node, List<Set<Character>> characterOptions, List<Set<Character>> characterChecks);\n\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the commands\n\t\tgetCommand(\"help\").setExecutor(new CommandHelp());\n\t\tgetCommand(\"create\").setExecutor(new CommandCreate());\n\t\tgetCommand(\"delete\").setExecutor(new CommandDelete", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       Challenge challenge = new Challenge(challengeData);\n        connection.sendPacket(challenge);\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        connection.sendPacket(new Success());\n    }\n\n    private void parseFailure(Element doc)", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "PiCipher = PiPermutation(PiPermutation.Pi_32_32, PiPermutation.Pi_32_32)\n\n\ndef test_chaskey():\n    test_search(ChaskeyPi, DerMode.Probability, Ch", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private FastScroller mFastScroller;\n\n    private SongListAdapter mAdapter;\n\n    private List<Song> mSongs;\n\n    private int mSortOrder;\n\n    private boolean mShowArtwork;\n\n    private boolean mShowAlbums;\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           FlowAbsEffect flowAbsEffect = (FlowAbsEffect) effect;\n            if (flowAbsEffect.isInitialized()) {\n                try {\n                    flowAbsEffect.init(mSpectrumWidth, mSpectrumHeight);\n                } catch (EffectException e) {", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "\nclass ESMInfo(Layer):\n    constructorList = [\n        Bit('EPSM_Cause', Pt=0, BitLen=8),\n        Bit('ESM_MessageType', Pt=8, BitLen=8),\n        Bit('ESM_MessageLength", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           mSong = getActivity().getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, null, MediaStore.Audio.Media._ID + \" = \" + mSongId, null, null).getNext();\n            mSong.setTitle", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "=====================\n\ndef _parse_corpus(self):\n    \"\"\"\n    Parse the corpus and add the files to the corpus.\n    \"\"\"\n    self.log_info(\"Parsing corpus...\")\n    self.corpus = Corpus()\n    self.cor", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),\n\t\t\t\tuser.getContactEmail(), user.getCallbackUrl(),\n\t\t\t\tuser.getCallbackUsername(), user.get", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "\n    Observable<ApiStatus> apiInfo(@Query(Constants.KEY) String apiKey);\n}\n\n/**\n * This class represents the status of the API\n */\npublic class ApiStatus {\n\n    private boolean https;\n    private boolean unlocked;\n    private boolean telnet;", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.option", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   assert almost_eq(erb[\"moore_glasberg_83\"](freq), bandwidth)\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 130.7),\n      (2000, 26", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "=====================\n\ndef read_sequence(fp, is_implicit_VR, offset=0):\n    \"\"\"Read a sequence from a file.\n\n    :param fp: A file-like object.\n    :param is_implicit_VR: A boolean indicating whether the VR", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   try {\n      // resolve all expressions in the document\n      placeholderReplacer.resolveExpressions(document, proxyBuilder);\n\n      // walk through the document and let each registered ICommentProcessor have a run\n      CoordinatesWalker walker = new BaseCoordinatesWalker(document)", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(getActivity().getApplication(), searchCriteria, page);\n    }\n\n    @Override\n    protected void loadData(int page) {\n        getRequest(", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "=====================\n\n    @flags.register(NotationFlags)\n    def flags_notationflags(self, val):\n        self._flags = self._flags | NotationFlags(val)\n\n    @sdproperty\n    def name(self):\n        return self._name\n\n", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "```python\n        if self.chumopen:\n            self.addMessage(serverMsg, self.chum)\n```\n\nThis code is for a chat client application written in Python using the PyQt5 library. The code snippet above is for a Quirk Tester window,", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "=====================\n\ndef check_args(args, fn_type, env):\n    if not fn_type:\n        raise TypeError('No function signature found')\n\n    if len(args) != len(fn_type.__args__):\n        raise SignatureMismatch\n", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "```python\nif isinstance(value, GregorianMonthDay):\n    return value\n\ntry:\n    if isinstance(value, UntypedAtomicValue):\n        return GregorianMonthDay.fromstring(value.value)\n    elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "=====================\n\n    if not _param_present_in_database(dbf, phase_name, configuration, \"formation energy\"):\n        _log.info(f\"{phase_name} not present in database, fitting new parameters.\")\n\n\n        # Filter datasets to only include the", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        if (controller == null || componentController == null || fsmPlayer == null || adMedia == null) {\n", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 8 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 9 || type == 0", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   @FormUrlEncoded\n    Call<Suggestions> suggest(@FieldMap Map<String, String> serviceIds,\n                               @Field(\"query\") String query,\n                               @Field(\"limit\") int limit);\n\n    @POST(\"pack\")\n    Call<PackResponse>", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "\n    def create_table(self, model):\n        \"\"\"Create a table for the model.\n\n        :param model: The model to create a table for.\n        :raises bloop.exceptions.TableExists: if the table already exists.\n        :raises bloop.", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    main()\n```\nThis code defines a command line interface for evaluating machine learning models using various evaluation metrics and visualization options. The code uses the NumPy, SciPy, and Matplotlib libraries for data processing and visual", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t@", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "=====================\n\n    def __getattr__(self, name):\n        if name in self.registry:\n            return self.registry[name]\n        elif name in ('create_vertex', 'create_edge'):\n            return getattr(self, name)\n        else:\n           ", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "=====================\n\n    @scoped_subgraph\n    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences and the previous decoder hidden state as inputs. The", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nclass PlatformAdmin(admin.ModelAdmin):\n    list_display = ('engine_name', 'platform_slug', 'server_status')\n    list_filter =", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaQueryNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeNode node) {\n       ", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Method\");\n        table.addHeader(\"Class\");\n        table.addHeader(\"Mean\");\n        table.addHeader(\"StdDev\");\n        table.addHeader(\"Min\");\n        table", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     self.control_flow = Tree()\n      self.control_flow.root = self.entry_node\n      self.control_flow.build(self._graph, self.entry_node, self.exit_node, has_true_false_branches)\n\n      self.", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(data, this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type: \" + this", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "======================\n\ndef parse_xpath_expression(expression: str, parser: XPathParser,\n                          context: Optional[XPathContext] = None,\n                          namespace_context: Optional[NamespaceContext] = None,\n                          schema_context: Optional[SchemaContext]", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   else if (Event.EVENT_TYPE_MESSAGE.equals(event.type)) {\n                        Message message = JsonUtils.toMessage(event.content);\n                        if (message.sender.userId.equals(mMyUserId)) {\n                            mLastTypingEvent = event", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilter = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI3toDDI2 ddi3to2 = new DDI3toDDI2();\n\t\n\t// Post", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, SyntheseModifications(database, site)).ShowModal()\n\n    def OnGeneration(self, _):\n        site = self.GetSelectedSite()\n        if site is None:\n            return\n        if self.statistics_choice.GetSelection()", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "=====================\n\n    def compute_angular_momentum_hessian(self, p):\n        \"\"\"\n        Computes the Hessian matrix of the angular momentum with respect to the\n        configuration of the robot.\n\n        Parameters\n        ----------\n        p : numpy.ndarray", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n            name.setText(queuedProjectResult.queuedProject.name);\n            author.setText(queuedProjectResult.queuedProject.author.name", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               new MigrateCommand());\n        // Register listeners\n        registerListeners();\n        // Register events\n        registerEvents();\n        // Register metrics\n        registerMetrics();\n        logger.info(\"Economy is now ready!\");\n    }\n\n    private void initializeFiles() {\n", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "```python\n        prior_specs = build_prior_specs(prior, symbols, params)\n        _log.trace('Prior specs: %s', prior_specs)\n        return {'prior_specs': prior_specs}\n```\n", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const.fromValue(arg[0])\n    elif op == LOAD_NAME:\n      return Ref.fromName(arg[0])\n    elif op == LOAD_ATTR:\n      return Ref.fromName(arg[0])\n    elif op == LOAD_SUB", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics = new Physics();\n\n\tpublic ClientMaster() throws IOException {\n\t\tsuper(\"entities/\");\n\t\tres = new ResourceLoader(new FileLocation(\"assets/\"));\n\t\tentities.add(new ClientEntity(new EntityParser(this).parseEntity", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new Temp", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> getAuthorsWithBooks() {\n\t\treturn authorRepository.findAll().stream()\n\t\t\t\t.map(author -> {\n\t\t\t\t\tList<Book> books = bookRepository.findByAuthorId(author.getId());", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t\tthis.rootQuery = new SQLQuery(this, null, SQLAction.SELECT, null);\n\t}\n\n\tpublic SQLTranslation run", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "#         install_and_run(DYNAMIC_TOOLS_DIR, file_path, app_info['package'], app_info['launcher'], True)\n        install_and_run(DYNAMIC_TOOLS_DIR, file_path, app_", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   List<Genotype> parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return risks.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into risks\n     */\n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n                Keyword('baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_record_infer():\n    inc", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\")));\n\n        // query with QueryHolder\n        assertThat(pe,", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "=======================\n\n\t\t\tif type(selection[0]) is not DrawingObject:\n\t\t\t\tself._properties_dock.set_item(None)\n\n\tdef on_new_document(self):\n\t\tself._document = Document()\n\t\tself", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return new ApiException(cause);\n            }\n        };\n        _config = config;\n        // Set up", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\t);\r\n\t}\r\n\t}\r\n\r\n\tpublic void registerRenderer(Class<?> clazz, Renderer<?> renderer) {\r\n\t\tRenderer<?> existingRenderer = resolvedRendererCache.get(clazz);\r\n\t", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_LOWERCASE, false)) {\n\t\t\tlabelFactory = new LowerCase", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "\n    url(r'^new$', staff_member_required(AddPackageCIPipeline.as_view(), login_url=LOGIN_URL), name=\"add-package-ci-pipeline\"),\n\n    url(r'^(?P<pipeline_id>[0-", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       intent.putExtra(Extras.String.EXTRA_IMAGE, bitmap);\r\n                        if (bitmap != null) {\r\n                            intent.putExtra(Extras.String.EXTRA_IMAGE, bitmap);\r\n                        } catch (Exception e) {}\r\n                    }", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "access_token = call_vimeo('vimeo.auth.getToken', access_token)\n\n    person = None\n    if not request.user.is_authenticated():\n        person = Person.objects.create()\n    account = account_for_vimeo", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               pointing, mag = xy2pointing(platepar, x_mean, y_mean, test_px_sum, platepar.ref_time, platepar.ref_time_jd, \\\n                    platepar.ref_time_jd_jd, platepar.", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "=====================\ngrid = gen_grid(data, options)\n=====================\n\n    # Compute likelihood for each point on grid\n    likelihood = gridLikelihood(data, grid, options)\n\n    # Compute posterior distribution\n    posterior = np.exp(np.log", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           UIDialogs.getDialogHandler().show(Events.DIALOG_ROLL_DICE, null);\n          }\n      }\n    });\n    rollBtn.setX(getX() + (getWidth() - rollBtn.getWidth()) / 2);\n   ", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "=====================\n\n        self.assertEqual(list(etree_iter_paths(root)), [])\n        self.assertEqual(list(etree_iter_paths(root, '/')), [\n            (root, '/'),\n            (root.tag, '/' + root.tag", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "       self.runner.add(self.rule, with_child=True)\n\n    @patch(\"hammertime.rules.status.SimilarPathGenerator\")\n    @patch(\"hammertime.rules.status.SignatureComparator\")\n    @patch(\"hammertime.rules.status", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "```python\ncfe_cancelamento = CFeCancelamento(\n        chCanc='CFe1234567890123456789012345678901234567890',", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "   List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a list of ancestries.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a list", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           EtsiResponse resp = this.client.sendRequest(req);\n            if (resp.getStatus().getStatusCode() != 200) {\n                System.out.println(\"Signature request failed: \" + resp.getStatus().getStatusCode());\n                this.client", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\n\t\telif type(obj) is Feature:\n\t\t\treturn get_icon(\"feature\")\n\t\telif type(obj) is FeatureInstance:\n\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensor.flushDBCache(deviceID);\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensor.flushDBCache(deviceID);\r\n        }\r\n        if(type == 13 || type == ", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<PlayerOverview> playerOverviews;\n\tprivate TeamLeaders teamLeaders;\n\tprivate TeamLeadersResponse teamLeadersResponse;\n\tprivate TeamRosterResponse teamRosterResponse;\n\tprivate TeamScheduleResponse teamScheduleResponse;\n\tprivate List<Game> games", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       FeedbackUseCase feedbackUseCase = FeedbackUseCase.Companion.getInstance();\n        feedbackUseCase.sendFeedback(userFeedback, new Function1<Feedback, Unit>() {\n            @Override\n            public Unit invoke(Feedback feedback) {\n               ", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "```python\n            table_index[table_name] = table_name\n            object_index[key] = obj\n            request[table_name] = {\n                \"ConsistentRead\": consistent_read(consistent_read=consistent_read, obj=obj),\n", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               art = draw_art(\n                    key_size=2048,\n                    key_algo='RSA',\n                    key_fpr=fingerprint,\n                    long_id=True\n                )\n                print(art)\n           ", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "=======================\n\n    def ativar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.ativar_sat`.\n\n        :return: Uma instância de :class:`~satcfe", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "```python\ndef test_node_document_uri_function(self):\n    xml_test = '<A xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:base=\"http://example.com/\">'\n    self.", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "======================\n\n    def train(self) -> None:\n        \"\"\"Train the model\"\"\"\n        self.initialize_training()\n        self.logger.info(\"Starting training...\")\n        self.logger.debug(f\"Training on {self.num_iterations}", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final OAuth2Requester requester;\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Jobs jobs;\n    private final Vms vms;\n    private final Errands errands;\n\n    public SpringDirectorClient(URI root, RestTemplate restTemplate) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(rest", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "public void requestUpdate() {\n    _chat.requestUpdate();\n}\n\npublic void requestUpdate() {\n    _chat.requestUpdate();\n}\n\nprivate final ChatManager _chat;\nprivate final FittingServiceBinder _binder;\nprivate final FittingService _service;", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   public void onMessage(ChatMessageEvent event) {\n        if (event.channel != this.channel) {\n            return;\n        }\n        this.setStatus(ChannelStatus.UNREAD);\n    }\n\n    @Subscribe\n    public void onMessageDelete(ChatMessage", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "         DATA[looptest], EPSILON, FiniteDifferenceSchemes.SYMMETRIC);\n        DoubleSad sad = BlackFormula2.price_Sad(DATA[looptest][0], DATA[looptest][1], DATA[looptest][2], DATA[", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class\n    };\n\n    /**\n     * Map of module names to their instances\n     */\n    private static HashMap<String, Module> modules = new HashMap<>();\n\n    /**\n     * Loads all modules and registers their event listeners\n     * @param plugin the", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "=======================\npublic static DownloadQueue newDownloadQueue() {\n    return newDownloadQueue(3);\n}\n\n/**\n * Create a new download queue.\n *\n * @param threadPoolSize the thread pool size.\n * @return {@link DownloadQueue}.\n * @see #new", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void init(MutableConfig config) {\n    Log.debug(\"init packager plugin\");\n    // register the packager command\n    OptionAction packager = action(\"packager\", config -> {\n      var pluginConfig = config.getOrUpdate(ProConf.class);\n     ", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "=======================\nprivate QuerySetConfig parseQuerySetConfigTag(Element element) {\n    QuerySetConfig querySetConfig = new QuerySetConfig();\n    NodeList querySetNodes = getAllChildNodes(element, QUERY_SET_CONFIG_TAG);\n    for (Node node :", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "=======================\n\ndef main():\n    ms = MainScanner()\n    ms.Scanner()\n\nif __name__ == '__main__':\n    main()\n=======================\n\nThe code above is a Python script that performs web scraping and data processing tasks for fetching", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "=====================\n\n        self.robot.ik.add(left_foot_task)\n\n        if self.cur_phase == 'swing':\n            self.robot.ik.add(self.swing_foot.task)\n        else:  # self.cur_phase", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\n@settings(max_examples=100)\n@given(integers(min_value=MIN_SIZE, max_value=MAX_SIZE))\ndef test_simple_operations(x):\n    \"\"\"Test simple operations.\"\"\"\n    a = bitvectify(x", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG.mICCProfile).encode(aOutput);\n\t\t}\n\n\t\tnew SOF0Segment(aJPEG.mComponentCount, aJPEG.mComponents).encode(aOutput).log(aLog);\n\n", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (sl != null) {\n                SqlSessionFactory sqlMapperFactory = getSqlMapperFactory();\n                try (SqlSession session = sqlMapperFactory.openSession()) {\n                    LastschriftenMapper mapper = session\n                            .getMapper(LastschriftenMapper", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "====================\n\nclass PretrainedAligner(TopLevelWorker):\n\"\"\"\nClass for aligning text to phonemes using pretrained models\n\"\"\"\n\n\nif TYPE_CHECKING:\n\n    from montreal_forced_aligner.alignment import Alignment\n    from montreal", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       Lore lore = LoreLoader.getLore(key);\n\n        if (lore == null) {\n            sender.addChatMessage(new ChatComponentText(EnumChatFormatting.RED + \"Could not find lore with that key!\"));\n            return;\n       ", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private final User user;\n    private final BudgetAppConfiguration configuration;\n    private final UserDAO userDAO;\n    private final BudgetDAO budgetDAO;\n    private final CategoryDAO categoryDAO;\n    private final TransactionDAO transactionDAO;\n    private", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "public static Util getInstance() {\n\treturn instance;\n}\n\n\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static Logger getLogger() {\n\t", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInY", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        smart_print(\"Problem size: {}\".format(problem.formula_size()))\n\n    if verbose_level >= 1:\n", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "=====================\n\n    def test_hosts_container(self):\n        hosts = HostsContainer({\n            'local': [LocalHost1(), LocalHost2()],\n            'local-ssh': [LocalSSHHost1(), LocalSSHHost2()]\n        })\n", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "       return (\n            command.startswith(self.get_tc_command(TcSubcommand.CLASS))\n            and command.split()[1].startswith(self.qdisc_major_minor_str)\n        )\n\n        return self.__tc_command", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "=====================\n\n  assert isinstance(encoder, GLONASS1bitEncoder)\n\nThis is incorrect. The expected class is GLONASS2bitsEncoder.\n\ndef test_selectEncoder_2GLONASS():\n  '''\n  Encoder selection test\n  '''\n  enabledB", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "   public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabase;\n        Cursor cursor = db.rawQuery(\"SELECT * FROM \" + ExpenseManagerContract.Exp", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private TextView monthTitleTextView;\n\n    private TextView monthYearTextView;\n\n    private TextView weekDayTextView;\n\n    private TextView weekDayTitleTextView;\n\n    private TextView weekDayTitleTextView2;\n\n    private TextView weekDayTitleTextView3;\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "```python\n    my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(10) == [x for x in xrange(10)]\n```\n\n  def test_finite_duration(self):", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "=====================\n\ndef unify(t1, t2, backref=None):\n    \"\"\"Unify t1 to match t2\n\n    After unification t1 should be equal to t2 or t1 would be\n    a subtype of t2.\n\n    t1", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "```python\n        self.auth = Auth()\n        self.auth.startup()\n        self.networks = []\n        self.last_refresh = 0\n        self.last_record = 0\n        self.last_event = 0\n        self.last_", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "=======================\n\n\t\treturn default_flags\n\n\tdef create_model_item(self, parent, data):\n\t\tif isinstance(data, Geometry):\n\t\t\treturn GeometryModelItem(parent, data)\n\t\telif isinstance(data, Feature):\n\t", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "=======================\n\ndef main():\n  \"\"\"Entry point for the application.\"\"\"\n  logging.basicConfig(level=logging.INFO)\n  log = logging.getLogger(__name__)\n\n  # Set up the service.\n  service = Service()\n\n  # Set up the transport", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       ProcessRuntime runtime = parseThreadDump(out.toString());\n        ProcessThread thread = runtime.threads().where(nameIs(\"remotely-observed-thread\")).get();\n\n        // The thread is not blocked on any monitor\n        assertThat(thread.status().get(), equal", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return data;\n    }\n\n    private static DrumStoreEntry<String> createNewData(String auxiliaryData, String... val) {\n        InMemoryEntry<String> data = new InMemoryEntry<>();\n        if (val != null && val.length > 0) {", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       RoxanaProperties roxanaProperties = new RoxanaProperties();\n        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();\n        builder.withLocale(Locale.CANADA);\n        roxanaProperties = builder.build();\n        return roxana", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._socket.write(self._ping_msg)\n\n  def _CheckPingResponse(self):\n    \"\"\"Checks for a response to the last ping message.\"\"\"\n    if self._ping_ar:\n      self._ping_ar.kill()\n      self._ping", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert abs(freq2lag(lag2freq(v)) - v) < 1e-12\n\n\nclass TestAlmostEq(object):\n  @p(\"a, b, c\", [(1, 1, 1), (1, 1.00", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "=======================\n\nclass ConfigCommand(commands.Cog):\n\n    def __init__(self, bot):\n        self.bot = bot\n        self.config_manager = GlobalConfigCache(self.bot.dbi, self.bot)\n        self.channel_metadata = Channel", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if self.symbol in ('eq', 'ne'):\n        return numeric_equal(operands[0], operands[1])\n    elif self.symbol in ('lt', 'le'):\n        return numeric_less(operands[0], operands[1])\n    elif", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(getResources().getString(R.string.welcome_message, getResources().getString(R.string.app_name)));\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEvents.add", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Open the chat activity\n            try {\n                InvokeMethod.invokeStaticMethod(classToNotify, \"startChat\", newChatId);\n            } catch (Exception e) {\n                Log.e(this.getClass().getName(), e.getMessage());\n            }\n       ", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        LOG.info(\"response: {}\", JSON.toJSONString(response));\n        Assert.assertEquals(\"SUCCESS\", response.getResultCode());\n        String prepayId = response.getPrepayId();\n       ", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       MessageMapperEnum messageMapperEnum = mock(MessageMapperEnum.class);\n        when(messageMapperEnum.getKey()).thenReturn(Translator.getInterpolatedKeyOf(\"MessageMapperEnum.ERROR\"));\n        when(messageMapperEnum.getSeverity()).thenReturn(ERROR);", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\tint d1 = in.read1();\n\t\tint tag = d1 & 0x0F;\n\t\tif (tag == CODEINT4_TAG) {\n\t\t\treturn readSmallIntValue(d1);\n\t\t} else if (tag == CO", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "=======================\n\nself.management = management.Management(self)\nquota = quota.Quotas(self)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "\n        parser_class_list = (\n            LinuxPingParser,\n            WindowsPingParser,\n            MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate.getText()));\n\r\n        // set video properties\r\n        if (e.getActionCommand().equals(MainController.SET_INPUT_WAV)) {\r\n            setInputWav();\r\n        if", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self._probe = probe\n        else:\n            self._probe = _load_probe(kwargs.pop('probe_file', None))\n        self._kwargs = kwargs\n        self._logger = logging.getLogger(__name__)\n        self._logger.setLevel(logging.INFO)", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<Channel> connect(final TransportContext context, final ChannelHandler handler, final boolean reconnect) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"context is null\");\n        }\n        if (handler == null) {\n            throw", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "     self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    \"\"\"\n      Performs the bytecode analysis.\n    \"\"\"\n    self.parse()\n    self.build_cfg()\n    self.compute_conditions()", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       ObservableRegistry.getObservable(this.getClass()).register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "public void visit(final InExp inExp) throws QueryException {\n    final Column column = (Column) inExp.getColumn();\n    if (inExp.getValues().length == 0)\n      throw new QueryException(\"Cannot use empty IN clause\");\n\n    result.append(", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/input/ddi-simple.xml\");\n\t\t\tFile expectedOutputFile = new File(basePath + \"/output/ddi-simple.xml\");\n\t\t\tFile generatedOutputFile = ddi2xforms.generate", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "       self.assertEqual(\n            Normal(mu=0.0, sigma=1.0).draw(10),\n            np.random.normal(loc=0.0, scale=1.0, size=(10,)),\n        )\n\n        self.assertEqual(\n", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandboxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpad state\n\n        state = stateFactory.createState(VpadState.class);", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(BooleanTag tag, boolean value) throws InvalidValueException {\n\t\tValidity validity = isValid(tag);\n\t\tif (validity != null && validity.isBoolean()) {\n\t\t\tvalidity.validateBoolean(tag, value);\n\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "=======================\n\n    def test_replace_blank_name(self):\n        self.assertEqual(\"Your child\", replace_blank_name(name=None, language=\"English\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=\"\", language=\"English\"))\n       ", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expect(systemUnderTestMock.nonVoidMethod()).andThrow(new ExpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nCreated on Mon Apr 22 15:33:33 2013\n\n@author: jm\n\"\"\"\n\nimport struct\nimport binascii\nimport sys", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "```python\n        if not skip_table_setup:\n            table_name = self._compute_table_name(model)\n            self.session.create_table(table_name, model)\n```\n\n        # Bind all subclasses\n        for subclass in walk", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "======================\n\n    return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def bloquear_sessao(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.Funco", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "```python\nengine.bind(User)\n```\n\nThis will raise an `InvalidModel` exception because `User` is not a subclass of `BaseModel`.\n\n\ndef test_bind_model(engine):\n    \"\"\"Engine.bind(model) binds the model and", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "======================\n\nu7 = Unit(\"Msun/pc**3\")\nassert u7.dimensions == mass / length**3\nassert u7.base_value == 1.0 / (m_per_pc**3 * mass_sun_kg)\n\n\ndef test", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "=====================\n\n['Verify instance command references, returns paths, explicit ns',\n ['references', 'TST_Person.name=\"Mike\"', '--namespace', 'root/cimv2'],\n {'stdout': ['\"root/cimv2:TST_FamilyCollection", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       loadModules();\n        // Register listeners\n        registerListeners();\n        // Register commands\n        registerCommands();\n        // Register events\n        registerEvents();\n        // Register services\n        registerServices();\n        // Register contexts\n        registerContexts();\n        // Register hooks\n        register", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       tag = TAG()\n        if index >= 0:\n            self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag))\n        elif name:\n            self._call_fmod(\"FMOD_Sound_GetTagByName\", name, by", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   public void startEditActivity(DomainObject domainObject, int requestCode) {\n                        if (domainObject instanceof Account) {\n                            startActivityForResult(EditActivity.getIntent(MainActivity.this,\n                                    (Account) domainObject, AccountEditController.class,", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponse<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Query(\"page\") int page,\n\t\t\t@Query(\"sort\") Image.Sort sort,\n\t\t\t@Query(\"show_an", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.sensors.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(thermometer_data[\"temperature\"], aircraft.sensors.thermometer.temperature, delta=0", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "```python\ndef test_ref_value_path(reference_tracker):\n    \"\"\"has path, value not dumped\"\"\"\n    column = User.age[\"foo\"]\n    value = 3\n    expected_ref = \"#n0.#v0\"\n    expected_action", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           Platform.runLater(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    Alert alert = new Alert(Alert.AlertType.ERROR, \"Error adding queue item\", null);\r\n                    alert.setContentText(\"Error adding", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "=====================\n        if request.method == 'POST':\n            form = self.form_class(request.POST)\n            if form.is_valid():\n                comment = form.save(commit=False)\n                comment.post = post\n                comment.user =", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a list of trending terms, which are the most popular search terms\n     *\n     * @param serviceIds a {@link Map} of ids", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           disconnectFromWifi(mContext);\n            of(mConnectionErrorCode).ifPresent(errorCode -> of(mConnectionErrorCodeListener).ifPresent(errorCodeListener -> errorCodeListener.onError(errorCode)));\n        }\n    };\n\n    @NonNull\n    private final Time", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack.getArchivedCards()) {", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "=====================\n\nclass SegmentVadArguments(NamedTuple):\n    \"\"\"\n    Arguments for the :class:`SegmentVadFunction`\n\n    Parameters\n    ----------\n    vad_output : str\n        Path to the VAD output file\n    segmentation_output : str", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    private final Errands errands;\n    private final Vms vms;\n\n    public SpringDirectorClient(URI root, RestTemplate restTemplate) {\n        this", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag), name, len(name))\n        if name:\n            if tag.type != index:\n                raise FMODError(\n                    \"Tag with name '%s' not found\"", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "           self.process_template_data(bufr_message, bit_writer, section)\n\n        # The bitwriter is not closed yet. It will be closed when the message is\n        # serialized to bytes.\n        self.serialize_message(bufr_message, bit_writer)", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "=====================\n\n    form = ReportAbuseForm(request.POST)\n\n    if form.is_valid():\n        abuse_report = AbuseReport.objects.create(\n            logged_against=logged_against,\n            logged_by=logged_by", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   public void listenToResultSet(final Benchmark benchmark, final BenchmarkResult result) {\n\n        final NiceTable table = new NiceTable(11);\n\n        table.addHeader(\"Method\", \"Unit\", \"Mean\", \"StdDev\", \"Min\", \"Max", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       Application app = new Application();\n        app.run(args);\n\n        // finalizing MPJ environment (if available)\n        if (MPI.COMM_WORLD != null) {\n            try {\n                MPI.COMM_WORLD.Barrier();\n", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t}\n}\n\n//Expected code:\n//tropo.record(URL(\"http://example.com/recordings/%s.wav\"), BEEP(true), SEND_TONES(true), EXIT_TONES(\"music.wav\"));\n//trop", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "               listaDeRespostas.getPropriedades().getEstado() != EstadoDaListaDeRespostas.FINALIZADA) {\n\t\t\t// Verificando se a questão já foi respondida pelo aluno\n\t\t\tQuestao questao = questao", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tadapter = new PageAdapter(getSupportFragmentManager(), ProgramFragment.class);\n\t\t\t\t\tmDay1", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   AdInterface adInterface;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    AdMediaModel adMediaModel;\n\n    @Mock\n    PlayerUIController playerUIController;\n\n    @Mock\n    PlayerComponent playerComponent;\n\n", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tPlatform.exit();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// initialize the client\n\t\t\tclient = new Drive.Builder(GoogleNetHttpTransport.newTrustedTransport(), JSON_FACTORY, null)\n\t\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String className = rawName(type) + INJECT_ADAPTER_SUFFIX;\n    String adapterClassName = adapterName(className);\n\n    TypeSpec adapterSpec = new TypeSpec.Builder(adapterClassName, TypeSpec.CLASS)\n        .addSuperinterface(Binding.class)", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n        */\r\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\r\n         */\r\n        public static void enableReceiveNormalMsg(", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "======================\n\n  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOne)\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser()\n  params =", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "\n    if suffix:\n        return f'{path}/{suffix}'\n    else:\n        return path\n\n@method(function('id', 'id(.)', 'xs:ID', 'xs:ID?'))\ndef evaluate_id_function(self, context=None):", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "=====================\n\ndef last_record(table, fill=False):\n\"\"\"\nReturn the last record of the table\n\n:param table: a Table.\n:param fill: True if empty values have to be replaced with NaN\n:return: Generator with each record as a dictionary\n", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else if (message.getType() == MessageType.USER_INFO_REQUEST)\n            {\n                UserInfoRequestMessage m = (", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "=====================\n\n\t\tEXOG_A = []\n\t\tEXOG_B = []\n\n\t\tif opts.lefthemisphere:\n\t\t\tEXOG_A.append(dmy_lefthemisphere)\n\t\t\tEXOG_B.append(", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       main.join();\n        assertThat(main.getStatus(), equalTo(ThreadStatus.TERMINATED));\n    }\n\n    @Test\n    public void threadPool() {\n        ThreadDumpThread threadPool = sut.thread(\"Thread-1\");\n        assertThat(threadPool", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               DatePicker datePicker = new DatePicker(this, new DatePicker.OnYearMonthDayPickListener() {\n                    @Override\n                    public void onDatePicked(int year, int month, int day) {\n                        mRecord.setRecordTime(new Lun", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0)", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n\n    private ViewPager mViewPager;\n    private TabLayout tabLayout;\n\n    private List<Fragment> fragmentList = new ArrayList<>();\n    private List<String> titleList = new ArrayList<>();\n\n    @Override\n    protected", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "```python\nself.tracerouter = Tracerouter()\n```\n\n    def init_logging(self):\n        \"\"\"Set up logging to syslog and/or stderr\"\"\"\n        if self.config.log_to_syslog:\n            log_name = \"sw", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "```python\nassert isinstance(deltas.deltas[4].attributes, Thread)\n```\nThis line of code checks if the `attributes` property of the 5th delta in the list is an instance of the `Thread` class.\n\nThe error message suggests that the `", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "   @property\n    def outbox(self):\n        return Outbox(self)\n\n    def is_opensource_api(self):\n        return environ.get(\"NYLAS_OPENSOURCE_API\") == \"true\"\n\n    def is_opensource_api_token", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "   activityLightLevelManager = new ActivityLightLevelManager(this, activityLightLevelChanger);\n\n    // Set up the UI\n    setContentView(R.layout.activity_dynamic_star_map);\n\n    // Set up the UI\n    skyView = (GLSurfaceView)", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "======================\nnon_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=parameters, context=ctx)\n======================\n        lnlike = np.log(1.0 + np.exp(-(", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           ID(Pt=ID(), LenFunc=lambda: self.MSCm1()&0x03, Trans=False),\r\n            Str('ID', Pt=ID(), Len=1 to 8, Trans=False)])\r\n        self._post_init(with_options", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "```python\n        TcClassParser(self.__con).parse(device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output))\n```\nThis code is parsing the output of the `tc class show` command for a specific network", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "=====================\n\nif __name__ == \"__main__\":\n    import pandas as pd\n    import numpy as np\n\n    np.random.seed(123)\n    df = pd.DataFrame(np.random.rand(10, 5), columns=list", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "```python\n@validation_error(SwaggerMappingError)\ndef validate_response(response, validator_map):\n```\n\nThis decorator is used to transform a SwaggerMappingError into a ResponseValidationError.\n\n\ndef test_validate_response_success():\n   ", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
