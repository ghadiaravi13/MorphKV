{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t\tp.Players[j].Mobile.CloseG", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tgraph = self.graph.copy()\n\t\t\tself._init_graph(graph)\n\t\t\tself.graph = graph\n\t\t\tself.Y = Y_\n\t\t\tself.Z = Z_\n\t\t\tself.A = A\n\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "if __name__ == '__main__':\n    TestSndfile.main()\n    TestSeek.main()\n# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4\n# End of file", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def _get_subtitle_text(self):\n        \"\"\"\n        Get the subtitle text from the video page.\n        \"\"\"\n        # TODO: Implement this method\n        pass\n\n\nThis is a Python class for a VideoPage in Unisubs. The class inherits", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t\twriter.addAttribute(\"label\", styleValue.getLabel());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n#end\n\n# This is a custom delegate for the QTreeView widget.\n# It is used to display the question data in the treeview.\nclass QuestionDelegate(QStyleOptionViewItem, QAbstractItemDelegate):\n    def __init__(self, parent=None):\n        super", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Target = new SR_TargetLocation(RuneAcc, mob);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc,", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n\n/*\n * ServerHelloDone ... SERVER --> CLIENT\n *\n * This", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           try {\n                sp = new JESpace (name, path);\n                spaceRegistrar.put (name, sp);\n            } catch (Exception e) {\n                throw new SpaceError (e);\n            }\n        }\n        return sp;\n    }", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tRedButton btnImpact = new RedButton(Messages.get(this, \"impact\")) {\n\t\t\t\t@Override\n\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "# Create a dispatcher and a server\ndispatcher = Dispatcher()\nserver = HTTPServer(('localhost', 8000), WSGISOAPHandler(dispatcher))\n# Register SOAP methods\ndispatcher.register_method(MySoapMethod)\n# Start the server", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "   def lock_status(self, status_id):\n        self.statuses_lock[status_id] = True\n\n# This is the code that needs to be completed\n# The lock_status method is used to prevent the user from interacting with a status\n# while it is being", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "def action_copy_file(self, params, session):\n    return self.action_copy(params, session, \"CopyFile\")\n\nThis is a method for copying a file between two SFTP servers. It uses the action_copy method and passes the \"CopyFile\" type as an", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsNotNull (c);\n\t\t\tAssert.IsInstanceOf<ZoneIdentityPermission> (c);\n\t\t\tAssert.IsFalse (c.IsSubsetOf (a", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "# This is the main function that sets up the SSLContext and returns a socket\ndef create_ssl_context(key_file, cert_file, ca_file, key_password, cert_password, ca_password, verify_peer=True):\n    # Load the private key and certificate\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "       self.__tmp_file = os.path.join(self.__tmp_dir, 'datastream-%s.dat' % str(uuid.uuid4()))\n        self.__datastream_fd = os.open(self.__tmp_file, os.O_RDWR | os", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int)store.GetValue(iter, 0);\n\t\t\t\t\t//Log.Println(\"jumpID: \" + jumpID);\n\t\t\t\t\t//Log.Print", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            Arg arg = args[i];\n            if (arg != null) {\n                String argName = arg.getName();\n               ", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}));\n\t\tprivate ConfigFile configFile;\n\t\tprivate String fileName;\n\t\tprivate ConfigFile getConfigFile() { return configFile; }\n\t\tprivate String getSavePath() {", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"Auto save\",\n\t\t\t\t\t\tget", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               if (m_Owner.Caster.Party != null)\n                {\n                    foreach (Mobile m in m_Owner.Caster.Party.Members)\n                    {\n                        if (m != m_Owner && m.Alive && m.Map !=", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "# def _finalize_loaded(self, states):\n#     \"\"\"\n#     Ensure that all loaded state is fully initialized, including\n#     identity map and ORM state.\n#     \"\"\"\n#     for state in states:\n#         if state.is_new:\n#            ", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getName().toString();\n\t\t\tfinal List<IField> named = name2Field.get(name);\n\t\t\tif (named != null) {\n\t\t\t\tfinal int suffix", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "====================\n\nclass UIModule(object):\n    \"\"\"A base class for UI modules.\n    \"\"\"\n    # ...\n\nclass Application(object):\n    \"\"\"A web application.\n    \"\"\"\n    # ...\n\ndef main():\n    \"\"\"Run the application.\n    \"\"\"\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n//\n// The following code is used to render the MultiView control in a template.\n//\n// <%@ Control Language=\"C#\" AutoEventWireup=\"false\" CodeBehind=\"MultiView", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "if __name__ == '__main__':\n    args = parser.parse_args()\n    downloader = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    downloader.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Poss", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds += platforms.get('desktop', [])\n    # Add Android builds if mobile is not None\n    if mobile:\n        builds += android_builds(alt_build, builds)\n    # Sort the builds by OS name\n    builds = sorted(builds, key=lambda", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeans = StatusBL.getByProjectTypeIssueTypeAssignments(projectID, issueTypeID);\n\t\t\tstateBeans = GeneralUtils.filterByID(stateBeans, object", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax && memberList.Any( x => x.Identifier.ValueText == identifierNameSyntax.Identifier.ValueText ) ) {\n                    var memberDeclaration = member", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the children are the correct verticals for the first group configuration.\n        self._assert_children(split_test, 2)\n        # Set to second group configuration.\n        split_test = self", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           //if (vertical) {\n            //    PdfIndirectObject cmap = writer.DirectObject;\n            //    cmap.Put(PdfName.TYPE, PdfName.CMAP);\n            //    cmap.Put(PdfName.VERSION, new Pdf", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the parent\n\t\t\t\t\t\t\tCell", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      InputStream is = context.getResources().openRawResource(model.getSprite());\n      try {\n        return BitmapFactory", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\nif __name__ == \"__main__\":\n    # TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\n    # This is just a placeholder for testing the navigation steps\n    # Replace", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles, sequences);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               if (Enabled)\n                    ImageUrl = EnabledImageUrl;\n                else\n                    ImageUrl = DisabledImageUrl;\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "sharpness = sharpnessFromNBT(compound);\n\t}\n\t\n\t@Override\n\tpublic NBTTagCompound writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return getId() + \" [\" + getProbability() + \"]\";\n    }\n}\n// End Effect.java\n// This file is part of FreeCol - the Free Civilization game.\n// Copyright (C) 2006-2015 The FreeCol", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "# allow admin to access any group\nt2 = store.store.tokens.create(\n    username='admin',\n    groups=['everyone'],\n    read=True,\n    write=True,\n    admin=True\n)\n# test that admin can access any group\nassert t", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "# Test that the delta is empty when nothing has changed\nself.assertEqual(person.delta(), {})\n# Test that the delta is not empty when something has changed\nperson.name = \"new name\"\nperson.save()\nself.assertNotEqual(person.delta(), {})\n# Test that", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "=====================\n\ndef save_plot(fig, filename):\n\"\"\"\nSave a plot to a file.\n\"\"\"\nif figure is None:\nfig = bokeh.plotting.figure(x_axis_label='X', y_axis_label='Y')\nif figure is", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (!ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in toScan)\n            {\n                _logger.Trace(\"Scanning {0}\", path);\n                _", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       resbrains = getToolByName(self.context, 'uid_catalog')\n        resbrains.reindexObject(UID=uid)\n        resbrains = resbrains.searchResults(query)\n        if len(resbrains) > 0:\n            obj =", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tpublic int Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = value; }\n\t\t}\n\t\tpublic int X\n\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // get channel_uri:\n                    channelUri = GetParcelVoiceChannel(land.ParcelID);\n                    if (String.IsNullOrEmpty(channelUri))\n                    {\n                        // create channel_uri:\n                        channelUri = CreateParcelV", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.DateTime;\n\t\t\tPayPeriodCur.DateStop=textDateStop.DateTime;\n\t\t\tPayPeriodCur.DatePaycheck=textDatePaycheck.DateTime;", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAMEII_timeseries(column_headings)\n        # Convert the X and Y columns to lists.\n        x_values = [float(x) for x in column_headings['X']]\n        y_values", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "# This function is used by the `group_member_create` and `organization_member_create`\n# functions to check if the user is allowed to add a new member to the group or\n# organization.\ndef _check_group_or_org_member_auth(context, data", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tString childClassName = example.getLabel(predictionAttribute).toString();\n\t\t\t\tNode childNode = null;\n\t\t\t\tfor (Node child : node.getChildren()) {\n\t\t\t\t\tif (child.getClass().getSimpleName().equals(", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return this.SearchSegments(settings, segments, null);\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param>\n        ///", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = string.charAt(offset++) << 10\n                      | string.charAt(offset++) & 0x3FF;\n         }\n         if (_range != null && _range.contains(codePoint)) {\n            return offset;\n         }\n         return", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tObservationDAO observationDAO = new ObservationDAO();\n\t\tList<Observation> observations = observationDAO.getObservationsByAccessionNumber(accessionNumber);\n\t\tif (observations != null && observations.size() > 0) {\n\t\t", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderToClient(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != Mod.CurrentModId)\n", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif (beans == null)\n\t\t\treturn coll;\n\t\tfor (ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVoVo bean : beans)\n\t\t\tcoll.add(bean);\n\t\treturn coll;\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify()\n#-------------------\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.Length];\n            A.GetValue(seqindex, ref ret);\n            return ret;\n        }\n    }\n}", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " pD[ 'plotName' ] = pD[ 'plotName' ].replace( ' ', '_' )\n  pD[ 'plotName' ] = pD[ 'plotName' ].replace( '/', '_' )\n  pD[ 'plotName' ] =", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (player.IsPaused || !player.IsAlive || player.IsDead || player.IsDisconnected)\n\t\t\t\treturn;\n\t\t\tif (player.IsIdle || player.IsIdleReason != IdleReason.Idle)\n", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       // Save the compiled plan\n        String planName = \"Plan_\" + name;\n        String planFile = BuildDirectory + \"/\" + planName + \".sql\";\n        BuildDirectory = BuildDirectory + \"/\" + planName;\n        BuildDirectory = new File(BuildDirectory);\n       ", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(221, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte) parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = (byte) stop_bits;\n\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "   page = self.get_page(self.user.get_absolute_url(), login_as=self.user)\n    self.assertEqual(page.status_code, 200)\n    self.assertTemplateUsed(page, 'user_profile.html')\n    self", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   _keep_tempdir = parser.parse_args().keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n    main()\n# vim: set fileencoding=utf-8 :\n# Local Variables:\n# mode: python\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tself.list.append(entry)\n\t\t\t\tself.listLength = len(self.list)\n\t\t\t\tself.list.moveTo(self.listLength - 1)\n\t\t\t\tself.list.setSelection(self.listLength", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               int barWidth = (int)Math.Ceiling(x * (BAR_WIDTH + INTER_BAR_WIDTH));\n                int barHeight = (int)Math.Ceiling(barHeight * (n + 1));\n                int textWidth = (", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n\n// The following code is for testing purposes only.\npublic static void main(String[] args) {\n  Properties props = new Properties();\n  props.setProperty(\"foo\", \"bar\");\n  props.setProperty(\"bool\", \"true\");", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "#         y_points = np.arange(-89.5, +89.5, 1.23)\n        y_points = np.arange(-89.5, +89.5, 1.23)\n        # sample points\n        sample", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrent", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "# build_dataset()\n# get_mfccs()\n# save_echonest_data()\n# save_mfccs()\n# save_wavs()\n# save_wavs_to_txt()\n# save_wavs_to_txt_with", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, name, dll=None, resultType=None, argTypes=(), doc=None, argNames=(), extension=None, deprecated=False ):\n        \"\"\"\n        Create a null function object.\n\n        :param name: The name of the function", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           baos.write(emptyStreams.toByteArray());\n            writeUint64(header, baos.size());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileInfo(final DataOutput header, final SevenZFile", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   alphaLevel -= 1;\n                    if (alphaLevel <= 0)\n                    {\n                        inRamp = true;\n                        try {\n                            Thread.sleep(rampDelay);\n                        } catch (InterruptedException e) {\n                            e", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           item.CanBeRemovedFromQueue.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_allow_removal_of_item_if_it_is_seeding()\n        {\n            PrepareClientToReturnCompletedItem(false,", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "           if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n            }\n            if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken,", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "#        f.writelines(['F) ', str(NX), '\t\t# Image size in pixels\\n'])\n#        f.writelines(['G) ', str(NY), '\t\t# Image size in pixels\\n'])\n#        f.writelines(['H) ', str", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 1);\n                    i += ((b & 0x04) << 2);\n                    i += ((b & 0x02) << 3);\n                    i += ((b & 0x", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "   @property\n    def _course_key(self):\n        \"\"\"\n        Return the CourseKey for the course.\n        \"\"\"\n        if self._course_key is None:\n            self._course_key = CourseKey(self._course_dict['number'], self._course_dict", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tString chanceString = splitNumber[1].replace(\"%\", \"\");\n\t\t\tchance = Float.parseFloat(chanceString);\n\t\t}\n\t\treturn (int) (Math.random() * ", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "# main\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            state=dict(choices=[\"present\", \"absent\"]),\n        ),\n        supports_check_mode=True,\n", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 12);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "```python\n        for plugname, plug in self.loaded_plugins:\n            try:\n                plug.run()\n                plugruncount += 1\n            except KeyboardInterrupt:\n                self.ui_log.info(_(\"Plugin %s interrupted by user\")", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class IConferenceFossil(IConference):\n    def __init__(self, conference):\n        self.conference = conference\n        self.id = conference.getId()\n        self.title = conference.getTitle()\n        self.startDate = conference.getStartDate()", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(new File(fileTextField.getText()), subfolders, messageWriter);\n            } else {\n                result = MessageImporter.", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(\"value\").intValue();\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.isOpened()) {\n            Bundle parameters = new Bundle();\n            parameters.putString(FIELDS_FOR_FETCHING_USER_INFO, REQUEST_FIELDS);\n            Request request = new Request(", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions){\n\t\t\tsum += emotion.chance;\n\t\t}\n\t\tfor (Emotion emotion : emotions){\n\t\t\temotion.chance /= sum;\n\t\t}\n\t}\n}\nThe code above is a", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "#                    'property1': 2, 'property2': 3}\n                    'property1': 2, 'property2': 3}\n            }],\n            self.build.to_list()\n        )\n    def test_to_xml(self):\n       ", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   Long = (x/k0 + (1/3*eccSquared*sin(2*phi1Rad)*cos(phi1Rad)\n                   + 1/12*eccSquared*cos(2*phi1Rad))*x/pow(pow", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n    form = ReportUserForm(request.POST)\n    if form.is_valid():\n        report = form.save(commit=False)\n        report.user = request.user\n        report.save()\n        Site.objects.get_for_current_request().send_", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(StepView):\n    \"\"\"A step for entering the name of the new product series.\"\"\"\n    form = form(IProductSeries, fields=['name'])\n    template = ViewPageTemplateFile('templates/product_add_step_one.pt')\n\nclass Product", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "=====================\n    config._post_processors = {\n        'isa': [default_isa, set_isa],\n        'positional_tags': [compile_tag_regex],\n        'num_threads': [threads_as_int],\n        'isa_variant': [", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override bool IsSubclassOf (Type type)\n            {\n                return false;\n            }", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "# class OBD_PID_XX(OBD_Packet):\n#     name = \"PID_XX\"\n#     fields = [\n#         # Add fields here\n#     ]\n#     # Add any custom methods here\n#     def __init__(self, *args,", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.connection = self.bus.get_connection()\n\t\tself.connection.add_filter(self.handle_message)\n\t\tself.connection.add_filter(self.handle_method_call)\n\t\tself.connection.add_filter(self.handle", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           }\n            else if (m_Mobile is PlayerMobile)\n            {\n                PlayerMobile pm = (PlayerMobile)m_Mobile;\n                if (pm.Backpack.FindItemID(10728) != 0)\n                {\n                    pm", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    def __enter__(self):\n        \"\"\"Enter the context.\"\"\"\n        self.push()\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):\n        \"\"\"Exit the context.\"\"\"\n        self.pop(exc_value)\n\n   ", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name == topic_name)\n    return response\n# #############################################################################################################################\n# This", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "dx = (angles - min_rot_angle) / alen\nelse:\n    # Find projection of axis on detector\n    axis_proj = _axis_in_detector(ray_trafo.geometry)\n    # Find distance from projection of rotation axis for each pixel\n    dx", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\nclass ProxyManager:\n    def __init__(self):\n        self.proxies = []\n        self.proxy_list = []\n        self.proxy_count = 0\n        self.proxy_enabled = False\n        self.proxy_type = ''\n        self.", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (IsEmpty)\n\t\t\t\treturn String.Empty;\n\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\treturn font_size_names [(int) type];\n\t\t}", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextLengthException(\n\t\t\t\t\t\t\t\"Blocklength is not correct for decryption.\");\n\t\t\t\t}\n\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(innerObj.Properties[1].Key, Is.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    int index = h * width + w;\n                    if (w < width - 1) {\n                        edges.add(T2(w+\"-\"+h, w+\"-\"+(h", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "=====================\n\ni1 = iso.Isoelastics(ds, lut_identifier=\"test-LE-2D-ana-19\")\ni1.get(col1=\"area_ratio\",\n      col2=\"deformation\",\n      lut_identifier=\"test-", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final File file1 = new File(\"data/test1.db\");\n        final File file2 = new File(\"data/test2.db\");\n\n        final LocalTripleStore db1 = new LocalTripleStore(file1);\n        final LocalTripleStore db2 = new", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "if __name__ == '__main__':\n    unittest.main()\nThis code is a test script for the alert module. It imports the alert module, defines a test class AlertTest, and sets up some test cases using the unittest framework. The test cases include checking that alerts are", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallation(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.Dispose();\n\t\t\tOpenGL.CheckGLError();\n\t\t\tSDL.GL_DeleteContext(context);\n\t\t\tOpenGL.CheckGLError();\n\t\t\twindow.SetGraphicsContext(null);\n\t\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "   @property\n    def total_cov_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the total *xy* covariance matrix.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return np.vstack((self.data", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 noCanonicalAccounts.add(owningAccount.getAccountNumber());\n                  noCanonicalAccounts.add(owningAccount.getAccountAlias());\n                  noCanonicalAccounts.add(owningAccount.getAccountName());\n                  noCanonicalAccounts", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public IFolder SelectedFolder\n        {\n            get { return _selectedTreeNode == null ? null : _selectedTreeNode.Folder; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand();\n        VmTemplate entity = new VmTemplate();\n        entity.setName(name);\n        entity.setId(Guid.newGuid());\n        entity.setIsImported(isImportAsNewEntity);\n", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.alignment1 = new global::Gtk.Alignment (0.5F, 0.5F, 0.5F, 0.5F);\n\t\t\tthis.alignment1.Add (this.table1);\n\t\t\tthis.frame", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "# ==============================================================================\n# Set up the database connection\n# ==============================================================================\n# self.db = self.get_db()\n# ==============================================================================\n# Set up the database connection\n# ==============================================================================\n# self", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic FieldBuilder DefineField(string name, Type fieldType, FieldAttributes attribs)\n\t\t{\n\t\t\treturn DefineField(name, fieldType, attribs, null);\n\t\t}", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getIndex(i, x)));\n            }\n        }\n    }\n\n    /**\n     * @param i\n     * @return the index of the first vertex of quad <", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (CmsStringUtil.isNotEmpty(showDateData)) {\n            String[] dateCols = CmsStringUtil.split(showDateData, ';');\n            for (String dateCol : dateCols) {\n                if (dateCol.equalsIgnoreCase(", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n//  This script is part of the MaterialUI package, which can be found at http://www.assetstore.unity3d.com/#!/content", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n  }\n}\n\n//--------------------------------------------------------------------------------------------------\n//\n//  mRemoteNG - A free remote desktop application\n//\n//------------------------------------------------", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n               ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // Check if all discount criteria codes are used for at least one discount\n            if (CriteriaCodesUsed.Count != 3)\n            {\n                ValidationColumn = DiscountTable.Columns[\"DiscountCriteriaCode\"];\n                VerificationResult = new TScreenVerificationResult(this", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, (int) stream.Length);\n                // Adding file content as byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __len__(self):\n        \"\"\"Number of requirements\"\"\"\n        return sum(len(v) for v in self._reqs.values())\n\n    def __iter__(self):\n        \"\"\"Iterator over requirements\"\"\"\n        return itertools.chain(*self._reqs.values", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && !CopyRange; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (_customRange != value)\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation lineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (lineAnnotation.getLineNumber() < 0) {\n                    throw new IllegalStateException(\"Invalid line number: \" + lineAnnotation);\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "}\nThis code is a base class for food items in Ultima Online. It includes properties and methods for handling food items, such as consumption, stacking, and poisoning. The code includes abstract methods for determining the fill factor and the satiety value of a food item, which are left for derived classes to", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.Item(\"Q\").GetValue<bool>() && Q.IsReady() &&\n", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a new GridBagConstraints with default values\n\t * @return\n\t */\n\tpublic static GridBagConstraints get", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"predanswers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "   self.assertEquals(field_model_def, field_def)\n\nif __name__ == '__main__':\n    run_tests(TestParser)\n\n# vim:ft=python:et:sw=4:ts=4:sts=4:tw=78", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new object[]{\"10\", \"E1\"});\n                // widen to string\n                env.CompileDeploy(\"create index idx_widen_string (LongPrimitive primary key, StringPrimaryKey)\").AddListener(\"s0\");\n                SendEventLong(", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        clibrebound.rebound_particle_scale(c, c_double(", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n\nI'm trying to create a new view for a website, but I'm having trouble with the code above. I'm", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        c.putClientProperty(documentBaseKey, text);\n    }\n    /**\n     * Returns the factory for creating the HTML renderer.\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "s = create(filename, content)\nassert s.content_type == \"text/html\"\nassert s.manifest_version == 2\nassert s.manifest == {\n    \"name\": \"test\",\n    \"version\": \"1.0\",\n    \"description\": \"", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmNamedSQLQuery(namedQueryReference, mapDoc);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.SqlLoader.AddNamedQuery(namedQueryReference, mapDoc);\n\t\t\t}", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.pop();\n    }\n    private void popInvocations(int count) {\n        assert count >= 0;\n        for (int i = 0; i < count; i++) {\n            popInvocation();\n        }\n    }\n    private boolean", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "# pytest_args = pytest.split()\n# self.pytest_cmd = self.args['pytest'] + \" \" + \" \".join(pytest_args)\n# self.pytest_cmd = self.args['pytest'] + \" \" + \" \".join(", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueStamp stamp = ValueUtil.getStamp(value);\n                    ValuePhiNode phiNode = getCachedPhi(key, stamp);\n                    mergeValue(value, phiNode);\n                }\n            }\n       ", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException e) {\n                // Handle remote exception\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCamera", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic EodonMapGump(Mobile from)\n\t\t{\n\t\t\t_ = new EodonMapGump(", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "=====================\n\nThe code above defines two classes, `Record` and `RecordMetadata`, which are\nused to represent records and their metadata in the database. The `Record`\nclass is a subclass of `db.Model` and is decorated with the `__tablename__`\nattribute", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def __getstate__(self):\n        state = super().__getstate__()\n        state['module'] = self.module\n        return state\n\n    def __setstate__(self, state):\n        self.__dict__.update(state)\n        self.module = self.get", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def __init__(self, msgid, msgstr, fgettext=None, fngettext=None,\n                 fgettextv=None, fngettextv=None, encoding=None):\n        \"\"\"\n        Constructor.\n        **Keyword arguments**:\n         ", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "########################################################################################################################################\n#\n# This is the entry point for the agent\n#\n########################################################################################################################################\ndef main():\n  \"\"\"\n  \"\"\"\n  myAgent = ValidateOutputDataAgent( AGENAME, AGVERSION, AGENAME,", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif (action.startsWith(PLUGINS_PREFIX) || action.startsWith(PLUGINS_PREFIX + \"/\")) {\n\t\t\t\t// Allow access to plugins\n\t\t\t\treturn action;\n\t\t\t} else if (action.startsWith(PLUG", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerrit(builders=['Builder1'])\n        d = self.run_fake_single_build(gsp, buildResult, verifiedScore=verifiedScore)\n        result = yield d\n        self.assertEqual(result, makeReviewResult(", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'test'\n    self.category.label = 'label'\n    self.category.scheme = 'scheme'\n    self.category.schemeURI = '", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<>();\n            for (Map.Entry<String, AnnotationMirror> e1 : r1.entrySet()) {\n                String key = e1.getKey", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# Register classes\nbpy.utils.register_class(MATERIAL_PT_context_menu)\nbpy.utils.register_class(MATERIAL_PT_context_menu_items)\nbpy.utils.register_class(MATERIAL_PT_context_menu", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Mapper.MapperNo == 16)\n            {\n                var mapper16 = (Mapper16) _engine.Memory.Mapper;\n                Mapper16_IRQWidth = mapper16.IRQWidth;\n                Mapper", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem oMenuItem = new JMenuItem(\"Open Document\");\n            oMenuItem.setActionCommand(SOPENDOCUMENT);\n            oMenuItem.addActionListener(oActionListener);\n            _jMnuRoot.add(oMenuItem);\n        }\n        private JMenuItem getIn", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Green Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Blue Bears]\n\t\tAdd(\"Party Quest\",", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = MeasuredHeight;\n\t\t\tint newHeight = 0;\n\t\t\tfor (int i = 0; i < ChildCount; i++) {\n\t\t\t\tView child = GetChildAt (i);\n\t\t\t\tint childHeight", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "=====================\n\n# AnnouncementTwitterCrossPublicationManager\nclass AnnouncementTwitterCrossPublicationManager(models.Manager):\n    \"\"\"\n    Custom manager for the :class:`AnnouncementTwitterCrossPublication` model.\n    \"\"\"\n    def get_by_", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#lexers.register_lexer(name='php', filename='*.php', lexer=PhpLexer)\n# Enable highlighting for PHP code not between <?php ... ?> by default\n#lexers.register_lexer(name='inline-php', lexer=", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "# This line of code is where I need help.  I need to sum the duration for each groupID\n# and then set the start time for the next groupID to be the end time of the previous groupID\n# I can't figure out how to do this.\n#\n# I have", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "# TODO: implement this function\ndef db_get_last_snapshot(project_id):\n    \"\"\"\n    This function will connect to the database and return the last snapshot timestamp for the given project.\n    \"\"\"\n    conn = rethinkdb_connection()\n    snapshot = conn.table('", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tMsg(\"I'm not involved in any kind of conspiracy.<br/>I don't know what you're talking about.<br/>I'm just a simple shepherd.<br/>I swear!\");\n\t\t\tbreak;\n\t\t\tcase \"sheep\":\n\t", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {\n    'login': LoginResponse,\n    'logout': LogoutResponse,\n    'loginok': LoginOkResponse,\n    'loginerr': LoginErrorResponse,\n    'loginerr_pass': LoginErrorPassResponse,\n    'loginerr_pass_old", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nclass HostData:\n    \"\"\"\n    Data about a single host's execution of a task.\n    \"\"\"\n    def __init__(self", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n            finish();\n        }\n    }\n}\nThis code is a part of an Android app that unshortens URLs. The code is", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "# TODO: Add step for checking that primary_db is compressed\n# TODO: Add step for checking that primary_db is not compressed\n# TODO: Add step for checking that primary_db is compressed with a specific algorithm\n# TODO: Add step for checking that primary_db is not comp", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n    def copy_tree (self, src, dest):\n        \"\"\"Copy a tree of files from 'src' to 'dest'.\"\"\"\n        if os.path.isfile(src):\n            shutil.copyfile(src, dest)\n        elif os.path.isdir(", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int i = 0; i < lazyPropertyNames.Length; i++)\n\t\t\t{\n\t\t\t\tif (lazyPropertyNames[i] == fieldName)\n\t\t\t\t{\n\t\t\t\t\tobject propValue = disassembledValues", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "#\n# @brief Add a job to the queue\n# @param[in] job_id The job id\n# @param[in] max_vmem The maximum virtual memory (in MB)\n# @param[in] max_cpu The maximum CPU time (in hours)\n# @", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // GET: Delegate/Edit/5\n        public ActionResult Edit(int id)\n        {\n            var model = service.GetDelegateById(id);\n            if (model == null)\n           ", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       return string.Format(\"{0} {1} {2} {3}\", obj.GetType().Name, ((Circle) obj).Radius, ((Circle) obj).Position.X, ((Circle) obj).Position.Y);\n                    }\n                    if (obj", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    def handlePremium(self):\n        premium_url = self.URL.getURL(self.URL(self.URL(self.URL(self.URL(self.URL(self.URL(self.URL(self.URL(self.URL(self.URL(self", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path != null && path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\t/// <summary>\n\t\t/// Determines the location from which to search for harvestable resources.\n\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "       return True\n\n    def clean_dhcp_leases(self):\n        \"\"\"\n        Clean out old dhcp leases\n        \"\"\"\n        if self.settings.dhcp_max_lease_time is not None:\n            max_lease_time = int(self.", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder().setSource(source).setSeqno(seqNo.getAndIncrement());\n    }\n}\nThe code above is an abstract class named AbstractEventProducer which implements the EventProducer interface. It provides a default implementation for sending events of different severity levels (", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           for (PpmContext currentContext = context; currentContext != PpmContext.ZERO; currentContext = currentContext.Suffix)\n            {\n                if (currentContext.NumberOfStates > 0)\n                {\n                    if (currentContext.Statistics[symbol] !=", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// Sequence VR\n        /// </summary>\n        public static new DicomVr Sq\n        {\n            get { return Sqvr.Instance; }", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[0]);\n\t\t\t//if(SqliteJump.IsTestTypeInSession(sessionID, tFull[1]))\n\t\t\t//\tcontinue;\n\t\t\t//if(SqliteJump", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_delete_bytes_from_empty(self):\n        o = self.file(b'')\n        delete_bytes(o, 8)\n        self.assertEquals(b'', self.read(o))\n\n    def test_delete_bytes_from_", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n<td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X</td>\n    <", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# plot_app_vc(cr, 'Firefox')\n# plot_app_vc(cr, 'Thunderbird')\n# plot_app_vc(cr, 'Seamonkey')\n# plot_app_vc(cr, 'Mozilla-central')\n# plot", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "if __name__ == '__main__':\n    unittest.main()", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRoundRect(x + 1, y + 1, controlSize - 2, controlSize - 2, 2, 2);\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " def simulateClassifier(self, classifier, testName):\n    \"\"\"\n    Simulates the classifier on a set of test patterns.\n    \"\"\"\n    failures = \"\"\n    numPatterns = 1000\n    numClasses = 2\n    patterns = numpy.", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(elementKind, offset, value);\n    }\n    @Override\n    public boolean isLayoutCompatible(Layout layout) {\n        if (layout instanceof OhmArrayLayout) {\n            final OhmArrayLayout other = (OhmArrayLayout) layout;\n           ", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = FileUtils.Combine(ParentDirectory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n           ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef url_parse(url):\n    \"\"\"\n    Parses a URL into its components\n    \"\"\"\n    # Python 2.x\n    if py_version < 3:\n        import urllib\n        return urllib.urlparse(url)\n    # Python ", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "     }\n    }\n  }\n}\nThe code above is incomplete. The next line of code should be:\ni2 = i1 + 1;\nThis line of code is used to update the index i2, which is used to access the next element in the array paramArrayOf", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"  \" + s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               });\n            #endregion\n            #region Lux\n            Spells.Add(new Spell(SpellSlot.Q, 525, 150, 1500, false, SkillShotType.Linear));\n            Spells.Add(new Spell", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.user@test.com\", \"test.tenant\"));\n\t}\n\tprotected void mockSecurityContextWithAdmin() {\n\t\twhen(securityContext.getCurrentTenantId()).then", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "   @testlib.with_tempfile\n    def test_popen_reads_from_file(self, tempfile):\n        context = testlib.TestContext()\n        context.add_executable(\n            'cat',\n            ['/bin/cat'],\n            ['", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (string.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tconfigDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), applicationName, \"config\");\n\t\t\t}\n\t\t\tif (string.IsNullOrEmpty", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//\n\t\t// Summary:\n\t\t//     Initializes a new instance of the Constraint class.\n\t\t//\n\t\t// Parameters:\n\t\t//   constraintName:\n\t\t//     The name of the constraint.\n\t\t//\n\t\t// Exceptions", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n        Dialog.setTabOrder(self.zoomby_spinbox, self.tickmark_spinbox)\n        Dialog.setTabOrder(self.tickmark_", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               return true;\n            }\n            String stationId = wxs.getString( 0 );\n            String city = wxs.getString( 1 );\n            String country = wxs.getString( 2 );\n            String countryCode = wxs.getString( 3 );\n           ", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring queryString = \"from Continent c join fetch c.countries\";\n\t\t\t\tint count = s.CreateQuery(queryString).List<Continent>().Count;\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crc_table[(uiCRCITTSum & 0xFF) ^ uiByteValue];\n            }\n            return (ushort)uiCRCITTSum;\n        }\n       ", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn hasSpeedModule() ? 10 : 5;\n\t}\n\t/**\n\t * @return The position below that is checked for movement affecting the sentry's movement\n\t */\n\tprivate BlockPos getBlockPosBelowThatAffectsMovement() {\n\t", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = \n                new IHyperlinkDetector[] {\n                        new CeylonHyperlinkDetector(editor),\n                        new JavaHyperlinkDetector", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "# Create the Object3DAspect widget\nself.object3DAspect = Object3DAspect(self)\n# Create the Object3DScale widget\nself.object3DScale = Object3DScale(self)\n# Create the Object3DPrivateInterface widget\nself.object", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set X\n\t\t\t\t\t{\n\t\t\t\t\t\tint x = info.X;\n\t\t\t\t\t\tif ( x >= 0 && x < TotalX )\n\t\t\t\t\t\t{\n\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        String label = selectConverter.convert(valueChoice);\n                        if (Strings.equalsIgnoreCase(label, Strings.toString(value)))\n                        {\n                           chosenObj = valueChoice;", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tfor (int k=0; k<maxChangesRecorded; k++)\n\t\t\t\tsb.append(\"\"+k+\"\\t\"+fractionWithChange[i][j][k]+\"\\n\");\n\t\treturn sb.toString();\n\t}\n}", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that could not be priced\n                                int orderIndex = unpricedLine.Key;\n                              ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\tpublic void AddParameterInspector (IParameterInspector inspector)\n\t\t{\n\t\t\tparent.AddParameterInspector (this, inspector);\n\t\t}\n\t\tpublic void Add", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager, ownerId, mode, ownerGroupId);\n        final int testUserId = ownerId + 1;\n        final boolean expected = false;\n        final boolean actual = permission.canRead(testUserId);\n       ", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn new Vector3 (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint(XDREnumeration):\n    class key(XDREnumeration):\n        VLAN = XDREnumeration.add_member('VLAN', 0)\n        MAC = XDREnumeration.add_member('MAC', 1)\n        IP =", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    Console.WriteLine(\"Client disconnected: \" + i);\n\t\t\t\t    RemoveClient(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == Portal.RequestType.Step) {\n                List<StepBucket> list2 = convertToStepBucketList(list);\n                notifyStepsReceived(requestId, list2);\n            } else if(type == Portal.RequestType.Activity) {\n              ", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " # Generate the non-single-use version of the helper function.\n  GenerateHelperFunction(function_name, bind_count, exec_count, is_method=False)\n\n# Generate the single-use version of the helper function.\ndef GenerateSingleUseHelperFunction(function_name", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\"\"\"\nresponse = HttpResponse(content_type='application/json')\njson_data = []\nfor item in items:\n    json_data.append(range_item_dict(item))\njson_str = json.dumps(json_data)\nresponse.write(json_", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "               new VarNode(\"score\"), null/* c */,\n                Scope.DEFAULT));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        final QueryOptimizer optimizer = new QueryOptimizer();\n        final QueryNode expectedAST = optim", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n    def dispatch(self, request, *args, **kwargs):\n        self.object = None\n        try:\n            self.object = self.get_object(queryset=self.model.objects.all())\n        except self.model.DoesNotExist:\n            self", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // tfqmr_iter(A, b, x, &tol, &max_it, &converged, &iter, &precond, &M, &z, &p, &q, &r, &tau, &tau_old, &uodd, &ueven", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           if reference_set_map[v] != -1:\n                A[focal_index, reference_set_map[v]] += 1\n                sample_counts[reference_set_map[v]] += 1\n        v = parent[v]\n       ", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "   def test_backend(self):\n        \"\"\"Test the backend\"\"\"\n        self.connector = self.__class__.__name__\n        self.ocean_index = self.connector + \"_ocean\"\n        self.enrich_index = self.connector + \"_enrich\"\n       ", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam && slot.Value.Team != null)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(botController, \"add", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" : \" + _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "# TODO: Implement DataFrame\nclass DataFrame(Frame):\n    def __init__(self, stream_id, flags=None, data=b''):\n        super().__init__()\n        self.stream_id = stream_id\n        self.flags = flags or 0\n", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "#endif\n            foreach (var node in cluster.Nodes) {\n                if (node.Geometry == null)\n                    throw new Exception(\"Geometry is null for node \" + node);\n                if (!cluster.BoundaryCurve.Contains(node.Geometry))\n                    throw new Exception", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos (m_maxSlopeRadians);\n}\nvoid btKinematicCharacterController::setMaxSlopeCosine(double slopeCosine)\n{\n\tm_maxSlopeCosine = slopeCosine;", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            if (isInUniqueConstructor(initializer)) {\n                checker.report(initializer,\n                        \"Assignment to a unique constructor parameter\");\n            }\n        }\n        return super.visitNewArray(node,", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tN", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t\t_type = typeAttribute.Value;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the methods associated with this comment.\n\t\t/// </summary>\n\t\tprivate", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()){\n\t\t\t\tmyTrackBar.Size = new Size(100, 50);\n\t\t\t\tmyTrackBar.Orientation = Orientation.Horizontal;\n\t\t\t\tmyTrackBar", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\twhen(classType.isAnnotationType()).thenReturn(true);\n\t\t\twhen(classType.isInterfaceType()).thenReturn(false);\n\t\t\tdoReturn(Collections.singletonList", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postdominators != other.postdominators)\n\t\t\treturn false;\n\t\tif (this.pathSensitiveType != other.pathSensitiveType)\n\t\t\treturn false;\n\t\tif (this.pathSensitiveType != null)\n", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[start][r.leftChild];\n            int min = (min1 > min2) ? min2 : min1;\n            if (min > narrowL) {\n              continue;\n            }\n            int max1 = wideRExtent[", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               'rsync',\n                '--archive',\n                '--compress',\n                '--delete',\n                '--exclude={\"*.pg_xlog\",\n                          \"*.pg_wal\",\n                          \"*.pg_stat\",\n                          \"", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "writer.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n}", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tfinal Contact that = (Contact)aThat;\n\t\treturn ( (", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if n == 0:\n      status = 'w'\n    else:\n      status = 'a'\n    with open(output_name + '.config', status) as f:\n      f.write(str(structures) + '\\n')\n      for i, structure in", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       idx = node.op.idx\n\n        if len(idx) == len(node.inputs[0].shape):\n            # This is a full slice\n            if all(isinstance(x, (int, long, scalar_type))\n                   for x in idx):\n              ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "=====================\n\ndef save_community_form(request, community, form):\n    \"\"\"Save the form data to the Community model.\"\"\"\n    community.name = form.cleaned_data['name']\n    community.description = form.cleaned_data['description']\n    community", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "```python\nreturn query\n```\nThis code is used to wrap the listener function and return the Query object if the listener function does not return anything. This is necessary because the Query class is immutable and the listener function should not modify it directly. Instead, it should return a new Query object with the", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "# Register the descriptor\nXBlockDescriptor.register(ConditionalDescriptor)\n# Register the descriptor with the system\nedx_platform.registry.register_edx_module_type(ConditionalDescriptor)\n# Register the descriptor with the system\nedx_platform.registry.register_edx", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "=====================\n\nThe code seems to be incomplete and missing some context. Here's a possible completion based on the given code:\n\n```python\n# ...\n\nNext line of code:\n=====================\n\ndef to_global(key):\n    return self._map_", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && (Method == null && Field == null && Sig == null))\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"ldtoken: 'class' attribute must be combined with either 'method', 'field'", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//\n", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.getNoPrefix(\"mail/syncmail.1.tag\")\n        self.assertEqual(c.branch, \"1.0\")\n        self.assertEqual(set(c.files), set([\"mail/syncmail.py\"]))\n        self.assertEqual(c.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n\n        for (Map.Entry<String, String> datum : csvData.entrySet", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isGenerating()) {\n\t\t\tif(player.capabilities.isCreativeMode) {\n\t\t\t\temptyMana();\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tif(player.getHeldItemMain", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCommunity(Community", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if __name__ == \"__main__\":\n    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO)\n    do_upgrade()", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.disconnect();\n\t\t\tcomputerMgmt = null;\n\t\t\tthis.Close();\n\t\t}\n\t\tprivate void importHostsFile()\n\t\t{\n\t\t\tOpenFileDialog ofd = new OpenFileDialog", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Converts a ical4j Period to a Datable.", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Bind( DataSource.Component, SourceEventName );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAnd", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ObjectMapper mapper = new ObjectMapper();\n            SpanPortConfig spanPortConfig = mapper.readValue(jsonData, SpanPortConfig.class);\n            ISwitchManager switchManager = (ISwitchManager) ServiceManager.getService(ISwitchManager.class);\n           ", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImageHelper(102000, \"/ims/images/alert.gif\", new Integer(16", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   def make_assertion(self, subject, predicate, object, project_uuid):\n        \"\"\"\n        Make an assertion in the project with the given project_uuid\n        \"\"\"\n        # Create a new LinkEntity for the object\n        le = LinkEntity.objects.create(uri", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit= \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .readonly   = \")\n                .Append(StringUtil.ToHexString", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katana\n\t\t\t\tbytes [posn++] = (byte)(ch - 0x30);\n\t\t\t\tbytes [posn++] = (byte)(ch - 0x30 + 0x80);\n\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\ndef tricore_ld(obj, off2, off3, off1, b, a):\n    dst = env.D[a]\n    src = env.load_word(env.get_address(off2, off3, off1))\n    obj.operands", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();\n\t\t\tmap.setProperties(properties);\n\t\t\treturn map;", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL || this == ADVENTURE;\n       ", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.PurgeDefault();\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t\tAssert.AreEqual (0, csd.SystemAcl.Count);\n\t\t}\n\t\t[Test]", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "# Here we go!\n# Start the lookup thread and submit the results to it.\n# The lookup thread will return the results as soon as they are available.\n# The results will be added to the song's tags.\n# The lookup thread will be stopped when the queue is empty.\n#", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       // ------------------------------------------------------------------\n        // Add your custom RPCs here.\n        // ------------------------------------------------------------------\n        // ------------------------------------------------------------------\n        // Add your custom RPCs here.\n        // ------------------------------------------------------------------\n        // ------------------------------------------------", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       if (Config.show_message_discussion_button) {\n            discussionBack = rootLayout.findViewById(R.id.discussion_back);\n            discussionBack.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "       # Transform wave function\n        psit_G = np.dot(psit_G, self.symmetry.op_scc[s])\n        if time_reversal:\n            psit_G = np.conj(psit_G)\n        return ps", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildCreateUtkastRequest(PATERNUMMER, \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\",", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\tif(child is ILBasicBlock) {\n\t\t\t\t\t\tILBasicBlock childAsBB = (ILBasicBlock)child;\n\t\t\t\t\t\tif(prevChildAsBB", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //if we're not a ragdoll then we'll need to set all the parts to ragdoll\n\t    //and then set our own rigidbody to be non-kinem", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class StratumLayer(GeoLayer):\nWhat should be the next class after FractureLayer?\nThe next class after FractureLayer should be StratumLayer. StratumLayer is a subclass of GeoLayer and represents a geological layer that is not fractured or strat", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte) ((num >>> 24) & 0xff);\n        out[outOff + 2] = (byte) ((num >>> 16) & 0xff);\n        out[outOff + 1] = (byte", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source );\n            this.objectVariables = objectVariables;\n        }\n        private Map<String, PatternNode> objectVariables;\n        @Override\n        protected Predicate<PatternMatch> getFilter()\n        {\n            return new Predicate<PatternMatch>()\n            {\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_values_holder_to_json(values_holder, format = None):\n    \"\"\"\n    Transform a values holder to a JSON object.\n\n    :param values_holder: A values holder.\n    :param format: The format of the values.\n    :return:", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           frameToClose = (InternalFrame)frame.getParent();\n            try {\n              frameToClose.setSelected(true);\n            } catch (PropertyVetoException ex) {\n              ex.printStackTrace();\n            }\n          }\n        }\n      });\n      btn.add", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "# Define the functions that will be called on the server\n# These functions should be defined in the server code\n# and should return the data that is expected by the client\n# functions\n# The first argument is the name of the function\n# The second argument is a docstring describing the function\n# The", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   for (int z = 0; z < p.getRasterDepth(); z++)\n    {\n      for (int y = 0; y < p.getRasterHeight(); y++)\n      {\n        for (int x = 0; x < p.getRaster", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   ContentValues cv = new ContentValues();\n                    cv.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.ID_GROUP + \" = \" + deleteId,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n        public IntPtr Ptr\n        {\n            get", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tif (queue[0].Number > numberToCancel)\n\t\t\t\t{\n\t\t\t\t\tqueue[0].Number -= numberToCancel", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    infoText += \" file\" if numberOfFiles==1 else \" files\"\n    infoText += \"<br>\"\n\n    if numberOfHiddenFiles>0:\n        infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \"\n        infoText += \"file\"", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(r'@\\1@@', code)\n        # replace all variables by their value\n        for x in self.env.get_values():\n            code = code.replace('%' + x[0] + '%', x[1])\n", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "if __name__ == '__main__':\n    try:\n        rospy.init_node('PlanningServer')\n        PlanningServer()\n        rospy.spin()\n    except rospy.ROSInterruptException:\n        pass\n    except KeyboardInterrupt", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] - 2 * h[ 0 ], 1 );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExt", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(\n                        utf8(pattern),\n                        timestampFormatFactory.", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tif (qs.Execute().ReturnValue < 0)\n\t\t\t\treturn false;\n\t\t\tentity.cti_id = Convert.ToInt32(qs.GetParameterValue(\"@cti_id\"));\n\t\t\treturn true;\n\t\t}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic int PropertyCount\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic string PropertyNames\n\t\t{\n\t\t\tget { throw new NotImplement", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "# Set the proposed configuration\nself.proposed = dict()\nself.proposed[\"key_id\"] = self.key_id\nself.proposed[\"password\"] = self.password\nself.proposed[\"trusted\"] = self.trusted\n# Set the current configuration\nself.", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           component = self.store.update(component, {'edited': {'$set': {'edited': datetime.datetime.utcnow()}}})\n            # Verify that the component was updated\n            check_node(component.location, component, editing_user=editing_user)\n", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        updateWithCharacters(ch, start, length);\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n        digest.update((byte)", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "#def mkrange(data):\n#    record = unpack(data, 'rang')\n#    start, end = record['rang']\n#    return (start, end)\n#\n#def mkcomparison(data):\n#    record = unpack(data, '", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = api.ActionDescriptor.GetParameters()[0].ParameterType;\n            if (type == typeof(HttpActionContext))\n            {\n                type = api.ActionDescriptor.ReturnType;\n                if (type == typeof(HttpResponseMessage))\n                {\n                ", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "       elif event.keyval == gtk.keys.K_Return:\n            self.set_cursor_position(path, column, 0)\n            self.set_cursor(path, column, 0)\n            self.set_focus(column)\n            self.set_", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(\"locations\", newLocationList);\n        }\n        // Return the bean's property values, which now include the updated locations list\n        return beanProperties;\n    }\n    /**\n     * The order of this bean is higher than that of all other beans", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           lines = f.readlines()\n        finally:\n            f.close()\n    if lines:\n        for line in lines:\n            if len(line.strip()) == 0:\n                module.fail_json(msg=\"Password file contains blank lines\")\n    if state", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "       [In, MarshalAs(UnmanagedType.Interface)] IntPtr pUnkEvent\n            );\n        [PreserveSig]\n        int QueueEventParamUnkVar(\n            [In] MediaEventType met,\n            [In, MarshalAs(UnmanagedType.Interface)]", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       authorize(\n                PrincipalType.USER,\n                directedAclKeys.getPrincipalId(),\n                Permission.WRITE,\n                DirectedAclKeys.class );\n        spm.addPrincipalToPrincipal( directedAclKeys );\n       ", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element matches what is expected.\"\"\"\n        expected_tag = element.tag.split('", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "=====================\n\n# This is a placeholder for the SAX parser.\n# The parser is not implemented here.\n# The parser is implemented in the minidom.py file.\n# The parser is used to parse the XML document and build the DOM tree.\n# The parser is also used", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) object, diagnostics, context);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\n\t/**\n\t* Validate that the {@link", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvType.Name) && decoder.readNestedTlvsStart(TlvType.Name).\n\t\t\t\t\treadNestedTlvsStart(TlvType.Name).readNestedTlvsStart(", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the camera\n        updateCamera();\n        \n        //Updates the HUD\n       ", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().addJoin( action );\n        hide();\n      }\n    } );\n    action.setColor( colorValue );\n    hide();\n  }\n}\n*/\naction.setColor( color );\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "# Raise an error if the response status code is not 200\nif r.status != 200:\n    err = json.loads(r.data.decode())\n    raise RuntimeError(\"Error: %s\" % err[\"message\"])\nfilename = get_filename(", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = response.FailureReason;\n\t\t\t}\n\t\t\tcatch (Exception ex)", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _find_carbon_sources(model: cobra.Model) -> List[str]:\n    \"\"\"Find carbon sources in the model.\n    Parameters\n    ----------\n    model : cobra.Model\n        The model to search for carbon sources.\n    Returns\n    -------\n    list", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "class Unit(CachedTreeItem, models.Model):\n    \"\"\"A unit of translation, consisting of a source string and a target\n    string.\n    \"\"\"\n    #: The source string.\n    source = models.CharField(max_length=255, db_index=", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        migrations.AddField(\n            model_name='city',\n            name='state',\n            field=models.ForeignKey(to='events.State'),\n        ),\n\n        migrations.AddField(\n            model_name='academiccenter',\n            name='city',", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "# self.controller.send(ofp, ofp.OFPT_ARP_REPLY, arp_reply)\n\ndef handle_arp_request(event):\n    ofp = event.connection\n    arp_request = event.parsed\n    arp_reply = of", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_RecentItems.size() >= m_MaxNumberOfRecentItems) {\n      m_RecentItems.remove(m_RecentItems.size() - 1);\n    }\n    m_RecentItems.add(item);\n    updateMenu();", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.FightMode == FightMode.Aggressor || src.FightMode == FightMode.PassiveAggressor)\n                return true;\n            return false;\n        }\n    }\n}\nI'm not sure what the next line of code", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null) {\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        }\n        return half", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\n\tstatic void Compile() {\n\t\tint i;\n\t\tNode p;\n\t\tBitArray b;\n\t\tBit", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteAsync(buff);\n\t\t\tBeginAsyncRead();\n\t\t\treturn mReadBuff;\n\t\t}\n\t\tprivate void WriteAsync(byte[] data)\n\t\t{\n\t\t\tmWriteQueue.Enqueue(data);\n\t\t\tif (", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order);\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tif(o1 == null && o2 == null)\n\t\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List<Item>();\n\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (int j = 0; j < N_INDEXES; j++)\n            {\n                _units2Indx[j] = j;\n            }\n        }\n    }\n}\n//UPGRADE_NOTE: The following 'using' directives cannot", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "# Create a new compute rate\ncompute_rates = cfme.compute_rates.ComputeRates()\nnew_compute_rate = compute_rates.create(description='TestComputeRate',\n                                      currency='USD',\n                                      fields={'Used CPU': {'per", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.WriteData( offset, length, src, discardWholeBuffer );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tOpenTK.Graphics.ES", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.satfinder_scan_nims.addNotifier(self.createSetupPage, initial_call=False)\n\t\tself.satfinder_scan_nims.addNotifier(self.createScanPage, initial_call=False)\n\t\tself.satfinder", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else if (filterStr.isEmpty()) {\n                throw new IllegalArgumentException(\"empty filter string\");\n            }\n            else {\n                String[] filters = filterStr.split(\";\");\n                for (String filter : filters) {\n                    String[] parts = filter.split", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the previous row buffer\n                Array.Copy(curr, 0, prior, 0, bytesPerRow);", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage(interface='org.freedesktop.DBus',\n                                   member='NameOwnerChanged')\n        self.assertEqual(s.get_interface(), 'org.freedesktop.DBus')\n        self.assertEqual(s.get_", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def __str__(self):\n        return \"MASS object\"\n\nI'm trying to add a method to this class that computes the Massey product of two elements in the first cohomology group. \n\nThe method I've written, p_operator, takes an", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           AssertParseError(\n                \"1:1: Message type \\\"protobuf_untested_type\\\" has no default constructor.\",\n                \"protobuf_untested_type: 123\");\n        }\n    }\n}\n// ReSharper restore Inconsistent", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Map oldMap = this.map;\n\t\t\tfor ( Object key : m.key", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Account ).Username );\n\t\t\t}\n\t\t\tcatch { }\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member removing an auction\n\t\t/// </summary>\n\t\t/// <param name", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\nclass HrAttendance(models.Model):\n    _inherit = 'hr.attendance'\n\n    def attendance_action_change(self):\n        \"\"\"\n        This method is called when the user checks in or checks out.\n        \"\"\"\n        self.ensure_one()\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = null;\n\t\tfor (int i = 0; i < form.grdResults().getRows().size(); i++)\n\t\t{\n\t\t\tgrdResultsRow row = (grdResultsRow) form.grdResults().get", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// Sets the position of the item.", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       new_terminal = maker.new_terminal(self, cwd, profile, debugtab)\n        self.add_terminal(new_terminal)\n        self.show_all()\n        self.terminal_focus(new_terminal)\n        self.emit", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add(new StructFieldInfo(name, managedType, marshalAttribute, arraySize));\n                }\n            }\n            return toReturn;\n        }\n    }\n    public class StructFieldInfo\n    {\n        public StructFieldInfo(string name, Type", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base.IsValueType || (base_type != null && base_type.IsEnum);\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsByRef {\n\t\t\tget { return attributes.GetMask (TypeAttributes.IsByRef) !=", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n//The following code is for the Decisions.Decision class.\n//It is not part of the ROM class.\n//It is used", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.Context(\n        _openssl_version_from_ssl_protocol(protocol)\n    )\n    self.context.set_options(OpenSSL.SSL.OP_NO_SSLv2)\n    self.context.set_options", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label6 = new global::Gtk.Label ();\n\t\t\tthis.label6.Name = \"label6\";\n\t\t\tthis.label6.LabelPropagate = true;\n\t\t\tthis.label6.UseMarkup = true;\n\t", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "# headbook.connect(\"page-reordered\", page_reordered)\n\n################################################################################\n#                                                                              #\n#                                                                              #\n#                                                                              #\n#                                                                              #\n#                                                                              #\n", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-next\": QKeySequence(Qt.CTRL + Qt.Key_PageDown),\n    \"Move-Tab-to-previous", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [name=\" + this.persistenceUnitName + \", providerClass=\"\n\t\t\t\t+ this.persistenceProviderClass + \", transactionType=\" + this.transactionType\n\t\t\t\t+ \", dataSource=\" + this.dataSource + \", properties=\" + this", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   IEditorInput editorInput = getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFileEditorInput fileEditorInput = (IFileEditorInput)editorInput;\n      return fileEditorInput.exists() && !fileEditorInput.isSaveLocal();", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(752, 12);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(10", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}\n\nI'm trying to add a new method to this class, called `getMarkedContentUrl()` that", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC6979Test ()\n\t\t{\n\t\t\tbyte[] key = new byte[] { 0x0b,", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch (EnumSwitcher.option_1) {\n\t        case option_1_1:\n\t            current_sum += 4;\n\t            break;\n\t        case option_1_2:\n\t            current_sum += 4;\n\t            break;\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      String javaPath = java.GetStringValue(\"JavaHome\");\n      if (javaPath == null)\n        return null;\n      return javaPath;\n    }\n    private static String GetJavaHome()\n    {\n      String javaHome = Environment.GetEnvironmentVariable", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   comment = l\n\n    if job is not None:\n        if re.match(r'%s' % shlex.quote(job), l):\n            return [comment, l]\n\n    return []\n\n    def find_env(self, name):\n        # attempt", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Mesh Modifiers\nanswers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           double[] likelihoods = new double[totalBuckets];\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                int rankCount = rankCounts[i];\n                double rankBucket = i + 1.0;", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n       ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\nif __name__ == \"__main__\":\n    p = Pydump()\n    p.main()\n\n#This is the main function that runs the script.\n#It creates an instance of Pydump class and calls its main function.\n#This is the entry point of the script", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(12, 12);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(200, ", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'id': ('models.AutoField', [], {'primary_key': 'True'}),\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank':", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // If the type is not defined in the current project, then we need to check the imported types\n                // to see if the type is defined there.\n                Iterator importedTypes = getProject().getImportedTypes().iterator();\n                while (importedTypes.hasNext", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_refuse(self, cr, uid, ids, context=None):\n        self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets the currently selected <see cref=\"IBusinessObject\"/>\n        /// </summary>\n        IBusinessObject IBOColSelector.SelectedItem\n        {\n            get { return this.", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"{0} ({1}): {2} ({3})\", Name, TargetName, TypeDescription, Channels);\n        }\n    }\n}\n\n// The following code is for the MixerControl class\nusing System;\nusing System.Runtime.Interop", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(valueObject.getCareContext().getID(), valueObject.getCareContext().getVersion());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tdomainObject.setCustomID(value", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\"],\n            cwd=self.config[\"build_dir\"],\n            env=env,\n            args=opts)\n        if status:\n            return status\n        notify_darwin = self.config[\"notify_darwin\"]\n        if not is_", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[] { 0, n }, false));\n\t\t}\n\t}\n\t/**\n\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash, gitItemStatuses);\n            }\n            Loading.Visible = false;\n            Loading.IsBusy = false;\n            Stashes.Enabled = true;\n            Stashed.Enabled = true;\n            Clear", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "# print out the addresses of the beam monitor outputs\nst_arch_ptr_t bm0_address = lattice.cbuffer.get_object(bm0_index).out_address\nst_arch_ptr_t bm1_address = lattice.cbuffer.get_object(", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) > 0;\n    }\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(\"AddInt\", asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += PanelDatenQuellen.TAB;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "# Load the archive index\narchive_index = load_archive_index(args.index_file)\nif archive_index is None:\n    log.msg('Could not load archive index')\n    sys.exit(1)\nargs.func(archive_index)\n# archive_index", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.mosi_bits = miso\n        self.ss, self.es = ss, es\n        # Handle command tokens.\n        if ptype == 'BITS':\n            self.handle_bits()\n        # Handle data.\n        elif ptype == 'DATA':\n           ", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         cursor = limit - v_3;\n          if (cursor < limit_back) {\n            break lab0;\n          }\n          limit_back = cursor;\n          continue lab0;\n        } while (false);\n        // gopost\n        limit = limit_back;", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.newInstance();\n                if (cd != null) {\n                    cd.last = o;\n                    cd.nreceived++;\n                    fireTableCellUpdated(channelMap.indexOf(cd), 2);\n                }\n                if (", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_extension_value(self, extension):\n        \"\"\"\n        Get the value of an extension.\n\n        :param extension: The extension to get the value of.\n        :return: The value of the extension.\n        \"\"\"\n        value = extension.get_value()", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (i != s.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\"\"\", file=f)\n    print(\"\\t\\t\\tif (C%d::is_emitting) {\" % (len", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "# interval_1word, intervals_2words = get_contigous_intervals(X)\n# if interval_1word is not None:\n#     return [(0, interval_1word.end), (interval_1word.end, X.end)]\n# else:", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\t// tabulate attributes\n\t\t\t// (if any)\n\t\t\t// for this symbol\n\t\t\t// (if any)\n\t\t\t// and store them\n\t\t\t// in the symbol's attrPos\n\t\t\t// list.\n\t\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n#\n# OpenERP Sale Order Line EDI Import\n#\n# This module extends the Sale Order Line model to support EDI", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS_SSL);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testGetPermissions()\n    {\n        // test get permissions", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# Here you can add your test cases for the Enumerator class\n# or any other class you want to test.\n# For example:\n#\n# class TestEnumerator(object):\n#     def test_match_subsystem(self, context):\n#         devices = context.list", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "# Initialize device\ndevice = Device(deviceToken)\n# Initialize user\nuser = user.newUser(loginId, password)\n# Login\nuser.login()\n# Check inspection\ninspection = device.check_inspection()\nprint(inspection)\n# End of code\n#", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# This is the main part of the code.\nargs = docopt(__doc__)\ndataset = args['<dataset>']\ncalibrator = args['--calibrator']\nsegment = args['--segment']\n# We need to find the dataset.\n# We'll assume it'", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = 0x1011 + (int)(0.1f * (Keys.Count + 1));\n        }\n        private class InternalTarget : Target\n        {\n            private KeyRing m_Owner;\n            public InternalTarget(KeyRing owner)\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> it = devices.iterator(); it.hasNext();) {\n            String deviceName = it.next();\n            String ipAddress = ipAddressMap.get(deviceName);\n            int model = liveModelMap.get(deviceName);\n            TunerManager", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATIONS) {\n      jobs.put(Version.USER_NOTIFICATIONS, new UserNotificationsMigrationJob());\n    }\n    if (lastSeenVersion < Version.USER_NOTIFICATIONS_2) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     List<Pattern> regex = new ArrayList<>();\n      for (String regexString : split[0].split(\"\\\\s+\")) {\n        regex.add(Pattern.compile(regexString, ignoreCase ? Pattern.CASE_INSENSITIVE : 0));\n      }\n      String type", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       for p in path:\n            if os.path.isfile(os.path.join(p, n)):\n                return SCons.Node(os.path.join(p, n))\n            # try the sub-path\n            if sub_path:\n                for", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "# Mapnik Python bindings are built on top of the C++ Mapnik library.\n# The C++ library is built with the Boost Python library.\n# The Boost Python library is used to create Python bindings for C++ classes.\n# The following code is used to register the Python classes", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "# Initialize the Ansible module\nmodule = AnsibleModule(\n    argument_spec=dict(\n        name=dict(required=True, type='str'),\n        state=dict(default='present', choices=['present', 'absent']),\n        partition=dict(required", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "=====================\nclass MethodAddView(AutomateBase):\n    class name(Label):\n        locator = ('css selector', '#method-list > ul > li > a')\n        text_regex = r'^(.+) - (.+)$'\n\n    class location", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"ActionFactory: getActionObject: \"\n                    + \"Action class not found: \" + className);\n        }\n        return result;\n    }\n    public void publishEvent(Event event) {\n        // TODO: implement event publishing\n        // get all listeners for", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "=====================\n\nclass ViewsTest(TestCase):\n    \"\"\"Tests for the views.\"\"\"\n\n    def test_thread_list_view(self):\n        \"\"\"Test that the thread list view returns a 200 status code.\"\"\"\n        response = self.client.get(reverse(\"", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "# if msvc_exists(env, 'link'):\n#     embedManifestDllAction(target, source, env)\n#     return 1\n# else:\n#     raise SCons.Errors.BuildError(\"MSVC linker not found, cannot embed manifest\")\n# end", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           ISchedulingRule rule = getSchedulingRule();\n            Job job = new Job(\"\") { //$NON-NLS-1$\n                @Override\n                protected IStatus run(IProgressMonitor monitor) {\n                    try {\n                        IStructuredSelection", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Allocate output row meta\n\t\tdata.outputRowMeta = new RowMeta();\n\t\tdata.outputRowMeta.setDynamic(true);\n\t\tdata.outputRowMeta.setName(meta.getName());\n\t\t\n\t\t// Allocate fields\n\t\t", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "```python\nassert f(last_rounded_fwd, d(2014,1,31, 22,21)) == (last_rounded_fwd, d(2014,1,31, 22,21))\n", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //Walking Range\n            int walkingrange = Utility.Random(swalkingrangeA, swalkingrangeB);\n            //S", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def get_vm_info(vm):\n    \"\"\"\n    Get the VM info from the guest.\n\n    :param vm: QEMU session or virsh connection\n    :return: dict: VM info\n    \"\"\"\n    info = {}\n    if isinstance(vm, qemu.", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(1, TimeUnit.MINUTES);\n        int received = rc.get();\n        System.out.printf(\"Received %d messages from subscriber%n\", received);\n    }\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(r, destination);\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn (uint)value;\n\t\t\tif (value <= 0x7FF)\n\t\t\t\treturn (uint)((ushort)(value >> 8) | 0x8000);", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.env.run_command('arj', 'x', au_flags, cwd=cwd,\n                              on_done=refresh, on_error=refresh)\n        # or:\n        self.fm.env.run_command('tar', 'x',", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringString_ConstructorWithParameters ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (typeof (COMTest), new object[] { 3 });\n\t\t\tCOMTest objCOMTest = (COMTest", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "   def testOneOldAndOtherNew(self):\n        da = Locale.objects.get(code='da')\n        de = Locale.objects.get(code='de')\n        repo = self._setup(da, Action.PENDING, Action.ACCEPTED)\n       ", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.info(\"Sending userstate update to %s\", userstate.session)\n            self.send_userstate(userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        elif cmd.cmd == PYCMD_TEXT:\n", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.setLeader(player);\n            group.onLeaderChange(player);\n        }\n    }\n    public static PlayerGroup getGroup(Player player) {\n        return", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\ndef test_table():\n    t = vlt(\n        formatter=\"Terminal\",\n        outfile=sys.stdout,\n        sep=\"|\",\n        cols=[\n            (\"Name\", 15),\n            (\"Value\", 20),\n            (\"Comment\",", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "   def test__update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t}\n\twhile (parent instanceof Grid);\n\t((Grid) parent).addColumn(column);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               Image = new Bitmap(ReadElement(element, \"Image\").InnerText);\n            } catch (Exception ex) {\n                throw new Exception(\"Error loading creature \" + Convert.ToString(GUID) + \":\\n\" + ex.Message);\n            }\n        }\n       ", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = new PeerlessActivation( m_Peerless );\n\t\t\t\t\tfrom.AddToBackpack", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(ims.care.vo.ChangeOfServiceVo bean : beans)\n\t\t\tcoll.add(bean);\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version(7, new int[]{0, 1, 2, 3, 4, 5, 6, 7}, new ECBlocks(new ECBlocks(new ECBlocks(new ECBlocks(new ECBlocks(new ECBlocks(new ECBlocks(new ECBlocks(new EC", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pbOut = kdf.DeriveKey(p, pbMsg, pbSalt, pbKey, pvInfo);\n\t\t\tif(!MemUtil.ArraysEqual(pbOut, pbExpc))\n\t\t\t\tthrow new Exception(\"Test failed\");\n#", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tfloat discount = 0F;\n\t\tfor(ItemStack armor : player.inventory.armorIn", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Add your custom middleware classes here.\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.Cs", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but this queue has {1})\", NextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t\t/// <summary>", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList != null))\n                return false;\n        } else if (!this.actionTraceList.equals(other.actionTraceList))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = PhoneNumberUtils.parse(p.readString(), null);\n            dc.type = p.readInt();\n            dc.isRinging = p.readInt() != 0;\n            dc.isHeld = p.readInt() != 0;\n", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(x, y, 0);\n                newNormals[index]", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_METHOD_NAME_ADD, testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = ((Integer) rawResult).intValue();\n\t\t\t\t\n", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void addC", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Object not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                       16 + (~(stactics.barriers & (1 << i))),\n                        16,\n                        bitmap,\n                        Machine.gfx[5],\n                        i + 1,\n                        pixel_x,\n                        pixel_y,\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(position) <= spell.Width)\n                                {\n                                    result.Add(target);\n                                }\n                            }\n                            break;\n                        case Collision.Minions:\n                            foreach (var minion in\n                              ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       return existsInducingPath(x, y, graph, new HashSet<>());\n    }\n    /**\n     * Returns true if there is a path from x to y in the graph, and all nodes on the path are in the set.\n     *\n     * @param x the", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (pop[i] is Drawable)\n                        plcs.Push(pop[i] as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Initialize the element\n        /// </summary>\n        public", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentFile == null && other.attachmentFile != null) {\n            return false;\n        }\n        if (this.attachmentFile != null && other.attachmentFile == null) {\n            return false;\n        }\n        if (this.attachmentFile != null &&", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] != from && mobiles[i].Alive && SpellHelper.CheckToxic(from, mobiles[i]))\n                            AOS.Damage(from, mobiles[i], m_Item.GetDamageTo(mobiles[", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.Last().Value = null;\n\t\t\t\t\tHistory.Last().Key.", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sComponentName) {\n    return mock.getAvailCompo", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog1 = ZipFilesDialogFragment.newInstance(files);\n                    dialog1.show(ActionModeController.this.get", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.channel.close();\n    }\n    public void close(IChatBaseComponent ichatbasecomponent) {\n        this.channel.writeAndFlush(new PacketPlayOutChat(this.channel.getRemoteAddress(), this.n(), ichatbasecomponent));\n        this", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               z_arr[p_index, kk, :] = z_dict[z_key][per][:]\n                z_err_arr[p_index, kk, :] = z_dict[z_key][per][3:]\n            for t", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    String names = String.join(\", \", recipients.stream().map(Recipient::toShortString).toArray(String[]::new));\n    return context.getString(resourceMany, names);\n  }\n}", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "       env[\"PATH\"] = os.pathsep.join(env[\"PATH\"] + extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = os.pathsep.join(env[\"LD_LIBRARY_PATH\"] + extra_lib)", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "def load_manifest(manifest_file, tests_root):\n    with open(manifest_file) as f:\n        manifest_json = json.load(f)\n        manifest = Manifest()\n        manifest.update(manifest_json)\n        manifest.tests_", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.dispose();\n            compiledScript = null;\n        }\n    }\n    private Binding createBindingForCompilation() {\n        final Binding binding = new Binding();\n        binding.setVariable(\"node\", Node", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotImplementedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether a timeout can be set for a wrapped server\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass AtomicTransformer(Transformer):\n  \"\"\"\n  Transforms a dataset by converting molecular representations to atomic\n  representations.\n  \"\"\"\n  def __init__(self, max_num_atoms=100):\n    super(AtomicTransformer, self).__", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo) obj;\n\t\tif (this.id == null && other.id != null)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif (this.", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n    @Test\n    public void shouldFindStacksByNames() throws Exception {\n        final String name1 = \"stack1\";\n        final String name2 = \"stack2\";\n        final", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION_REGEXP\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// If the pattern is a call, then the candidate must be a call with the same identifier\n\t\t\tif (pattern.IsCall)\n\t\t\t{\n\t\t\t\tif (candidate.IsCall && candidate.Call.Identifier.Name == pattern.Call.Identifier", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "               if (colisionList.Any())\n                {\n                    extendedFarmLocation = colisionList.First().Position;\n                    extendedWillHit = true;\n                    extendedFarmLocation = objAiBase.Position;\n                    extendedWillHit = true;\n", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t\t// Controls\n\t\tsuper.addControl(factory.getControl(ctnContracts.class, new Object[] { this, new Integer(1), new Integer(1), new Integer(1), new Integer(1", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "@task\ndef prerequisites():\n    \"\"\"\n    Install Python and Node.js prerequisites.\n    \"\"\"\n    if sys.version_info[0] < 3:\n        raise BuildFailure(\n            \"Python 3.x is required.  You have", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'sub_ids': [(6, 0, [self.env.ref('test_testing_utilities.sub1').id])]\n        })\n        f = Form(r)\n        with self.assertRaises(ValueError):\n            f.sub_ids =", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x**2, (x, 0, n))) == Sum(x**2, (x, 0, n))\n\n    # Test changing index of a sum with a symbolic index\n    x, n = symbols('x n')\n    assert simpl", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif (argc==1) {\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(action, changedItems, startingIndex);\n            }\n        }\n        private void InitializeAdd(NotifyCollectionChangedAction action, IList changedItems,", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           String xml = writer.toString();\n            InputStream is = new ByteArrayInputStream(xml.getBytes());\n            XMLStreamReader reader = factory.createXMLStreamReader(is);\n            int event = reader.next();\n            assertEquals(XMLStreamConstants.START_DOCUMENT, event", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType = Token2Csv();\n                    break;\n                case Param.CampusStatus:\n                    c.CampusStatus", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  Planes: {0}\", ide.planes", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // adds the JSR block to the successors of the RET blocks\n                for (Edge e = l.successors; e != null; e = e.next) {\n                    if (e.target.status & Label.RET) {\n                        e.target.success", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectReference(ptr_of_this_method, __mStack);\n            UnityEngine.Ray __instance = (UnityEngine.", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.select(position.equals(Position.INSIDE_SLICE) ? 0 : 1);\n\t\t\tlblLabelPosition.setText(\"Label Position: \" + position.toString());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self.find_element_by_xpath( '//*[@id=\"Image\"]/input' )\n        self.assertEqual( currImageValue.get_attribute('value'), str( int(lastImageValue) - 1 ) )\n\n# This test checks that", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "=====================\n\nclass Kex(object):\n    \"\"\"\n    This class is used to implement the SSH-2 KEX (Key Exchange) protocol.\n    \"\"\"\n    def __init__(self, transport, kex_algorithms):\n        \"\"\"\n        :param transport: The", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           FileSystemTree tree = (FileSystemTree) this.tree;\n            FSTreeNode folderNode = tree.getFileSystemNodeManager().getOrCreateFolderNode(\n                    overallNodeName, connectionData, disableTreeSelection);\n            if (folderNode != null) {\n              ", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "               (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                if res:\n                    result = res[0]\n                else:\n                    result = 0.0\n               ", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   mf, dlnmdlnm = halo_mass_function(marr, zarr, cosmo)\n    #Mass function and its derivative\n    #The following lines are used only for ST MF and ST bias\n    mf, dlnmdlnm = halo_", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.height = font.getSize() + getSettings().getLineHeight();\n        return d;\n    }\n    @Override\n    public void setText(String text) {\n        super.setText(text);\n        setSize(getBounds().width, getMinimumSize().", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "#self.cal_p2()\n#self.all_in_all()\n#print \"theta angle: \",theta\n#print \"phi angle: \",phi\n#print \"lowest distance: \",self.lowest_dis\n#print \"apex coords: \",self.ap", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void SecuritiesButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "=====================\n\nclass _Hist3D(Graph):\n    def __init__(self, *args, **kwargs):\n        Object.__init__(self, *args, **kwargs)\n        self.SetDirectory(ROOT.gDirectory)\n        self.SetName(self.__class__", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           Roster roster = protocol.getRoster();\n            if (roster != null) {\n                roster.addMessageListener(contact, query.getOnMoreMessagesListener());\n            }\n        }\n    }\n}\n\npublic interface OnMoreMessagesListener {\n   ", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "       im1L = im1.convert(\"L\", rgb2I)\n    else:\n        im1L = im1\n    h1 = im1L.histogram()\nelse:\n    h1 = im1.histogram()\n\n#compute transform\nif im0", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (tag.canSelectFileByName(\"LOG\")) {\n\t\t\t\tfinal IsoFile file = tag.selectFileByName(\"LOG\");\n\t\t\t\tif (file != null) {\n\t\t\t\t\tfinal IsoFileEntry[] entries = file.get", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "=====================\n\n# Create the parser\nparser = Parser()\nparser.register(\"ACE\", 0x43414D45, self.parseACE)\nparser.register(\"ACE*\", 0x43414D45, self.parseACE)", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter.removeCommListener(this);\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n        path = environ['PATH_INFO']\n        for prefix, app in self.apps:\n            if path.startswith(prefix):\n                return app(environ, start_response)\n        raise NotFoundError(path)\n\n# vim: set et sw=4", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.train()\n\t\tmodel.savemodel( sys.argv[ 3 ] )\n\telse : print \"Usage : python %s <datafile> <outputmodel", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.RandomDouble() < (double)chance / 100.0)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n\nI'd like to", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n        entries[entry_name] = rdl.UserDefinedEnum(entry_name, displayname, desc, entry_value)\n\n        return typing.UnionType(\n            [rdl.Integer(), rdl.String()],\n            name=type_name,\n           ", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Unable to locate any modules to install.\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to locate the FOG installation directory.\");\n                this.Close();\n            }\n       ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               object obj = this.ViewState[\"SubmitText\"] ?? true;\n                return (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.triangles != null)\n                {\n                    for(int tri = 0; tri < this.triangles.length; tri++)\n                    {\n                        if(this.triangles[tri].textureHash == textureHash)\n                        {\n", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "@login_required\n@add_csrf_protection\n@handle_exception\n@add_header('Access-Control-Allow-Origin', '*')\n@add_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')\n@add_header", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver driver = idlePool.Dequeue();\n                    if (driver.Connection.IsExpired(now))\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n                    {\n                        idlePool.Enqueue", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   return [var] if name in ('resolution', 'radius') else var\n\ndef _verify_list(var, name):\n    \"\"\"Ensure that list-like parameter is a list of two elements.\"\"\"\n    if not isinstance(var, (list, tuple)):\n        raise ValueError('", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the quest\n# This line is needed to register the quest with the system.\n# It will be read by the GM when the server is started.\n# The line below is needed to register the quest with the system.\n# It will be read by the GM when the server is started.\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60) % 60);\n\t\t\t\t\tempty = string.Format(\"{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           // Initialize the shader program\n            Program = GL.CreateProgram();\n            GL.DetachShader(Program, GL.CreateShader(ShaderType.VertexShader,\n                System.IO.File.ReadAllText(\"VertexShader.glsl\")));\n            GL.DetachShader(", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def add_metabolite(self, metabolite):\n        \"\"\"Add a metabolite to the model\"\"\"\n        if metabolite in self.metabolites:\n            warn(\"Metabolite already in the model\")\n            return\n        self.metabolites.append", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(ims.clinical.admin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(TumourGroupListVo.buildFromBean(bean));\n\t\t}\n\t\treturn coll;\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent = lines[selectedLine];\n\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=0; i<lines.length; i++){\n\t\t\t\t\t\tif(lines[", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       new LayoutAnimationController(set, 0.2f);\n        mListView.setLayoutAnimation(controller);\n    }\n\t\n\t/**\n\t * Fill the list with data.\n\t */\n\tprivate void fillData() {\n\t\tListAdapter adapter = new Weave", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.SetFieldKey(HighestNumber + 1);\n        }\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tInstance instance = this.dataset.instance(i);\n\t\t\t\n\t\t\tif (instance == null)\n\t\t\t{\n\t\t\t\tErrorHandler.error", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
