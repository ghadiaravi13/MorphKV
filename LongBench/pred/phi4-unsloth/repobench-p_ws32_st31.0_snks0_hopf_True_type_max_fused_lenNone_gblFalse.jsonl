{"pred": "    private final transient KademliaRoutingTable routingTable;\n    private final transient MessageFactory messageFactory;\n    private final transient KadConfiguration config;\n\n    /* Operations */\n    private final transient Timer timer;\n\n    /* Statistics */\n    private int numNodesFound = 0;\n    private int numNodesNotFound = 0;\n", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        // mParameterListAdapter = new EffectParameterListAdapter(activity, mEffects);\n        mParameterListAdapter = new EffectParameterListAdapter(activity, mEffects);\n        mParameterListAdapter.setListener(this);\n        mParameterListView.setAdapter(mParameterListAdapter);\n\n        mParameterToggleMenuItem = mActivity.getMenuInflater().inflate(R.menu.parameter_toggle, null", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8]\n    rounds = 1\n\n    @classmethod\n    def eval(cls, pt, rk0, rk1):\n        return tuple([pt + rk0 +", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "    private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private boolean mImmersiveNavigationEnabled;\n\n    public EffectManager(Activity activity, ViewGroup parameterListView, SpectaculumView spectaculumView) {\n        mActivity = activity;\n        mParameterListView = parameterListView;\n        mSpectaculumView", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event, Consumer<Boolean> callback) {\n        event.save();\n        eventQueue.add(event);\n        callback.accept(true);\n    }\n\n    private void processEvent(Event event", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务监听器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务配置信息\n     */\n    private TaskConfigManager taskConfigManager;\n\n    /**\n     * 任务配置信息\n     */\n    private", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.path(), passphrase, args.checkFileIntegrity());\n\t\t\tif (problems.isEmpty()) {\n\t\t\t\tprint(\"No problems found\");\n\t\t\t} else {\n\t\t\t\tprint(\"Problems found:\");\n\t\t\t\tproblems.stream().sorted().forEach(problem -> print(formatProblem(problem)));\n\t\t\t", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "            //save the deviceId to shared preferences\n            DatabaseManager.getInstance().getSharedPreferences().edit().putLong(\"deviceId\", deviceId).commit();\n            //save the regId to shared preferences\n            DatabaseManager.getInstance().getSharedPreferences().edit().putString(\"regId\", regId).commit();\n            //save the reg", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    when(mockDataStore.getSecurityKeyData(ACCOUNT_NAME, eq(APP_ID_ENROLL))).thenReturn(\n        new SecurityKeyData(ACCOUNT_NAME, APP_ID_ENROLL, USER_PUBLIC_KEY, COUNTER_VALUE, COUNTER_VALUE));\n    U2fSignRequest u2fSignRequest = u2fServer.get", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            self.acctA = self.global_config['_acct_class'](self.global_config, self.remote_ip, self.remote_port, self.uaA)\n        self.username = results[0].username\n        self.password = results[0].password\n        self.realm = results[0].realm\n        self.challenge =", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "    __typeid__ = 0x13\n    __header__ = EmbeddedSignatureHeader\n\n    def __init__(self, uri):\n        super(URI, self).__init__()\n        self.uri = uri\n\n    def __bytearray__(self):\n        return bytearray([len(self.uri)]) + bytearray(self.uri,", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "def convert_ast_constraint(ast_node):\n  if ast_node.terminal:\n    if isinstance(ast_node, Const):\n      return ast_node\n    elif isinstance(ast_node, Ref):\n      return ast_node\n    elif isinstance(ast_node, Operator):\n      return ast_node\n    elif isinstance(ast_node, Comparator):\n      return ast", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_TYPE);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    public static void playVideo(TDBase activity, TwitchVideo video) {\n        if (activity != null) {\n            Log.d(TAG, \"Playing '\" + video.getTitle() + \"'", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        Log.d(\"SettingActivity\", \"postLocationInformation(): latitude: \" + latitude + \", longitude: \" + longitude);\n        // Post location information.\n        Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(BaseUrl.forkMeBackend)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build();\n        Fork", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "        self._make_ilp('net1')\n\n    def test_invalid_args(self):\n        ''' Invalid arguments. '''\nNext line of code:\n        self.assertRaises(TypeError, InterLayerPipeline, 'net1', 1)\n        self.assertRaises(TypeError, InterLayerPipeline, self.net1, '1')\n        self.assertRaises(TypeError", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "    def __init__(self, *args, **kwargs):\n        global init_called\n        init_called = True\n        super().__init__(*args, **kwargs)\n\n    class User(BaseModel):\n        id = Column(String, hash_key=True)\n        name = Column(String)\n\n    engine.bind()\n    User(id=\"", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "    for context.item in context.inner_focus_select(self[0]):\n        for result in self[1].select(copy(context)):\n            if not isinstance(result, (tuple, XPathNode)) and not hasattr(result, 'tag'):\n                yield result\nfrom typing import Any, Dict, List, Optional, Tuple, Union,", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new HSBAdjustTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation(),\n                    new QuantizeTransformation(),\n                    new RescaleTransformation(),\n                    new RGBAdjustTransformation(),\n                    new SolarizeTransformation(),\n                    new ThresholdTransformation(),\n                    new TritoneTransformation()\n           ", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "    private static final String ARGUMENT_SHARED_ELEMENT_NAME = \"ARGUMENT_SHARED_ELEMENT_NAME\";\n    private static final String TAG = MovieInfoFragment.class.getSimpleName();\n    @BindView(R.id.text_movie_title) TextView textMovieTitle;\n    @BindView(R.id.text_movie_description) TextView textMovieDescription;\n    @BindView(R.id", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                writeResponse(CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "wild.set_message(wild_report)\nwild.insert()\nwild.monitor_status()\n        await ctx.message.add_reaction(MyEmojis.CHECK_MARK)\n        await ctx.message.delete(delay=5)\n\n\n    @cmd_wild.error\n    async def cmd_wild_error(self, ctx, error):\n        if isinstance(error, commands.BadArgument", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    data = SNLIData(c['data_path'], vocab=vocab)\n    data.set_retrieval(c['retrieval'])\n    train_stream = data.get_stream('train', batch_size=c['batch_size'])\n    valid_stream = data.get_stream('valid', batch_size=c['batch_size'])\n    test_stream", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec0 == 0.\n  assert doppler.amplitude_m == -C / float(GPS.L1.CENTER_FREQUENCY) * 100.\n  assert doppler.amplitude_m", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "                Intent intent = new Intent(getActivity(), RaffleActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, Constant.REQUEST_CODE_RAFFLE);\n            } else if (raffle.isValidSex() && !isMan) {\n\n                Participant participant = raffle.getFortunateSex();\n", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "                assert self.redlock.locked() >= self.redlock.auto_release_time\n        with self.assertRaises(TooManyExtensions):\n            self.redlock.extend()\n        self.redlock.release()\n\n    def test_extend_with_redis_timeout(self):\n        assert not self.redis.exists(self.redlock.key)\n        assert self.redlock.acquire()\n", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        return ConeSettings(self._ptr, \"Sound\")\n\n    @property\n    def threed_distance_filter(self):\n        \"\"\"The distance filter settings for this sound.\n\n        :type: DistanceFilter\n        \"\"\"\n        return DistanceFilter(self._ptr, \"Sound\")\n\n    @property\n    def threed_doppler", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "    @calg.register(CompressionAlgorithm)\n    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n\n    def __init__(self):\n        super(CompressedData, self).__init__()\n        self.calg = 0\n        self.data = bytearray()\n\n    def __len", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        size = findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n        \n        #intensity of cells\n        intensity = findCellIntensity(img, imgshape, verbose = verbose, out = out, **parameter);\n        \n        #return centers, intensity, img3, img1,", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume);\n        } else if (accuracy == Accuracy.GOOD) {\n            Assets.goodTapSound.play(GlobalConfiguration.feedbackVolume);\n        } else if (", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "            while (transactionIterator.hasNext()) {\r\n                Transaction t = transactionIterator.next();\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private boolean checkDirectoryValid(File f) {\r\n\r\n        if (!f.exists()) {\r\n            System.err.println(\"Directory does", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                if (query.queryType == RequestType.SELECT) {//classifyColumnsToDimAndMetrics\n                    Either<String, Tuple2<List<String>, List<String>>> dataSourceDescRes = coordinator.aboutDataSource(stmnt.dataSource, reqHeaders);\n                    if (dataSourceDescRes.isLeft()) {\n                        throw new Exception(\"Datasource info either", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                    UsageEncryption.OSY,\n                    OperationMode.CBC,\n                    EncryptionAlgorithmCoded.AES128,\n                    algorithm_parameter_value=b'',\n                    algorithm_parameter_name=AlgorithmParameterName.IVC,\n                ),\n                key_name=KeyName(\n                    key_type=KeyType.V,\n                    key_version=1,\n                ),\n                compression", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                            if (env.combExpCheck[i] != 0) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (Config.DEBUG) {\n            Config.DEBUG_PRINT(\"numMem: \" + regex.numMem);\n            Config.DEBUG_PRINT(\"numRepeat: \"", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),\n    url(r'^pipeline-job-template$', get_pipeline_job_template, name=\"ajax-pipeline-job-template\"),\n    url(r'^pipeline-job-params$', get_pipeline_job_params, name=\"ajax-pipeline-job-params\"),\n", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tString noData;\n\t\t\n\t\tResourceData (Resources res)\n\t\t{\n\t\t\tmeter = MeterSpec.get (res, R.string.stats_meter);\n\t\t\t\n\t\t\ttags = new EnumMap<SRSLevel, String> (SRSLevel.class);\n\t\t\ttags.put (SRSLevel.APPRENTICE,", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        if storage_type in STORAGE_TYPES:\n            self._storage_type = storage_type\n        else:\n            raise PyOrientBadMethodCallException(\n                storage_type + ' is not a valid storage type'\n            )\n        return self\n\n\n#\n# DB CREATE\n#\n# Creates a database in the OrientDB Server instance", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public WhenApplyingOneArgument<$SystemUnderTest, $Argument> when(CheckedBiFunction<$SystemUnderTest, $Argument, Void> whenStep) {\n        preparation\n                .getArgumentSuppliers()\n                .add(functions.toSupplier(() -> {\n                    $SystemUnderTest systemUnderTest = preparation\n                            .", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    CommandResult result;\n    try {\n      result = process.execute();\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(this, e);\n    }\n    if (result.getExitCode() != 0) {\n      throw new IosDeviceException(this, \"Command failed with exit", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\t// TODO Auto-generated method stub\n\t\tSharedPreferences prefs = context.getSharedPreferences(\"TinyLauncher\", Context.MODE_PRIVATE);\n\t\tint color = prefs.getInt(\"fontColor\", Color.BLACK);\n\t\ttextColor = color;\n\t}\n}\napp/src/main/java/ru/andreyvlasov/tinylauncher/DatabaseHelper.java", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = XmlUtil.fromXml(Message.class, xml);\n\t\tAbstractMessage msg = message.asMessage();\n\t\tif (msg instanceof AbstractEvent) {\n\t\t\tAbstractEvent event = (AbstractEvent) msg;\n\t\t\tif (event instanceof SubscribeEvent) {\n\t\t\t\treturn new RepliedTextMessage(\"欢�", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "    # 生成该 apk 文件的唯一标识符\n    file_md5 = genMD5(file_path)\n    # 该 apk 文件的解压目录\n    app_dir = os.path.join(UPLOAD_DIR, file_md5)\n    # 该 apk 文件的解�", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "        city = await ctx.city()\n        if city is None:\n            raise ValueError(\"City not set for this server.\")\n\n        raid_party = RaidParty.by_city(self.bot, city)\n        if raid_party is None:\n            raise ValueError(\"No raid party found for this city.\")\n\n        raid_party_message = await raid_party", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\").day, 25)\n        self.assertEqual(date_string_to_date(\"11/12/2012\").month, 12)\n        self.assertEqual(date_string_to_date(\"09/02/2001\").year, 2001)\n\n    def test", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor(config_file, os.path.dirname(config_file))\n        config_actor.start()\n\n        # startup session database\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.start()\n\n        # wait for actors to start\n        gevent.sleep(1)\n\n        # send hone", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                            ShareUtil.shareText(mActivity, picture.getText_content());\n                            break;\n                        case 1:\n                            ShareUtil.shareImage(mActivity, picture.getPictures()[0]);\n                            break;\n                        case 2:\n                            ShareUtil.shareWeb(mActivity, picture.getText_content(), picture.getPictures()[0]);\n                            break;\n                   ", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\tsave_mgh = savemgh_v2\n\t\t\t\t\telif opts.outtype[i] == 'nii':\n\t\t\t\t\t\tsave_mgh = savenifti_v2\n\t\t\t\t\telse:\n\t\t\t\t\t\tprint(\"Error: %s is not a valid output type\" % opts.outtype[i])\n\t\t\t\t\t\tquit()\n\t\t\t\t\tfor", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                ResponseFragment.class,\n                ResponseFragment.ResponseAdapter.class,\n                ResponseFragment.ResponseAdapter.ResponseViewHolder.class,\n                ResponseFragment.ResponseAdapter.ResponseViewHolder.ResponseItem.class,\n                ResponseFragment.ResponseAdapter.ResponseViewHolder.ResponseItem.ResponseItemViewHolder.class,\n                ResponseFragment.ResponseAdapter.ResponseViewHolder.ResponseItem.ResponseItemViewHolder.ResponseItemView.class,\n               ", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDH: ECDSASignature,\n                PubKeyAlgorithm.ECDAA: ECDSASignature,\n                PubKeyAlgorithm.SRP: ECDSASignature,\n                PubKeyAlgorithm.ElGamalEncrypt:", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "    elif is_element_path_context(context):\n        yield context.item\nelementpath/xpath/1.0/xpath1.py\n@method(nullary('()'))\ndef select_empty_sequence(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    elif isinstance(context, XPathSchemaContext):\n", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "      'no_members': Counter\n    }\n\n  class HeapNode(object):\n    \"\"\"Represents a node in the heap.\"\"\"\n    def __init__(self, sink, load=0):\n      self.sink = sink\n      self.load = load\n      self.index = 0\n\n    def __lt__(self", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "        nc._send_message_with_protocol(OK(**{'recipient': 'foo',\n                                             'sender': 'bar',\n                                             'uuid': 'baz'}), protocol)\n        protocol.send_string.assert_called_once_with(json.dumps({\n            'recipient': 'foo',\n            'sender': 'bar',\n            'uuid': 'baz", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);Next line of code:\n        assertTrue(\"is prepared\", qe instanceof PreparedExecution);Next line of code:\n        assertTrue(\"is batch prepared\", qe instanceof PreparedBatchExecution);Next line of code:\n        assertTrue(\"is callable\", qe instanceof", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionSuccessAndFail() {\n        StatementExecution se1 = new StatementExecution();\n        se1.setSuccess(true);\n\n        StatementExecution se2 = new", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "                continue\n            \n            # Send the ADR request\n            log.info(\"Sending ADR MAC Command\")\n            yield self._sendMACCommand(device, command)\n            \n        self.adrprocessing = False\n        \n    def _createLinkADRRequest(self, device):\n        \"\"\"Creates a LinkADRReq MAC Command for the given", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        done, errors = return_queue.get(timeout=1)\n                        sum_errors +=", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#Addr_dict = {0:'Not present', 1:'Reserved', 2:'16-bit address', 3:'64-bit address'}\n#is not working with Python 2.6.6\n#it is working with Python 2.7.2\n#it is working with Python 3.", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "        ObservableRegistry.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getInstance().unregister(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        chatInfo = inflater.inflate(R.layout.fragment", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\nfints/segments/tan.py\nfrom fints.fields import DataElementField\nfrom fints.segments.base import FinTS3Segment, ParameterSegment\nfrom fints.segments.formal import (\n    ParameterChallengeClass, ParameterPinTan", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "            time = self.img_handle.time\n\n        else:\n\n            # Get time from config\n            time = self.config.time\n\n        # Convert time to Julian date\n        jd = datetime2jd(time)\n\n        # Add reference time to JSON file\n        json_dict = {'year': time.year, 'month': time", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "        refreshPublicRoomsList(null);\n    }\n\n    private void refreshPublicRoomsList(final Runnable endRunnable) {\n        refreshPublicRoomsList(null, endRunnable);\n    }\n\n    private void refreshPublicRoomsList(final String searchPattern, final Runnable endRunnable) {\n        refreshPublicRoomsList(searchPattern, false, endRunnable", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "        self.bingo_card_manager = BingoCardManager(self.dbi)\n        self.bingo_card_writer = BingoCardWriter(self.dbi)\n        self.bingo_card_generator = BingoCardGenerator(self.dbi)\n        self.bingo_card_manager = BingoCardManager(self.dbi)\n        self.bingo_card_writer = Bingo", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages,\n                                      target_sequences)\n\n    #main loop\n    bp_graphs = {}\n    for stage in run_stages:\n        logger.info(\"Running stage: {0}\".format(stage.name))\n        if stage.rearrange:\n            bp_graphs", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);\n        plugins.registerEvents(new BlockRedstoneListener(this), this);\n    }\n\n    @", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);\n                }\n                stopGcmPush();\n                stopHwPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HwPush\":\n                if(shouldInit()) {\n                    HMSAgent", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(\n                SET_OBJECT_NAME));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectInstance>>(\n                SET_OBJECT_INSTANCE));\n        registry.put((byte) (REMOVE", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "    private DefaultListModel<String> recent_files = new DefaultListModel<String>();\n    private DefaultListModel<String> recent_files2 = new DefaultListModel<String>();\n    private DefaultListModel<String> recent_files3 = new DefaultListModel<String>();\n    private DefaultListModel<String> recent_files4 = new DefaultListModel<String>();\n    private DefaultListModel<String", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "    private void createMetricChartPanel(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, false);\n        GCStatsChartPanel panel =\n                new MetricChartPanel(\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "        if (packet.getSubType() == PacketType.ACK) {\n            onAck(packet, client);\n            return;\n        }\n\n        if (packet.getSubType() == PacketType.ERROR) {\n            onPacketError(packet, client);\n            return;\n        }\n\n        if (packet.getSubType() == Packet", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "        videoSource = factory.createVideoSource(\n            appRtcClient.videoConstraints());\n      } else {\n        videoSource = factory.createVideoSource(\n            new MediaConstraints());\n      }\n      videoTrack = factory.createVideoTrack(\"ARDAMSv0\", videoSource);\n      videoTrack.addSink(vsv);\n      l", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "            contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, -1L);\nlibrary/src/test/java/com/evernote/android/job/JobStorageTest.java\nimport android.content.ContentValues;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.test.ext.junit.runners", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "    private CheckBoxPreferenceHideTime preferenceHideTime;\n    private CheckBoxPreferenceHideScore preferenceHideScore;\n\n    private PreferenceCategory preferenceCategoryGame;\n    private PreferenceCategory preferenceCategoryAppearance;\n    private PreferenceCategory preferenceCategorySound;\n    private PreferenceCategory preferenceCategoryExpert;\n\n    private PreferenceCategory preferenceCategoryGameIndividual;\n    private Preference", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "    # inject journal on system object\n    inject_journal(obj, basedir)\n\n    # inject publisher on system object\n    inject_publisher(obj)\n\n    # inject network on system object\n    inject_network(obj, basedir)\n\n    # inject snapshot timer on system object\n    inject_snapshot_timer(obj, basedir)\n\n   ", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "docker_config.render_command()\nclickable/commands/base.py\nclass Command:\n    def __init__(self, config):\n        self.config = config\n        self.device = Device(config)\n        self.command = None\n        self.command_args = None\n        self.command_args_str = None\n        self.command_args_str_no", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "    List<BoardSection> sections = new ArrayList<>();\n    for (int i = 0; i < SectionNames.length; i++) {\n      BoardSection section = new BoardSection();\n      section.name = SectionNames[i];\n      section.url = SectionURLs[i];\n      sections.add(section);\n    }\n\n    List", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "        ObservableRegistry.getObservable(this.getClass()).register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getObservable(this.getClass()).unregister(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t\tannoGenerated = GeneratorUtils.createAnnoGenerated();\r\n\t\t// create test-class\r\n\t\tICompilationUnit cu = createTestClass(model, testDataFactories, monitor);\r\n\r\n\t\t// create test-methods\r\n\t\tcreateTestMethods(model, cu, testDataFactories, monitor);\r\n\r\n\t\t// create test-base-method", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "        self.simulator_data_client.add_simulator_data_listener(self.mock_simulator_data_listener)\n        self.simulator_data_client.simulator_data_received(mock_simulator_data_datagram)\n        self.mock_simulator_data_listener.simulator_data_received.assert_called_once_with(mock_simulator_data_datagram)\n        self.mock_simulator_data_listener", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "            showResponse();\n        } else {\n            showRequest();\n        }\n        showMessage();\n    }\n\n    private void showRequest() {\n        textareaResponse.setVisible(false);\n        textareaRequest.setVisible(true);\n        textareaRequest.setText(httpMessage.getReq().extract());\n        textareaRequest.setCaretPosition(0);\n        textareaRequest.requestFocus();\n", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "    assert simple_table_status(description) == expected_status\n\n\ndef test_simple_status_with_lsi():\n    \"\"\"Status is busy because table isn't ACTIVE, no GSIs\"\"\"\n    description = {\"TableStatus\": \"ACTIVE\"}\n    description[\"LocalSecondaryIndexes\"] = [{\"IndexStatus\": \"ACTIVE\"}]\n    assert simple_table", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "        self._load_file(filething)\nmutagen/_util.py\ndef _load_file(filething):\n    \"\"\"Load a file into memory.\n\n    Args:\n        filething: A file-like object or a filename.\n\n    Returns:\n        A file-like object.\n    \"\"\"\n\n    if hasattr(filething, \"read\"):\n", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "      visitBooleanOp(new VisitBooleanOp(n, opToOccur.get(op)));\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitProxOp(n), query);\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * f0 -> BasicSearch() f1 -> ( ( <OR> BasicSearch()", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                    new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new QuantizeTransformation()\n                    )),\n    FILTERS(\"Filters\",\n            Arrays.asList(\n                    new ThresholdTransformation()\n                    ));\n\n    private final String title;\n    private final List<Transformation> transformations;\n\n    TransformationCategory(String title, List<Transformation> transformations) {\n", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "            exception_class = self._decode_field( FIELD_STRING )\n            exception_message = self._decode_field( FIELD_STRING )\n\n            # Raise the exception\n            raise PyOrientCommandException(\n                exception_message.decode('utf-8'),\n                exception_class.decode('utf-8')\n            )\n\n        # decode message type\n", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "    api = BalancingData(args.apikey)\n    if not api.get_data(**{'FromSettlementDate': args.fromdate,\n                           'ToSettlementDate': args.todate}):\n        print(\"No data returned.\")\n        return None\n\n    fmt = StdoutFormatter()\n    fmt.add_column('Date',", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if\n\t\t\titems.add( item );\n\t\t} // for\n\n\t\treturn items;\n\t} // convertToGalleryItems\n\n\t// ================================================\n\n\t/**\n\t * Returns a", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "        new TaskName()), StaticString.CONDITIONAL_WHITESPACE,\n        new Colourizer(Colourizer.Color.YELLOW.getCode(), new Spinner(Spinner.SPINNER_SLASHES)),\n        StaticString.WHITESPACE,\n        new Colourizer(Colourizer.Color.RED.getCode(), new Percentage()), StaticString.W", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static A a(Url href, Attribute... attributes) {\n\t\treturn new A(href, attributes);\n\t}\n\t/*\n\t * Shortcuts methods\n\t */\n\tpublic static A a(Url href) {\n\t\treturn a(href, new Attribute[0]);\n\t}\n\n\tpublic static A a(Url href, Attribute attribute", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "        events.append(Event(e))\n        return events\npacket.py\nfrom .base import PacketBase\nfrom .base import PacketException\nfrom .base import PacketError\nfrom .base import PacketNotFound\nfrom .base import PacketUnprocessableEntity\nfrom .base import PacketUnauthorized\nfrom .base import PacketServerError\n", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "            Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:\n     * <pre> assertThat(ds.getBatchStatements(), batch(", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "            if (mHandler != null) mHandler.removeCallbacks(mHandlerRunnable);\r\n            if (mExitTransition != null) {\r\n                mExitTransition.exit(this);\r\n                return;\r\n            }\r\n\r\n            if (mWallpaperManager == null) {\r\n                mWallpaperManager = WallpaperManager.getInstance(this);\r\n            }\r\n\r\n            WallpaperManager", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "  private static final Map<Operator, Occur> opToOccur = new HashMap<Operator, Occur>();\r\n\r\n  static {\r\n    opToOccur.put(Operator.AND, Occur.MUST);\r\n    opToOccur.put(Operator.OR, Occur.SHOULD);\r\n    opToOccur", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.genotype=='PLINK':\n\t\t\t#TODO (low) add check for PLINK files\n\t\t\t#TODO (low) add check for PLINK files\n\t\t\t#TODO (low) add check for PLINK files\n\t\t\t#TODO (low) add check for PLINK files", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "        self.beginning_datetime = filenameToDatetime(self.vid_file.name)\n\n        # If the name does not contain the time, try reading the time from the first frame\n        if self.beginning_datetime is None:\n            self.beginning_datetime = filenameToDatetime(self.vid_file.name)\n\n            # If the name", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "    p.set_params(cheb_coeffs=ILMVALS)\n    p.set_params(support=0.5)\n    p.set_params(support=0.5)\n    p.set_params(support=0.5)\n    p.set_params(support=0.5)\n    p.set_params(support", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);\n\t}\n}\njava/squeek/spiceoflife/compat/PacketDispatcherNetty.java\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "        comments = Comment.objects.filter(post=post, deleted=False).order_by('-net_votes')\n        comment_form = self.form_class()\n        return render(request, self.template_name, {'post' : post, 'comments' : comments, 'comment_form' : comment_form})\n\nclass EditPost(LoginRequiredMixin, View):\n   ", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tISelection selection = new SingleCellSelection(selectedCells.iterator().next());\n\t\t\t\t\t\tsetSelection(selection);\n\t\t\t\t\t}\n\t\t\t\t\telse if (selectedCells.size() > 1) {\n\t\t\t\t\t\tISelection selection = new MultiCellSelection(selectedCells);\n\t\t\t\t\t\tsetSelection(selection);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsetSelection(new Empty", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "    @keyclass.register(RevocationKeyClass)\n    def keyclass_int(self, val):\n        self._keyclass = [val]\n\n    @keyclass.register(RevocationKeyClass)\n    def keyclass_revocationkeyclass(self, val):\n        self._keyclass = [val]\n\n    @sd", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "        if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            if self[1] is None:\n                yield item\n            elif self[1].evaluate_as_string(context) == item.target:\n                yield item\n\n\n@method(function('comment', nargs=0, bp=79", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "def getAS3PuffleString(client, puffles):\r\n    puffles_as3_str = list()\r\n    for puffle in puffles:\r\n        p_id, p_type, p_sub_type, p_name, p_adopt, p_food, \\\r\n        p_play, p_rest, p_clean, p_hat,", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "    S = exactpsf.ExactLineScanConfocalPSF()\n    state = states.ImageState([P, H, I, S], im)\n    state.initialize()\n    state.step()\n    return state\n\ndef make_image_1():\n    P = objs.PlatonicSpheresCollection(pos, rad)\n", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "            compile_info = run_mp(\n                compile_information_func,\n                jobs,\n                self.log_directory,\n                self.num_jobs,\n                self.num_threads,\n                self.use_mp,\n                self.keep_logfiles,\n            )\n        else:\n            compile_info = run_non_mp(\n                compile_information_func,\n                jobs,\n                self", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "    platepar.rotation_from_horiz = RMS.Astrometry.rotationWrtHorizon(platepar)\nRMS.Astrometry.rotationWrtHorizon(platepar)\nRMS.Astrometry.rotationWrtHorizon(platepar)\nRMS.Astrometry.rotationWrtHorizon(platepar)\nR", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "        contentValues.put(JobStorage.COLUMN_END_MS, 70_000L);\n        contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, 50_000L);\n        contentValues.put(JobStorage.COLUMN_LAST_RUN, 40_000L);\n        contentValues.put(JobStorage.COLUMN_NUM_FAILURES, 3);\n        contentValues.put(JobStorage", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "        Toaster.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        Toaster.getInstance().unregister(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        chatRem = inflater.inflate(R.layout.fragment", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "        model = Progress\n        fields = ['component', 'year', 'value', 'remarks']\ngoals/templatetags/goals_tags.py\nfrom django import template\nfrom django.utils.safestring import mark_safe\nfrom django.utils.html import escape\nfrom django.utils.translation import ugettext as _\nfrom django", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "            fab.setVisibility(View.VISIBLE);\n            fab.setOnClickListener(new OnClickListener() {\n                @Override\n                public void onClick(View v) {\n                    fab.setVisibility(View.GONE);\n                    fab.startAnimation(AnimationUtils.loadAnimation(getContext(), R.anim.rotate));\n                    fab.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "        }).then(new Accept<Channel>() {\n            @Override\n            protected void doAccept(final Channel value) throws Exception {\n                LOGGER.debug(\"Reconnected transport\");\n\n                context.tryChangeConnectionState(reconnecting, new ConnectedConnectionState(value, true));\n            }\n        }).then(deferred);\n\n        return deferred;\n   ", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "                new RegisterFragment.RegistrationParam(success, email, password, message));\n    }\n}\nyasme/src/main/java/de/uni_hamburg/informatik/ias/yasme/ui/fragments/ChatFragment.java\npackage de.uni_hamburg.informatik.ias.yasme.ui.fragments;\n\nimport android.app", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "    private final SpatialOperator spatial;\n    private final int k;\n    private final long t;\n    private final double sigma;\n    private final double lambda;\n    private final double delta;\n    private final double epsilon;\n    private final double alpha;\n    private final double beta;\n    private final double gamma;\n    private final", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "    private List<FilterType> filterTypes;\n    private HashMap<String, List<FilterType>> filterTypeMap;\n    private List<FilterType> filterTypeList;\n    private List<FilterType> filterTypeList2;\n    private List<FilterType> filterTypeList3;\n    private List<Filter", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CA().getMessage(), ConstMessage)\n  assert args.gps_sv[0].getL1CA().getMessage().getData() == 0\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgs", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "        graphics.draw_colored_triangles(tris, fills)\n        g.unapply_shader(self)\n\n    def _render_solid_fill(self):\n        fill = self.style.fill\n        tris = self.triangles\n        self.svg.n_tris += len(tris) / 3\n        fills = [fill", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(\"A\")) {\n\t\t\t\t\ta = new AppData();\n\t\t\t\t} else {\n\t\t\t\t\ta = new ShortcutData();\n\t\t\t\t}\n\t\t\t\ta.read(reader, data);\n\t\t\t\tapps.add(a);\n\t\t\t}\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow && ClipBoardAction.isShowInStatusBar) {\n                    isClipBoard", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "        self.beg_alt, self.end_alt = self.cartesian_points[0, 2], self.cartesian_points[-1, 2]\n\n        # Compute the normal of the great circle\n        self.normal = np.cross(self.beg_vect, self.end_vect)\n\n        # Compute the great circle phases of the", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.add(m);\n\t}\n\n\t@Override\n\tpublic void exitFunction(@NotNull FunctionContext ctx) {\n\t\tsuper.exitFunction(ctx);\n\t\tCollection<ParseTree> f", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "    /**\n     * Called when the visitor first reaches a node with children.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean enter(ArgumentsNode node);\n\n    /**\n     * Called when the visitor first reaches a node with children.\n     * @return Determines whether the node's children", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "    private CodeGeneratorFactory codeGeneratorFactory;\n\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n        typeUtils = processingEnv.getTypeUtils();\n        typeUtils = processingEnv.getTypeUtils();\n        typeUtils = processingEnv.getTypeUtils();\n        typeUtils = processing", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "        bind(GerritHttpAuthDataProvider.class);\n        bind(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class);\n        bind(GerritHttpAuthDataProvider.class);\n        bind(GerritHttpAuthDataProvider.class);\n        bind(GerritHttpAuthDataProvider.class);\n        bind(Gerrit", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                    if (getZxidFromName(snapshots.get(i).getName()) <= zxidLong) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n\r\n                if (snapFile == null) {\r\n                    System.out.println(\"No snapshot file found\");\r\n                    exit(1", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "        if query_string:\n            query = self.parse_search_query(query_string)\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.is_unassigned()]\n        elif filter_type is FilterType.Income:\n            entries = [e for e in entries if e.is_income()]\n", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "        Str('Marker', Pt=0xFFD8, Len=2, Repr='0x%04X'),\n        Int('Length', Pt=2, Len=2, Repr='0x%04X'),\n        Str('Type', Pt=4, Len=2, Repr='%s", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.just(new ArrayList<>());\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn DbHelper.get(this).getHistoricSearches(query)\n\t\t\t\t\t\t\t\t.flatMap(historicSearches -> {\n\t\t\t\t\t\t\t\t\tList<SearchSuggestion> suggestions = new ArrayList<>();\n\t\t\t\t\t\t\t\t\tfor (HistoricSearch historicSearch : historicSearches) {\n\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "    sph = objs.PlatonicSpheres(POS, rad, shape=(128,128,128), method='gauss')\n    sph.add_coverslip(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, ", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)\n\n\ndef apply_or(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                    Request request = CandyBarApplication.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r\n                    if (request == null) continue;\r\n\r\n                    stringBuilder.append(\"\\n\\n\")\r\n                            .append(request.getName())\r\n                            .append(\" (\")\r\n                            .append(request.getPackageName())\r\n                            .append(\")\");\r\n\r\n                    if (", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "            instance, (int, float, Decimal, datetime.datetime, datetime.date,\n                       datetime.time, Duration)\n        ) and not isinstance(instance, bool)\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return issubclass(sub", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "            return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'RubricsPage':\n            return RubricsPage()\n        if pageletId == 'RubricPage':\n            return RubricPage()\n       ", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "                if not checkFileExistence(pattern.get(\"datafile\")):\n                    errmsg += \"Data file %s does not exist!\\n\" % pattern.get(\"datafile\")\n                    rvalue = False\n\n            # 2.2 data file format\n            if mode == \"Refine\":\n                if pattern.get(\"", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\n    filter_class = ThemeFilter\n    ordering_fields = ('id', 'code',", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\nNext line of code:\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\nNext line of code:\n    private CommitItem", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\tgenerationService.setParameters(null);\n\t\tgenerationService.setMetadata(null);\n\t\tgenerationService.setSpecificTreatment(null);\n\t\tgenerationService.setMapping(null);\n\t\tgenerationService.setCleaning(false);\n\t\tg", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                        new ChangeMailTask(user).execute();\n                    }\n                });\n\n        // \"Cancel\" button to cancel the dialog\n        alert.setNegativeButton(R.string.cancel,\n                new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                        dialog.cancel();\n                    }\n                });\n\n        alert.show();\n    }\n\n", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()),\n        name=\"package-new\"),\n    url(r'^view/(?P<slug>[\\w-]+)$', TranStatusPackageView.as_view(), name=\"package-view\"),\n", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "peregrine/iqgen/encoder.py\nclass Encoder(object):\n  '''\n  Base class for IQ data encoder.\n  '''\n  def __init__(self, output_file):\n    '''\n    Constructs encoder object.\n\n    Parameters\n    ----------\n    output_file : str\n      Output file name\n    '''\n    self", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "    return tgAsDict[constants.INTERVAL_TIER][0]\n    return tgAsDict[constants.INTERVAL_TIER][0]\n    return tgAsDict[constants.INTERVAL_TIER][0]\n    return tgAsDict[constants.INTERVAL_TIER][0]\n    return tgAsDict[constants.INTER", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        num_utterances = return_queue.get(timeout=1)\n                    except Empty:\n                        if all([p.finished.is_set() for p", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "        dataset = UAV123(root_dir, version=version)\n        self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NfS')\n        dataset = NfS(root_dir)\n        self._check_dataset(dataset)\n\n    def test_lasot", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "    <T> T get(FixTag tag, Class<T> type);\n    <T> T get(FixTag tag, Class<T> type, T defaultValue);\n    <T> T get(FixTag tag, Class<T> type, Supplier<T> supplier);\n    <T> T get(Fix", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "            yield chunk_idx, bounds\n\n    def iter_chunks_with_overlap(self, n_samples):\n        \"\"\"Iterate over chunks with overlap.\"\"\"\n        rate = self._kwargs['sample_rate']\n        chunk_size = int(self._kwargs['chunk_size_seconds'] * rate)\n        overlap = int(self._kwargs['chunk_overlap_seconds", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIR.AnyQueryNode anyQueryNode, Void param) {\n\t\t\treturn new ExpansionResult(AlvisIR.AnyQueryNode.INSTANCE, Collections.emptyList());\n\t\t}\n\t}\n\t\n\tprivate final class ExpansionResult {\n\t\tprivate final AlvisIR.QueryNode queryNode;\n\t\tprivate final List", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\tprivate Validator validator;\n\t\n\tprivate FolderCleaner folderCleaner;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t\t", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "        registry.put((byte) (ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Attribute>(ATTRIBUTE));\n        registry.put((byte) (ATTRIBUTE_LIST ^ RESPONSE_MASK), new MarshalledResponseHandler<AttributeList>(ATTRIBUTE_LIST));\n        registry.put((byte) (BOOLEAN ^ RESPONSE_MASK), new MarshalledResponseHandler", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                        Result res = lp.detectLanguage(content);\n                        if (res.getLanguage().equals(lang)) {\n                            FileSaver saver = new FileSaver(content, res.getLanguage(), \"twitter\", url, tweet.getId(), tweet.getUser().getScreenName(), tweet.getCreatedAt(), tweet.getUser().getLocation());\n                            saver.save();\n", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n\n        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n\n        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n\n        elif isinstance(descriptor, OperatorDescriptor):\n            lines", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "        help=\"\"\"network delay time [milliseconds].\n        e.g. tcset eth0 --delay 100\n        \"\"\".format(\n            _get_unit_help_msg()\n        ),\n    )\n    group.add_argument(\n        \"--delay-distro\",\n        \"--latency-distro\",\n        dest=\"latency_distro_time\",\n", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "        return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        try:\n            return self.get_contacts().get()\n        except MultipleObjectsReturned:\n            logging.error(\"Multiple contacts returned for phone number: %s\" % self.phone_number)\n            return self.get_contacts().first()\n\n    @property", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "    pipeline.apply(\"Read live projects\", Read.from(LiveProjectSource.of(org)));\n\n    // Convert projects to GCPResourceState objects.\n    PCollectionTuple liveStatesTuple = liveProjects.apply(\n        ParDo.named(\"Convert projects to Java objects\")\n            .of(new ExtractLiveProjectState())\n            .withSide", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "        self.rule = DetectSoft404()\n\n    @async_test()\n    async def test_mark_request_as_soft404_if_response_matches_404_signature(self):\n        entry = self.create_entry(\"http://example.com/test\", 200, \"response\")\n        await self.runner.perform(entry)\n\n        self.assertTrue(entry.result.soft404)\n\n", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ffibuilderRX.compile(tmpdir=cls.tmpdirnameRX.name, verbose=VERBOSE)\n        spec", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "    conditions.append(AndCondition())\n    conditions.append(AndCondition(Condition(), Condition()))\n    conditions.append(AndCondition(Condition(), Condition(), Condition()))\n    conditions.append(AndCondition(Condition(), AndCondition(Condition(), Condition())))\n    conditions.append(AndCondition(Condition(), AndCondition(Condition(), Condition()), Condition", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "        assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 0\n        assert get_square_idx(0, 2) == 0\n        assert get_square_idx(1, 0) == 0\n        assert get_square", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "    private final IJavaProject javaProjectBase;\n    private final IJavaProject javaProjectTest;\n\n    private final GeneratorWizard wizard;\n\n    private final GeneratorWizardPage page;\n\n    private final GeneratorWizardPage pageTest;\n\n    private final GeneratorWizardPage pageBase;\n\n    private final GeneratorWizardPage pageMock;\n\n    private", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "self.next_sink = next_provider.CreateSink(global_properties)\n<|file_sep|>#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: Administrator\n# @Date:   2018-03-22 15:26:17\n# @Last Modified by:   Administrator", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate boolean debugImages = false;\n\t\n\tprivate boolean debugText = false;\n\t\n\tprivate boolean debugText = false;\n\t\n\tprivate boolean debugText = false;\n\t\n\tprivate boolean debugText = false;\n\t\n\tprivate boolean debugText = false;\n\t\n\tprivate boolean debugText = false;\n\t\n\tprivate boolean debugText = false;\n\t\n", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "      () -> Optional.of(Stable line of code:\n        Files.list(input).filter(Files::isRegularFile).collect(toList())));\n    if (files.isEmpty()) {\n      log.debug(input, path -> \"no file found in \" + path);\n      return 0;\n    }\n    log.debug(files,", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "        return RespostaComunicarCertificadoICPBRASIL.analisar(retorno)\nsatcfe/clientelocal.py\nclass ClienteSATLocal(FuncoesSAT):\n    \"\"\"Fornece acesso ao equipamento SAT conectado localmente.\n\n    As respostas às funções SAT serão analis", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOG", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "    if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace2_event_log)\n    else:\n      git_trace2_event_log.Write(git_trace2_event_log._GetEventTargetPath())\n\n    # TODO: Remove this once we have a better way to handle the event log", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "    Prefs providePrefs(SharedPreferences sharedPrefs) {\n        return new Prefs(sharedPrefs);\n    }\n\n    @Provides @Singleton\n    Gson provideGson() { return new Gson(); }\n\n    @Provides @Singleton\n    PersistentData providePersistentData(Application app, SharedPreferences sharedPrefs) {\n        return new PersistentData", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "        assertThat(ds).hasTotalQueryCount(5);\n    }\n\n    @Test\n    public void testTotalCountWithBatch() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution());  // select\n        queryExecutions.add(getMockSelectQuery", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "        return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckOutCommand()\n", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "        verifiers.put(\"Valid CSV\", new ValidCSV());\n        verifiers.put(\"Valid CSV\", new ValidCSV());\n        verifiers.put(\"Valid CSV\", new ValidCSV());\n        verifiers.put(\"Valid CSV\", new ValidCSV());\n        verifiers.put(\"Valid CSV\", new ValidCSV());\n        verifiers.put", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "            showProgress(false);\n            Toaster.toast(activity, R.string.error_login);\n        }\n    }\n\n    private boolean yasmeDeviceCheck() {\n        // check if there is a device registered in the database\n        // if not, register a new one\n        // if yes, check if the device is registered", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (invokes the drupal Service user.login)\n     *\n     * @param username the user's username\n     * @param password the user's plaintext password\n", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "        lexmsg = lexMessage(text, self.parent().testquirks())\n        self.textArea.appendMessage(lexmsg, self.chum)\n        self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.selectAll()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "            (r'/login', LogInHandler),\n            (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem/(\\w+)/(\\w+)', ProblemHandler),\n            (r'/problem/(\\w+)', ProblemHandler),\n            (r'/problem',", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRNear", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "                throw new IllegalArgumentException(\"Unknown criterion\");\n        }\n\n        informationCriterion.compute();\n\n        SelectionChunk selectionChunk = new SelectionChunk(informationCriterion);\n\n        return selectionChunk;\n    }\n\n    /* (non-Javadoc)\n     * @see es.unican.biosoft.prottest.ProtTest#computeInformationCriterion(pal.alignment.Alignment", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "    return Pair(ty1, ty2, e1, e2)\n\n\n@with_info(st_term)\ndef mk_meta(name, type):\n    \"\"\"Create a meta-variable with the given name and type.\n    \n    Arguments:\n    - `name`: the name of the meta-variable\n    - `type`: the", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "    void inject(BatteryStatusIndicator batteryStatusIndicator);Next line of code:\n    void inject(DemoSamplesInstallerService demoSamplesInstallerService);Next line of code:\n    void inject(DemoSamplesInstaller demoSamplesInstaller);Next line of code:\n    void inject(DemoSamplesInstallerService.DemoSamplesInstallerServiceBinder", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "    private List<SliceValue> slices;\n    private List<BigDecimal> sliceValues;\n    private List<BigDecimal> sliceValuesTotal;\n    private List<BigDecimal> sliceValuesPercent;\n    private List<String> sliceLabels;\n    private List<Integer> sliceColors;\n    private List<Integer> sliceColorsSelected;\n   ", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "    response = Response()\n    with pytest.raises(ResponseValidationError):\n        prepare_body(response)\n\n\ndef test_response_content_type_json():\n    response = Response()\n    response.content_type = 'application/json'\n    response.text = '{\"foo\": \"bar\"}'\n    assert prepare_body(response) == {'foo': 'bar'}\n\n\ndef", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t@Override\n\tpublic void enterCommandChain(ConsoleCommandParser.CommandChainContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.enterCommandChain(ctx);\n\t}\nNext line of code:\n\t@Override\n\tpublic void exitCommandChain(ConsoleCommandParser.CommandChainContext ctx) {\n\t\t// TODO Auto-generated method", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "                except TextGridParseError as e:\n                    self.return_dict[\"textgrid_error_files\"].append(e)\n                except Exception as e:\n                    exc_type, exc_value, exc_traceback = sys.exc_info()\n                    lines = traceback.format_exception(exc_type, exc_value, exc_traceback)\n                    self.return_dict[\"", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "        AccelerometerResource,\n        \"/aircraft/sensors/accelerometer\",\n        resource_class_args=(sensors.accelerometer,)\n    )\n\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrue())\nhuginn/simulator.py\nclass Simulator(object):\n    def __init__(self, fdmexec):\n        self.fdmexec = fdmexec\n        self._atmosphere = Atmosphere(fdmexec)\n", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "    CMD_OPTION_SUMMARY_HELP_LINE,\n    CMD_OPTION_HELP_HELP_LINE,\n]\n\nINSTANCE_COUNT_HELP_LINES = [\n    'Usage: pywbemcli instance count [GENERAL-OPTIONS] [NAMESPACE-OPTIONS] '\n    '[COMMAND-OPTIONS]',\n    'Count the number of instances of each class in a", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t/**\n\t * 后台主页\n\t * @return\n\t */\n\t@RequestMapping(value=\"/manage\")\n\tpublic ModelAndView manage(){\n\t\tModelAndView mv = new ModelAndView(\"manage\");\n\t\tSubject currentUser = SecurityUtils.getSubject();\n\t\tUsers userobj = (Users) currentUser", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                            MessageHelper.showError(project, t.getMessage());\n                        }\n                        else if(exceptionClass.equals(InvalidOperationException.class)){\n                            MessageHelper.showError(project, t.getMessage());\n                        }\n                        else if(exceptionClass.equals(SdkClientException.class)){\n                            MessageHelper.showError(project, t.getMessage());\n                        }\n                        else{\n                            MessageHelper.showCriticalError", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                       join_keyword=hindi_remind())\n\n    def test_full_e2e_hindi_preg_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow for sign up + cancel in Hindi...\")\n        self.run_e2e_flow_for_language(language=\"Hindi\",\n                                       person_name=u'\\u090", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "  protected LocationListener locationListener;\n  protected Location lastLocation;\n  protected LocationUpdateTask locationUpdateTask;\n  protected LocationUpdateTask passiveLocationUpdateTask;\n  protected LocationUpdateTask passiveLocationUpdateTaskAlarm;\n  protected LocationUpdateTask passiveLocationUpdateTaskAlarmFired;\n  protected LocationUpdateTask passiveLocationUpdate", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "refresh_avd(adb, os.path.join(DYNAMIC_TOOL_DIR, 'avd'), 'MobSF', 'MobSF', 'emulator')\n    print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android Emulator\"\n    refresh_avd(adb, os.path.join(DYNAMIC_TOOL_DIR, '", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Layer):\n    constructorList = [\n        Bit('message type', 6, Dict(GSM_RR_dict)),\n        Bit('message type extension', 2),\n        Bit('message integrity check', 1),\n        Bit('security header type', 1),\n        Bit('message authentication code", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tadjacency = create_adjac_vertex(v_lh,faces_lh) + create_adjac_vertex(v_rh,faces_rh)\n\t\t\tadjacency = np.array([adjacency, adjacency])\n\t\t\tadjacency = np.array([adjacency, adjacency])\n\t\t\tadjacency = np.array([", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "        throw new QueryGrammarException(\"Cannot apply \" + exp.getOperator()\n            + \" operator without a right hand side value.\");\n    } else {\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "        CacheList list = new CacheList();\n        list.setName(listName);\n        cacheService.storeCacheList(list);\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final List<CacheList> cacheLists = (List<CacheList>) sessionContext.getData(CACHE", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "    Layer('CPCause', Int('CPCause', 1), Trans='CPCause_dict'),\r\n    Layer('TI', Bit('TI'), Trans='TI_dict'),\r\n    Layer('TP_PID', Int('TP_PID', 1)),\r\n    Layer('TP_DCS', Int('TP_DCS',", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                        new TimeEntryOvertimeAggregation()));\n\n        user.setOptions(userDc.getItems());\n        user.setValue(userDc.getItem());\n        user.addValueChangeListener(e -> {\n            if (e.getValue() != null) {\n                userDc.setItem(e.getValue());\n                timeEntriesDl.setParameter(\"user\", e.getValue());\n               ", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "            (True, PubKeyAlgorithm.ElGamal): ElGamalPub,\n            (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ECDAS): ECDSAPub,\n            (", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                            self._expansion_num, ExpansionInfo.BOARDTYPE)\n\n    @property\n    def num_muxed_chans(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                            self._expansion_num, ExpansionInfo.NUMMUXEDCHANS)\n\n    @property\n   ", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "        self.key_size = read_u16le(f)\naaf2/property.py\nclass StrongRefSetProperty(Property):\n    \"\"\"\n    A property that contains a set of objects that are referenced by a unique key.\n    \"\"\"\n    def __init__(self, parent, pid, format, version=PROPERTY_VERSION):\n", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "            user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Invitation to join {}'.format(site.name))\n            template = 'emails/invitation_email.html'\n            url = request.build_absolute_uri(reverse('activate_account',\n                                                     args=[user.activation_key]))\n            comments = form.cleaned", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "await Utilities._send_error_message(ctx, \"Beep Boop! I'm still learning how to do this. Please try again later.\")\n\nNext line of code:\nawait Utilities._send_error_message(ctx, \"Beep Boop! I'm still learning how to do this. Please try again later.\")\n\nNext line of", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "            ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_CEX:\n            ex = Cex('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_BINANCE:\n            ex = Binance('BCCBTC')\n        elif", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "            if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        if context.item is not None:\n            yield context.item\n    else:\n        # XSD typed selection\n        if context.item is not None:\n            context.item = self", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "    helpTestData(0, 10);\n    helpTestData(1, 10);\n    helpTestData(9, 10);\n    helpTestData(10, 10);\n    helpTestData(11, 10);\n    helpTestData(20, 10);\n  }\n  \n ", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tresult.setDefaultField(elt.getAttribute(AlvisIRConstants.XML_SEARCH_DEFAULT_FIELD));\n\t\tresult.setQueryParserFactory(new QueryParserFactory(elt));\n", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                    MiPushClient.registerPush(getApplicationContext(), mi_APP_ID, mi_APP_KEY);\n                    Log.e(MYTAG, \"使用小米推送\");\n                }\n                break;\n            case \"HuaweiPush\":\n                HMSAgent.init(getApplicationContext());\n                HMSAgent.connect(getApplicationContext(), new ConnectHandler() {\n                    @Override\n                   ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "    private final KadConfiguration config;\n    private int connectAttempts = 0;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.bootstrapNode = bootstrapNode;\n", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "                tablefmt = 'simple'\n\n            output.append(tabulate(rows, headers=headers, tablefmt=tablefmt,\n                                   numalign=numalign, stralign=stralign))\n    if status:\n        output.append(status)\n\n    return output\n\n\nclass VCursor(object):\n    def __init__(self, connection):\n        self.connection", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "    return words_api(wordnik_api, token)\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@InjectNext line of code:\n\tprivate ConnectorIssues connectorIssues;\n\t\n\t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tctx = this;\n\t\ttaskListByJQLACtivity = this;\n\t\tsetContentView(R.layout.tasklistbyjqlactivity);\n\t\t", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "        self.assertIsInstance(handle, HANDLE)\n        self.assertNotEqual(handle, HANDLE(0))\n        self.assertNotEqual(handle, HANDLE(-1))\n        self.assertNotEqual(handle, HANDLE(None))\n        self.assertNotEqual(handle, HANDLE(ffi.NULL))\n        self.assertNotEqual(handle, HANDLE(ffi.cast(\"void *\", 0)))\n", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                    return roundEnv.getElementsAnnotatedWith(annotation)\n                            .stream()\n                            .map(element -> {\n                                currentAnnotatedElement.set(element);\n                                return parserHolder.buildParser().parse(element);\n                            });\n                })\n                .flatMap(List::stream)\n                .collect(Collectors.toList());\n        if (!parsedPaths.isEmpty()) {\n           ", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "    protected PageParser pageParser;\n\n    protected ExecutorService executorService;\n\n    protected CountDownLatch latch;\n\n    protected ReentrantLock lock = new ReentrantLock();\n\n    protected Condition condition = lock.newCondition();\n\n    protected AtomicInteger runningThreadCount = new AtomicInteger(0);\n\n    protected AtomicInteger errorThreadCount = new AtomicInteger(0", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "            actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n        }\n\n        PopupHandler.installPopupHandler(editTableView, actionPopupGroup, \"POPUP\", ActionManager.getInstance());\n    }\n\n    private void addKey(String", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "    private GuiButton add;\n    private GuiButton remove;\n    private GuiButton rename;\n    private GuiButton settings;\n    private GuiButton save;\n    private GuiButton close;\n    private GuiText name;\n    private GuiCheckbox hide;\n    private GuiCheckbox pm;\n    private GuiCheckbox ignore;\n    private GuiText", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREENSHOT_CODE:\n                return new BtnScreenShot();\n            case ConstantStr.FUNC_SCREENSHOT_CODE:\n                return new BtnScreenShot();\n            case ConstantStr.FUNC_SCREENSHOT_CODE:\n                return new BtnScreenShot();\n            case ConstantStr.FUNC", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "        form.setText(Messages.configurationEditorTitle);\r\n        form.getBody().setLayout(new GridLayout(1, false));\r\n\r\n        Section section = toolkit.createSection(form.getBody(), ExpandableComposite.TITLE_BAR);\r\n        section.setText(Messages.configurationEditorTitle);\r\n        section.setDescription(Messages.configurationEditorDescription);\r\n        section.setLayoutData(new GridData(GridData.FILL_BOTH", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "        type = Type()\n        type.name = \"foo\"\n        type.item = Object.factory(\"object\", None)\n        type.item.name = \"bar\"\n\n        self.assertEqual(\"bar\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\n        type = Type()\n        type.name = \"foo", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusCommand.class", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "        if _cluster_type not in CLUSTER_TYPES:\n            raise ValueError( _cluster_type + ' is not a valid cluster type' )\n        self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n       ", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "    query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'frob': frob,\n        'format': 'json',\n        'nojsoncallback': 1,\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('http', 'flickr.com", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t}\n\n\t\t\t\tif(fcpMessage == null) {\n\t\t\t\t\tLogger.debug(this, \"Message inserted\");\n\t\t\t\t\treturn true;\n\t\t\t\t} else if(fcpMessage instanceof FCPPutFailedException) {\n\t\t\t\t\tFCPPutFailedException fcpPutFailed = (FCPPutFailedException)fcpMessage;\n\t\t\t\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "  0: LOAD_CONST               1 (1)\n  1: LOAD_FAST                0 (x)\n  2: COMPARE_OP               2 (>)\n  3: POP_JUMP_IF_FALSE       10\n  4: LOAD_CONST               2 (2)\n  5:", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "    CreditCard activeCreditCardWithPeriod = null;\n    List<CreditCard> creditCards = null;\n    List<CreditPeriod> creditPeriods = null;\n    List<DailyExpense> dailyExpenses = null;\n    List<ExpenseCategory> expenseCategories = null;\n    List<ExpenseCategory> expense", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\nall_platform_slugs = tuple(all_platform_slugs)\n\nPLATFORM_CHOICES = tuple([(slug, slug)\n                          for slug in all_platform_slugs])\n\n\nclass LanguageAdmin(admin.ModelAdmin):\n    list_display =", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "app/src/main/java/com/ratebeer/android/MainActivity.java\nimport android.Manifest;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.location.Location;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "        self.__parser = self.__detect_parser(ping_result.stdout)\n\n    def __detect_parser(self, ping_result: str) -> PingParser:\n        if self.__is_linux_ping_result(ping_result):\n            return LinuxPingParser(timezone=self.__timezone)\n\n        if self.__is_macos_ping_result(ping", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "            Log.e(this.getClass().getSimpleName(), \"chat is null\");\r\n            throw new ExceptionInInitializerError(\"chat is null\");\r\n        }\r\n\r\n        // Restore latest message id\r\n        if (savedInstanceState != null) {\r\n            latestMessageOnDisplay = savedInstanceState.getLong(RESTORE_LATEST_MESSAGE_ID);\r\n        }\r\n\r\n        // Restore", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tprivate boolean inGame = false;\n\tprivate boolean paused = false;\n\tprivate boolean loading = false;\n\tprivate boolean loadingWorld = false;\n\tprivate boolean loadingLevel = false;\n\tprivate boolean loadingLevelEntities = false;\n\tprivate boolean loadingLevelChunks = false;\n\tprivate boolean loadingLevelEntitiesDone = false;\n\tprivate boolean loadingLevelChunksDone", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "    account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join([choice(string.letters) for i in range(20)])\n            while User.objects.filter", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "        assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n\n        assertThat(qe, isStatementOrBatchStatement());\n        assertThat(qe, isStatementOrBatchStatement());\n\n        assertThat(qe, isPreparedOrCallable());\n        assertThat(qe, isPreparedOrCallable());\n\n        assertThat(q", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {\n      int percent = Integer.parseInt(Utils.getXmlNodeValue(doc, TAG_PERCENT));\n      statusWidget.setProgress(percent);\n    }\n  }\n\n  private void parseResponse(Response response) {\n    if (response.getStatusCode() == 200) {\n     ", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "    merged_assembly_points_by_sources = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)\n    logger.info(\"Merging assembly points from different sources into a set of unique ones. Done.\")\n    logger.info(\"Merging assembly points from different sources into a set of unique ones. Done.\")\n   ", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n   ", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send_global_config_embed(ctx, config):\n\n        embed = Embeds.make_embed(header=\"Clembot Configuration", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.isInstalled()) {\n\t\t\t\t\t\tlog(\"Level is already installed\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Download\n\t\t\t\t\tgd = gd;\n\t\t\t\t\tgd = gd;\n\t\t\t\t\tgd = gd;\n\t\t\t\t\tgd = gd;\n\t\t\t\t\tgd = gd;\n\t\t\t\t\tgd = gd;\n\t\t\t\t", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "    private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /** Defines the first visible day of the week. */\n    protected int firstVisibleDayOfWeek = 1;\n\n    /** Defines the last visible day of the week. */\n    protected int lastVisibleDayOfWeek = 7;\n\n    /** Defines the first visible hour of the", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n    }\n\n    @Override\n    public Stemcells stemcells() {\n        return", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "    new DefaultPublicKeyLocator(\n        new IdentityServerDescriptorProvider(), new JsonServerInfoResolver());\n\n    locators = new VerifierProviders();\n    locators.setVerifierProvider(SignatureAlgorithm.HS256, hmacLocator);\n    locators.setVerifierProvider(SignatureAlgorithm.RS256, rsaLocator);\n\n    loc", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                } catch (Exception e) {\n                    if (i < 5) {\n                        fail(\"Should have been able to get the object\");\n                    } else {\n                        assertEquals(\"File not found\", e.getMessage());\n                    }\n                }\n            }\n\t\t\t\n\t\t\tfor(int i=0; i < 5; ++i", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                    trackHistoryRepository.insert(new TrackHistoryEntry()\n                            .setUid(liveInfo.getUid())\n                            .setStationUuid(liveInfo.getStationUuid())\n                            .setStationUuid(liveInfo.getStationUuid())\n                            .setStationUuid(liveInfo.getStationUuid())\n                            .setStationUuid(liveInfo", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "DrawerLayout.DrawerListener, ProjectsFragment.ProjectsFragmentListener, QueuedProjectsFragment.QueuedProjectsFragmentListener, StashFragment.StashFragmentListener, StashSearchFragment.StashSearchFragmentListener, StashDetailFragment.StashDetailFragmentListener, StashSearchFragment.StashSearchFragmentListener, Stash", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private class IconViewHolder extends RecyclerView.ViewHolder {\r\n\r\n        private final CardView cardView;\r\n        private final ImageView icon;\r\n        private final TextView title;\r\n        private final TextView subtitle;\r\n        private final ProgressBar progressBar;\r\n        private final View divider;\r\n\r\n        IconViewHolder(View itemView) {\r\n            super", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING, Default.ENCODING)\n\n    if typepy.is_empty_sequence(format_name):\n        format_name = app_configs.get(ConfigKey.DEFAULT_FORMAT, \"html\")\n\n    convert_configs = load_convert_configs(\n        logger, ctx.obj[Context.CONVERT_CONFIGS], subcommand", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "        return item.playlistItemID\n\n    def _getPlaylistItem(self, item):\n        \"\"\" Match an item to a playlist item and return the item. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item\n        raise NotFound('Item not found in", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "        self.assertRaises(\n            InputError, _environment_to_string, {1: 2})\n        self.assertRaises(\n            InputError, _environment_to_string, {1: \"2\"})\n\n    def test_type_check_for_environment_value(self):\n        self.assertRaises(\n            InputError, _environment_to_string, {u", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "    if isinstance(cmd, InteractiveCommand):\n      if not cmd.WantPager(gopts):\n        pager = RunPager(gopts.pager)\n        if pager:\n          # We're running in a pager, so we can't use the tty.\n          cmd.SetPager(pager)\n      else:\n        # We're running", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "            } catch (TaskDataException e) {\n                taskData.setErrorInfo(e.getMessage());\n                taskData.setState(TaskData.STATE_FAIL_PROGRAM);\n            } catch (TaskPartnerException e) {\n                taskData.setErrorInfo(e.getMessage());\n                taskData.setState(TaskData.STATE_FAIL_PARTNER);\n            } catch (TaskPartnerException", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "        entry = Entry.create(\"http://example.com\")\n        await r.after_headers(entry)\n\n    @async_test()\n    async def test_reject_404(self):\n        r = RejectStatusCode(404)\nNext line of code:\n        entry = Entry.create(\"http://example.com\", response=StaticResponse(404,", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "        //保存用户的学号和姓名\n        SharedPreferences.Editor editor = sp.edit();\n        editor.putString(\"stuXH\", stuXH);\n        editor.putString(\"stuName\", stuName);\n        editor.commit();\n        //保存用户的url\n        BaseInfoDao dao = new BaseInfoDao(mContext);\n       ", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "        Qdisc.attach(self.__con)\n        Qdisc.create()\n\n        self.__device = device\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__export_path = export_path\n        self.__is_parse_filter_id =", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "            state[\"inventory\"] = [mudobj_ref(item) for item in inv]\n        except AttributeError:\n            pass\n\n    def add_location_property(self, state: Dict[str, Any], obj: Location) -> None:\n        try:\n            state[\"exits\"] = {name: mudobj_ref(exit)", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  public Query visitFieldQuery(FieldQuery n) {\r\n    Query query = null;\r\n\r\n    if (n.getOperator() == Operator.AND) {\r\n      query = visitAndQuery(n);\r\n    } else if (n.getOperator() == Operator.OR) {\r\n      query = visitOrQuery(n);\r\n    } else if", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t\tthis.surveyName = \"default\";\n\t}\n\n\tpublic ParameterizedGenerationService(boolean cleaningFolder, String surveyName) {\n\t\tthis.pipelineGenerator = new PipeLineGeneratorImpl();\n\t\tthis.valorizatorParameters = new Valoriz", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "        try {\r\n            decoder = (DataDecoder) Class.forName(dataDecoder).newInstance();\r\n        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException ex) {\r\n            System.err.println(\"Error while creating data decoder: \" + ex.getMessage());\r\n            exit(1);\r\n        }\r\n\r\n        DataNodePrinter printer = new DataNodePrinter(print,", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "            self.params[\"root_dispersion\"] = self.root_dispersion\n        except UncertainTimeError:\n            log.error(\"We couldn't find out how accurate your clock is.  Switzerland won't work.\")\n            sys.exit(1)\n        except UncertainTimeError:\n            log.error(\"We couldn't find out", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "        cursorById.close();\n\n        // Test the basic content provider query with a projection\n        String[] projection = {MovieColumns._ID, MovieColumns.TITLE};\n        Cursor movieCursorProj = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                projection,\n                null,\n                null,\n                null\n       ", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n   ", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "        self.assertIsNone(node_children('a text node'))\n        self.assertIsNone(node_children(self.elem))\n        self.assertIsNone(node_children(self.document))\n\n        self.assertEqual(tuple(node_children(self.document.getroot())),\n                         (self.document.getroot(),))\n        self.assertEqual(tuple(node_children(self.document.getroot().find('A'))),\n", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.map_view);\r\n\t\tdataProvider = DataProvider.getDataProvider(this);\r\n\t\tlocationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE),", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "ConfigCommandProcessor(\n            ConfigVlanCommandProcessor(self.switch_configuration),\n            ConfigVrfCommandProcessor(self.switch_configuration),\n            ConfigInterfaceCommandProcessor(self.switch_configuration)\n        )\n        )\nfake_switches/cisco/switch_core.py\nclass CiscoSwitchCore(BaseCiscoSwitchCore):\n    def new_command_processor(self):\n       ", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "  assert isinstance(config, LowRateConfig)\n  assert config.NAME == LowRateConfig.NAME\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)\n  assert config.NAME", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "        return RespostaConsultarUltimaSessaoFiscal.analizar(retorno)\nsatcfe/respostaconsultarultimasessaofiscal.py\nclass RespostaConsultarUltimaSessaoFiscal(object):\n    \"\"\"Representa uma resposta de uma sessão fiscal.\n\n    Esta classe é respons", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    # TODO: this is a hack to get the reference state to match the database\n    # TODO: this should be handled by the database\n    calculate_dict['conditions'] = {k: v for k, v", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "api.add_resource(ForcesResource, \"/fdm/forces\",\n                 resource_class_args=(fdm.fdmexec,))\nhuginn/servers.py\nclass SimulatorServer(object):\n    \"\"\"The SimulatorServer class is used to create a simulator server that\n    can be used to transmit the flight dynamics model data to", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "    def load_corpus_information(self) -> None:\n        \"\"\"Load corpus information from temporary directory\"\"\"\n        self._load_corpus_information()\n        self._load_corpus_information_from_json()\n        self._load_corpus_information_from_jsonl()\n        self._load_corpus_information_from_jsonl()\n        self._load_corpus_information_from_jsonl", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "    public static final String TextBlockObject = \"TextBlockObject\";\n\n    private static final int MAXIMUM_NUMBER_OF_TEXT_BLOCKS = 10;\n\n    private static final int MAXIMUM_NUMBER_OF_TEXT_BLOCKS_TO_SHOW = 5;\n\n    private static final int MINIMUM_NUMBER_OF_TEXT_BLOCKS_TO_SHOW = 1;\n\n   ", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static Logger getLogger() {\n\t\treturn LogUtil.getLogger();\n\t}\n\n\tpublic static Logger getLogger(Class<?> c) {\n\t", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "        return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private void installTreeActions() {\n        TreeSpeedSearch.install(mongoTree, new TreeSpeedSearch.TreeSpeedSearchListener() {\n            @Override\n            public void onSearch(String text) {\n                TreeSpeedSearch.search(mongoTree, text", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tcontainer.h1(\"todos\", \"todos\").input(\"new-todo\", \"What needs to be done?\", \"placeholder\");\n\n\t\t// List of todos\n\t\tlist = new ViewOnBoth<State, List<Model>>(stateInit, modelsInit) {\n\t\t\t@Override\n\t\t\tprotected Fluent generate(Fluent parent)", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "                if(output == null) {\n                    Log.e(\"CameraActivity\",\"Error: output is null\");\n                    return;\n                }\n                if(!SET_CROP_OPTIONAL) {\n                    Intent intent = new Intent(CameraActivity.this,CameraCropActivity.class);\n                    intent.putExtra(\"image\",output);\n                    startActivityForResult(intent,RESULT_C", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "    private BaseAdapter.OnItemClickListener mItemClickListener = new BaseAdapter.OnItemClickListener() {\n        @Override\n        public void onItemClick(View view, int position) {\n            Song song = mAdapter.getItem(position);\n\n            if (mActivity != null) {\n                mActivity.onSongSelected(song);\n            }\n        }\n    };\n    private BaseAdapter.On", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "    validate_key_condition(model, index, key)\n\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_hash_key_failure(model, index):\n    \"\"\"Single key condition: non-equality comparison on hash key\"\"\"\n    query_on = index or model.Meta\n    key = query_on.hash_key != \"", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "            GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        dataset.add(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,Next line of code:\n            int id,\n            String name) {\n        dataset.addGroup(id, name);\n    }\n\n    public", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "self.api.add_resource(RestSystem, '/system')\nfloranet/floranet/floranet.py\nfrom flask import Flask\nfrom flask.ext.login import LoginManager\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.migrate import Migrate\nfrom flask.ext.restful import Api\nfrom flask.ext.b", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "        self._file_tree_model = FileTreeModel(root_dir=self._directory)\n        self._file_tree_model.setSortingEnabled(True)\n        self._file_tree_model.sort(0)\n        self._file_tree_model.setRootPath(self._directory)\n        self._file_tree_model.setReadOnly(True)\n        self._file", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "        MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n    ),\n    group.add_argument(\n        \"--reorder\",\n        dest=\"reorder_rate\",\n        default=0,\n        help=\"\"\"packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet reordering means", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "    private final static TexturedModal MODAL2 = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n\n    private final static Color TRAY_COLOR = Color.of(0x00000000);\n    private final static Color TRAY_COLOR2 = Color.of(0", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface ItemClickListener {\n        /**\n         * Triggered when an event was clicked\n         *\n         * @param item\n         *            The event that was clicked\n         */\n        void item", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "        if db_type in DB_TYPES:\n            self._db_type = db_type\n        else:\n            raise PyOrientBadParamException(\n                \"db_type must be one of \" + str(DB_TYPES))\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "            client.getBaseClient().scheduleUpgradeTimeout();\n            break;\n        }\n\n        case MESSAGE: {\n            if (packet.getSubType() == PacketType.CONNECT) {\n                client.getBaseClient().onConnect(packet.getData());\n            } else if (packet.getSubType() == PacketType.DISCONNECT) {\n                client", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem> contentItemList = new ArrayList<ContentItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<Commit", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tGenerator[] generators = setGenerators(pipeline.getInFormat(), pipeline.getOutFormat());\n\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tGenerationService generationService = new GenerationService(preprocessors, generators, postprocessors);\n\t\treturn generationService;\n\t}\n\n\tprivate Pre", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "    PCollection<GCPProject> liveProjects =\n        pipeline.apply(\"Read live projects\", Read.from(LiveProjectSource.of(org)));\n\n    // Convert projects to GCPResourcePolicy objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        liveProjects.apply(ParDo.named(\"", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "bloop/session.py\nclass Session:\n    \"\"\"A session with a single DynamoDB table.\n\n    A session is a wrapper around a :class:`~bloop.engine.Engine` that provides\n    a higher-level interface for working with a single table.  A session\n    provides a :class:`~bloop.model.Base", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_dim,\n                                                           dim, vocab, lookup,\n                                                           cache=self._cache)\n            else:\n                raise ValueError(\"Unknown def_reader: {}\".format(def_reader))\n            children.extend([self._def_reader])\n        else:\n            self._def_reader", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "    private boolean _isTyping = false;\n    // Guarded by _lockObject.\n    private boolean _isTypingSent = false;\n    // Guarded by _lockObject.\n    private boolean _isTypingReceived = false;\n    // Guarded by _lockObject.\n    private boolean _is", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "    private int pickCount;\n    private int pickType;\n    private String videoQuality;\n    private ProgressDialog progressDialog;\n    private ArrayList<CustomGallery> mImageList = new ArrayList<>();\n    private ArrayList<CustomGallery> mVideoList = new ArrayList<>();\n    private ArrayList<CustomGallery> mSelectedList = new ArrayList", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOutDownLeft(RotateOutDownLeft.class),\n    RotateOutDownRight(RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "            perfil = Perfil.objects.get(user=self.object)\n            perfil_form = UserFormEdicion(instance=perfil)\n        else:\n            perfil_form = UserFormCreacion()\n        return self.render_to_response(self.get_context_data(form=form, perfil_form=perfil_form))\n\n    def post(self, request, *args,", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setDensity(fog.density);\n        descriptor.setGradient(fog.gradient);\n        descriptor.setColor(fog.color);\n\n        return descriptor;\n    }\n\n    public static Fog convert(FogDescriptor descriptor) {\n        Fog fog", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t// TODO does not work if too big array\n\t// This is because the HDF5 library does not support reading a block of data from a dataset that is larger than the maximum size of a block of data that can be read from the dataset.\n\t// The maximum size of a block of data that can be", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    ActorDetailsComponent plusActorDetailsComponent();\n    ActorInfoComponent plusActorInfoComponent();\n    ActorInfoComponent plusActorInfoComponent(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plusActorMoviesComponent();\n    ActorMoviesComponent plusActorMoviesComponent(ActorMoviesModule actorMoviesModule);\n    ActorInfoComponent plus", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidixMethodCheckException e) {\n\t\t\treturn false;\n\t\t} catch (final PerfidixMethodCheckException e) {\n\t\t\treturn false;\n\t\t} catch (final PerfidixMethodCheckException e) {\n\t\t\treturn false;\n\t\t} catch (final Per", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "    ci_pipeline_manager = CIPipelineManager()\n    ci_pipeline_config_manager = CIPipelineConfigManager()\n    ci_platform_manager = CIPipelinePlatformManager()\n    ci_platform_config_manager = CIPipelinePlatformConfigManager()\n    ci_platform_job_manager = CIPipelinePlatformJobManager()\n    ci_platform_job_config", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo\n\t\t\t\t\t.getMoreSuitableEndpoint(endpointType, format);\n\t\t\tif (endpoint == null) {\n\t\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\t\"Couldn't find a suitable endpoint for the given city.\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tlogManager.logInfo(this,\n", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST)\n            if form.is_valid():\n                planilla_de_relevamiento = form.cleaned_data[\"planilla_de_relevamiento\"]\n                return HttpResponseRedirect(reverse(\"relevamiento:jerarquizar_planilla_de_relev", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "      return\nequip/analysis/constraint/expr.py\nclass Constraint(object):\n  \"\"\"\n    Represents a constraint in the bytecode. This is a tree of expressions\n    that can be used to generate SMT clauses.\n  \"\"\"\n  def __init__(self):\n    self._ast = Tree()\n    self._c", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<TransferAction>       transferActionSupportHandler       = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupportHandler<", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tthrows PlayerOfflineException, PlayerAlreadyInRoundException, RoundFullException {\n\t\treturn getRound().addPlayer(this);\n\t}\n\n\t/**\n\t * Removes this {@link MGPlayer} from their {@link Round}.\n\t *\n\t * @throws PlayerOfflineException if the player is not online\n\t * @throws", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\nassert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\nassert_array_equal(fold([MIN_HASH_VALUE], MAX_HASH_VALUE / 2), [0])\nassert_array_equal(fold([MIN_HASH", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "        else:\n            result = format(value, fmt)\n\n    if 'o' in fmt_modifier:\n        result = result.upper()\n\n    if 'x' in fmt_modifier:\n        result = result.lower()\n\n    if 'X' in fmt_modifier:\n        result = result.upper()\n\n    if 'e' in fmt_modifier", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.type == DocumentModelItem.Type.Document:\n\t\t\t\treturn default_flags\n\t\t\telif model_item.type == DocumentModelItem.Type.Geometry:\n\t\t\t\treturn default_flags\n\t\t\telif model_item.type == DocumentModelItem.Type.Drawing:\n\t\t\t\treturn default_flags\n\t\t\telif model_item.type == DocumentModelItem.Type.DrawingInstance:\n", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "        object1.properties = {\"a\": object2, \"b\": object3}\n        object2.properties = {\"a\": array}\n        object3.properties = {\"a\": array}\n        object_dto = []\n        response = HydrateObject().hydrate(object_dto, object1)\n\n        self.assertEqual(1", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "          FASTInputStream inputStream = new FASTInputStream(new FileInputStream(dataSource), catBytes);\n          FASTDecoder decoder = new FASTDecoder(inputStream, catBytes);\n          FASTReader reader = new FASTReader(decoder, count);\n          reader.start();\n          reader.join();\n          reader.stop();\n          reader.join();\n          System.out.println(\"done\");\n", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n  to_map_and_back(DFO, DopplerPoly(1, 1, (1, )))\n  to_map_and_back(DFO, DopplerS", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "                containsString(\"hits.total: 2\"));\n        assertThat(\"all records were added to the index\", searchAllResponse, containsString(\"hits.hits.0._source.id: 1\"));\n        assertThat(\"all records were added to the index\", searchAllResponse, containsString(\"hits.hits.1._source.id", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "src/leap/leap.py\ndef _parse_packet(packet):\n    \"\"\"\n    Parse a packet and return a packet object\n    \"\"\"\n    if packet[0] == 0x99:\n        return _parse_literal_data(packet)\n\n    elif packet[0] == 0x81:\n        return _", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\n\t\tGeoJSONWriter geoJSONWriter = new GeoJSONWriter();\n\t}\n\n", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                        res = authz.getResults(\n                            context.<String>get(ContextKeys.SEARCH_FILTER),\n                            context.<ExtMap>get(ContextKeys.SEARCH_CONTEXT)\n                        );\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    } catch (SQLException e) {\n                        e.printStackTrace();\n                    }\n                    if (", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "url(r'^users/$', users_list, name='users-list'),\nurl(r'^users/new/$', new_user, name='new-user'),\nurl(r'^users/(?P<pk>\\d+)/edit/$', edit_user, name='edit-user'),\nurl(r'^users/(?P<pk>\\d+)/delete/$', delete_user,", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                            startPlayActivity(dialogFragment.getPlaySession());\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"dialog\");\n            }\n        }\n    }\n\n    private void startPlayActivity(PlaySession ps) {\n        Intent intent = new Intent(getActivity(), MixedActivity.class);\n        intent.putExtra(\"stack\", stack);\n", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "    private CookBookAdapter adapter;\n    private int page=1;\n    private int totalPage=1;\n    private int type=1;\n    private String url;\n    private String title;\n    private String remark;\n    private String url1;\n    private String url2;\n    private String url3;\n    private", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "        obj.updateBuffImg()\n        obj.repaint()\n        obj.update()\n        obj.updateGeometry()\n        obj.updateBlockShape()\n        obj.updateBlockLabels()\n        obj.updateBlockSockets()\n        obj.updateBlockImages()\n        obj.updateBlockComment()\n        obj.updateBlockWidget()\n        obj.updateBlockShape()\n        obj", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "        f = derivative.XDA(d1, d2)\n        beta = f.eval(d3)\n        i, j = self._find_preimage(f, beta)\n        assert i is not None and j is not None\n        assert f.eval(Constant(i, DP_WIDTH), Constant(j, DP_WIDTH)) == beta", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n\t\tpublic Node transformConstant(ConstantNode node) {\n\t\t\treturn node;\n\t\t}\n\t\tpublic Node transformMultiConstant(MultiConstantNode node) {\n\t\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Load the gates\n\t\tGate.load();\n\t\t\n\t\t// Register the commands\n\t\tbaseCommand = this.getCommand(\"ancientgate\").getBaseCommand();\n\t\tfor (BaseCommand command : commands) {\n\t\t\tfor (String alias : command.getAliases", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "        Challenge challenge = new Challenge(challengeData);\n        connection.saslMechanism.processChallenge(challenge);\n    }\n\n    private void parseFailure(Element doc) throws IOException {\n        Failure failure = new Failure(doc);\n        connection.saslMechanism.processFailure(failure);\n    }\n\n    private void parseSuccess(Element doc) throws", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Chaskey = ChaskeyPi\nPi = PiPermutation\nHight = HightCipher\nLea = LeaCipher\nShacal1 = Shacal1Cipher\nShacal2 = Shacal2Cipher\nFeal = FealCipher\nTea = TeaCipher\n", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "    private SongListAdapter mAdapter;\n    private FastScroller mFastScroller;\n    private Toolbar mToolbar;\n    private boolean mShowToolbar = true;\n    private boolean mShowFastScroller = true;\n    private boolean mShowHeader = true;\n    private boolean mShowFooter = true;\n    private boolean m", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "            // TODO: FlowAbsEffect is not initialized yet, so we can't call init() here\n            //((FlowAbsEffect)effect).init();\n        }\n        mSpectaculumView.selectEffect(index);\n        mSelectedEffect = effect;\n        mSelectedEffect.addListener(this);\n        return true;\n   ", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "        Bit('Spare', Pt=0, BitLen=2, Repr='hex'),\n        ]\n    def __init__(self, **kargs):\n        self._debug(kargs)\n        super(ESMHeader, self).__init__(**kargs)\n        self._init()\n    \n    def _", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "            loadSongs();\n        }\n    };\n    private AlbumEditorDialog.OnEditionSuccessListener mOnAlbumEditorDialogListener = new AlbumEditorDialog.OnEditionSuccessListener() {\n        @Override\n        public void onEditionSuccess() {\n            loadAlbums();\n        }\n    };\n    private AlbumEditorDialog.OnEditionSuccessListener mOnAlbum", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "self.add_file(file)\nmontreal_forced_aligner/aligner.py\nclass Aligner(MontrealForcedAligner):\n    def __init__(\n        self,\n        corpus_directory: str,\n        dictionary_path: str,\n        language_model_path: str,\n        acoustic_model_path: str,\n        output_directory", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(), user.getCallbackUrl(), user.getCallbackUsername(), user.getCallbackPassword());\n\t}\n\n\t@GET\n\t@Path(\"listusers\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic UserDTO[]", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers that Shodan will send when you make a request to the API.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info/headers\")\n    Observable<", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.name(), message.value());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties());\n    }\n  }\n\n  private static final class Line", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    assert almost_eq(erb[\"glasberg_moore_slaney\"](freq), bandwidth)\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 130.52),\n      (3000, 113.55),\n     ])\n  def test_glasberg_moore_83_example(self,", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "            if debugging:\n                logger_debug(\"read_sequence: read dataset with %d elements\",\n                             len(dataset))\n    if not seq:\n        raise ValueError(\"read_sequence: No datasets found in sequence\")\n    # Convert to pydicom Sequence type\n    seq = Sequence(seq)\n    if is_undefined_length:\n       ", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "    try {\n      final T expressionContext = proxyBuilder.build();\n      CoordinatesWalker walker = new BaseCoordinatesWalker(document) {\n        @Override\n        protected void onParagraph(ParagraphCoordinates coordinates) {\n          ParagraphCoordinates paragraphCoordinates = coordinates;\n          P p = paragraphCoordinates.getParagraph();\n          Comments.Comment comment = paragraphCoordinates", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(applicationContext, prefs, searchCriteria, page);\n    }\n\n    @Override\n    protected IRavelryActivity getRavelryActivity() {\n        return (IRavelryActivity) getActivity();\n    }\n\n", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "    @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags += NotationDataFlags & val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = self.bytes_to_int(val)\n\n    @sdproperty\n    def not", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "        self.textInput.setText(\"\")\n        self.textInput.setFocus()\n        self.textInput.selectAll()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "def check_string_like(arg, type_, env):\n    if isinstance(type_, _StringLike):\n        return check_arg(arg, type_, env)\n    elif isinstance(type_, MarkupMeta):\n        return check_markup(arg, type_, env)\n    else:\n        raise TypeCheckError('Expected string-like value, got: {!", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value)\n        elif isinstance(value, (Date10, DateTime10)):\n            return GregorianMonthDay(value.month, value.day, value.tzinfo", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "    if features is None:\n        features = feature_transforms\n    # TODO: This is a hack to get around the fact that we don't have a good way to\n    #       specify the features for the model. We should be able to specify the\n    #       features in the phase models.\n   ", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n        controller.getContentPlayer().pause();\n        controller.getContentPlayer().setPlayWhenReady(false);\n        controller.getContentPlayer().seekTo(0);\n       ", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "mobile/src/main/java/de/unistuttgart/iaas/iotlab/plot/PlotActivity.java\npublic class PlotActivity extends Activity\r\n{\r\n    private XYPlot plot;\r\n    private XYPlot plot2;\r\n    private XYPlot plot3;\r\n    private XYPlot plot4;\r\n    private XYPlot plot5;\r\n   ", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "    Call<Suggestions> getSuggestions(@Query(\"q\") String query);\n\n    @GET(\"packs\")\n    Call<PackResponse> getPacks(@Query(\"ids\") String ids);\n\n    @GET(\"packs\")\n    Call<PackResponse> getPacks(@Query(\"ids\") String ids, @Query(\"", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "        return Stream(model=model, engine=self)\nbloop/engine.py\ndef _validate_not_abstract(model):\n    if model.Meta.abstract:\n        raise InvalidModel(f\"{model.__name__} is abstract and cannot be used directly.\")\ndef validate_not_abstract(*models):\n    for model in models:\n        _validate_not_abstract", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "        self.log.info(\"confusion matrix:\\n%s\" % ConfusionMatrixFormatter().format(confusion_matrix, data_set.label_map))\n        self.log.info(\"confusion matrix:\\n%s\" % ConfusionMatrixFormatter().format(confusion_matrix, data_set.label_map))\n        self.log.info(\"confusion matrix", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t@RequestMapping(value=\"/profile/{username}\",method=RequestMethod.GET)\n\tpublic ModelAndView profile(@PathVariable", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "g = Graph('localhost', 2424, 'root', 'root', database='test')\npyorient/ogm/graph.py\nclass Graph(object):\n    \"\"\"Graph database.\n\n    :param client: OrientDB client instance.\n    :param strict: If True, raise exceptions on errors.\n    :param props", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "        self.init_representation()\naudeep/backend/models/summaries.py\ndef variable_summaries(variable: tf.Variable):\ndef scalar_summaries(scalar: tf.Tensor,\n                     name: str = None):\ndef reconstruction_summaries(reconstruction: tf.Tensor,\n                             targets: tf.Tensor,\n                             name: str = None):\n", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "all_platform_slugs.extend(TRANSIFEX_SLUGS)\nall_platform_slugs.extend(ZANATA_SLUGS)\nall_platform_slugs.extend(DAMNEDLIES_SLUGS)\nall_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableDefinitionNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(PropertyNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t}\n\n\tpublic static H3", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "        final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Class\", \"Method\", \"Meter\", \"Mean\", \"StdDev\", \"Min\", \"Max\", \"Confidence\", \"Runs\");\n        for (final ClassResult classRes : benchRes.getElements()) {\n            for (final", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "      walker = Walker(self.graph, visitor)\n      walker.traverse(node)\n      for edge in visitor.edges:\n        if edge.source.kind == ControlFlow.N_LOOP:\n          return edge.source\n      return None\n\n    def get_parent_loop(node):\n      class BwdEdges(EdgeVisitor):\n        def __init__(self", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.traindata, this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.error(\"Unknown tree type\");\n\t\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\tthis.t = this.tree.getSize();\n\t\tthis.T = this.t + this.m;\n\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "    def _parse_datetime(self, value: str, fmt: str) -> datetime.datetime:\n        # type: (str, str) -> datetime.datetime\n        \"\"\"\n        Parse a datetime string according to a given format.\n        \"\"\"\n        try:\n            return datetime.datetime.strptime(value, fmt)\n        except ValueError:\n           ", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                    else if (Event.EVENT_TYPE_MESSAGE.equals(event.type)) {\n                        // Update the message list\n                        mConsoleMessageListFragment.onEvent(event);\n                    }\n                    else if (Event.EVENT_TYPE_STATE_ROOM_POWER_LEVELS.equals(event.type)) {\n                        // Update the power levels\n                        mConsoleMessageListFragment.onEvent", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI2XSLTGenerator ddi2xsltGenerator = new DDI2XSLTGenerator();\n\t\n\tprivate DDI2XSLTGenerator", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n        self.releves_choice.SetSelection(0)\n        self.releves_choice.Refresh()\n        self.releves_choice.Update()\n\n    def OnGenerationRapportActivites(self, _):\n        site =", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "self.rave = openravepy.RaveCreateRobot(env, '')\npymanip/robot.py\nclass Robot(Body):\n    \"\"\"\n    Robot model.\n\n    Parameters\n    ----------\n    env : openravepy.Environment\n        OpenRAVE environment.\n    name : str\n        Name of the robot.\n", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "        final QueuedProject queuedProject = queuedProjectResult.queuedProject;\n        View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n        }\n        name.setText(queuedProject.name);\n        author.setText(queuedProject.patternAuthor);\n        gauge.setText(queuedProject.patternGauge);\n", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "                new RefreshCommand(),\n                new MigrateCommand()\n        );\n        logger.info(\"EconomyLite has been initialized!\");\n    }\n\n    public static LiteEconomy getLiteEconomy() {\n        return LiteEconomy.getInstance();\n    }\n\n    public static MessageManager getMessageManager() {\n        return MessageManager.getInstance();\n    }\n\n", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "        prior_specs = build_prior_specs(prior, symbols, params)\n        return {'prior_specs': prior_specs}\n\n    def _log_probability(self, parameters, context):\n        \"\"\"\n        Calculate the log probability of the parameters given the context.\n\n        Parameters\n        ----------\n        parameters : np.ndarray\n            Array of parameters to", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "    return Const.fromValue(arg)\nequip/analysis/constraint.py\nclass Constraint(object):\n  \"\"\"\n    A constraint is a tree of ``Expr`` nodes. It is used to represent the\n    conditional expression of a ``try`` statement.\n  \"\"\"\n  def __init__(self, ast_tree):\n    self._", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics;\n\tprivate final Fringe fringe;\n\tprivate final Fringe fringe2;\n\tprivate final Fringe fringe3;\n\tprivate final Fringe fringe4;\n\tprivate final Fringe fringe5;\n\tprivate final Fringe fringe6;\n\tprivate final Fringe fringe7;\n\tprivate final Fringe fringe8;\n\tprivate final Fringe", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new TempSensorView();\n                    o = tview.getView();\n                    ((TempSensorPresenter) tview.get", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic Long reference2() {\n\t\tSet<Long> set = new HashSet<>();\n\t\tAtomicLong aLong = new AtomicLong();\n\t\tjdbcTemplate.query(\"SELECT AUTHOR.*, BOOK.* FROM AUTHOR LEFT OUTER JOIN BOOK ON AUTHOR.ID = BOOK.AUTHOR_ID\", r -> {\n\t\t\tLong authorId = r.getLong(\"AUTHOR", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLQuery getRootQuery() {\n\t\treturn rootQuery;\n\t}\n\n\tpublic void setRootQuery(SQLQuery rootQuery) {\n\t\tthis.rootQuery = rootQuery;\n\t}\n\n\t@Override\n\tpublic void executeServer(SQLTranslation exp, ForestReader in, ForestWriter out) {\n\t\t// TODO Auto-generated method stub", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "        install_and_run(adb, file_path, app_info, True)\n        \n        # TODO: 添加其他测试方法\n        auto_app_test(adb, app_info)\n        \n        # 开启下载日志线程\n        download_logs_thread = threading.Thread(target=download_logs_thread_func, args=(adb,", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return genomes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genomes\n     */\n    Genome parseGenomes(InputStream inputStream);\n\n    /**\n     * Parse", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "                Symbol.typed(bar_type, 'bar'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_if():\n    inc_type = Func[[IntType], IntType]\n    check_expr(\n        'if true (", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, queryType(is(select())));\n\n        assertThat(pe, paramAsInteger(0, is(1)));\n        assertThat(pe, paramAsInteger(1", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "self._viewWidget.set_sketch_view(self._document.get_sketches()[0])\nGUI:\nMainWindow\n\t- RibbonWidget\n\t- ViewWidget\n\t\t- SketchView\n\t\t- PartView\n\t\t- DrawingView\n\t- TreeView\n\t- PropertiesView\n\t- ParametersView", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                            return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return cause;\n            }\n        };\n        _config = config;\n    }\n\n    /**\n     * Get the {@link RestAdapter} for the API\n     *\n     * @return the {@link RestAdapter}\n", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "registerRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the start token for expressions. The default is <code>${</code>.\r\n\t * \r\n\t * @param exprStartToken\r\n\t *            the start token for expressions\r\n\t */\r\n\tpublic void setExprStartToken(String expr", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_UPPERCASE, false)) {\n\t\t\tlabelFactory = new UpperCaseFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "    url(r'^package/(?P<slug>[\\w\\-]+)/new$', staff_member_required(AddPackageCIPipeline.as_view(), login_url=LOGIN_URL),\n        name=\"package-add-ci-pipeline\"),\n    url(r'^refresh$', login_required(refresh_ci_pipeline, login_url=LOGIN_URL), name=\"", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "            if (bitmap != null) {\r\n                intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n            }\r\n\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                ActivityTransitionHelper.setSharedElementEnterTransition(mContext, intent,\r\n                        new ActivityTransitionHelper.SharedElementCallback() {\r\n                            @Override\r\n", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "    person = None\n    if not request.user.is_anonymous():\n        person = request.user.person\n    account = account_for_vimeo_id(access_token_data['user_id'], person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_name = ''.", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "                ra, dec, mag = xyToRaDecMag(plate, x_mean, y_mean, test_px_sum, \\\n                    apply_vignetting=True, apply_extinction=True)\n\n                # Compute the vignetting and extinction loss\n                vignetting_loss = 1 - np.exp(-plate.vignetting_coeff", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "    grid = _gen_grid(data, options)\n    \n    # Compute likelihood surface\n    likelihood = _grid_likelihood(data, options, grid)\n    \n    # Apply prior to likelihood surface\n    posterior = _apply_prior(data, options, likelihood, grid)\n    \n    # Compute integral of posterior surface\n    integral =", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "            UIDialogs.getDialog().getStage().addActor(UIDialogs.getDialog());\n          }\n        else\n          UIDialogs.getDialog().getStage().addActor(UIDialogs.getDialog());\n      }\n    });\n    rollBtn.setX(Gdx.graphics.getWidth() - rollBtn.getWidth() - 10", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "        self.assertListEqual(list(etree_iter_paths(root)), [\n            ('a', '/a'),\n            ('b1', '/a/b1'),\n            ('c1', '/a/b1/c1[1]'),\n            ('c2', '/a/b1/c2[1]'),\n            ('b2", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "        self.runner.add(ContentSampling(), with_child=True)\n        self.runner.add(ContentSimhashSampling(), with_child=True)\n        self.runner.add(self.rule, with_child=True)\n        self.rule.set_engine(self.engine)\n        self.rule.set_child_heuristics(self.runner.heuristics)\n\n    def tearDown(self):\n        self", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    cfecanc = CFeCancelamento(\n            destinatario=Destinatario(\n                    CPF='11122233344',\n                    xNome=u'João da Silva'),\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a genome.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a genome\n     */\n    Genome parseGenome(InputStream inputStream);\n\n   ", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "            EtsiResponse resp = this.client.send(req);\n            \n            // 5. Get the signature value\n            SignatureValue sigValue = resp.getSignatureValue();\n            \n            // 6. Construct the ASiC file\n            this.service.constructAsicFile(sigValue, dataToSignBytes, this.parameters", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Analysis:\n\t\t\treturn get_icon(\"analysis\")\n\t\telif type(obj) is Feature:\n\t\t\treturn get_icon(\"feature\")\n\t\telif type(obj) is FeaturePlane:\n\t\t\treturn get_icon(\"feature", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "mobile/src/main/java/de/uniluebeck/itm/sensortracker/plot/PlotActivity.java\npublic class PlotActivity extends Activity\r\n{\r\n    private XYPlot plot;\r\n    private XYPlot plot2;\r\n    private XYPlot plot3;\r\n    private XYPlot plot4;\r\n    private XYPlot plot5", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<Game> schedule;\n\tprivate TeamLeaders teamLeaders;\n\tprivate List<PlayerOverview> playerOverview;\n\t\n\tpublic Team(String teamId) throws TeamNotFoundException {\n\t\tTeamSummaryResponse teamSummaryResponse = getTeamSummary(teamId);\n\t\tif (teamSummaryResponse == null) {\n\t\t\tthrow new TeamNotFoundException(\"Team not", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "        DeviceInfo deviceInfo = new AndroidDeviceDetailsInfo().getDeviceDetails();\n        Feedback feedback = new Feedback(\n                userFeedback.getType().toString(),\n                userFeedback.getMessage(),\n                userFeedback.getScreen(),\n                userFeedback.getBase64Screenshot(),\n                deviceInfo,\n                packageInfo,\n                email,\n                sessionManager.getSession", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "            table_index.setdefault(table_name, []).append(key)\n            object_index.setdefault(table_name, []).append(obj)\n\n        for table_name, keys in table_index.items():\n            request[table_name] = {\n                \"RequestItems\": {\n                    table_name: {\n                        \"Keys\": keys,\n                        \"ConsistentRead\": consistent", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "                print(draw_art(key['size'], key['algo'], fingerprint))\n            print('Fingerprint: {0}'.format(format_fingerprint(fingerprint)))\n            print('Description: {0}'.format(description))\n            print('Created at:  {0}'.format(created_at))\n            print('')\n\n    async def list_v", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\nfrom django.conf.urls import url, include\nfrom", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "        return RespostaExtrairLogs.analisar(retorno)\nsatcomum.py\nclass ClienteSATLocal(FuncoesSAT):\n    \"\"\"Cliente local para a comunicação com o SAT.\n\n    Este cliente é responsável por invocar as funções do SAT e analisar os\n    retornos", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "        self.assertEqual(node_document_uri(ElementTree.XML('<A/>')), None)\n        xml_test = '<A xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:base=\"http://example.com/\" />'\n        self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'http://", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case DURATION_ASC:\n                    Arrays.sort(sorted, new ItemDurationComparator(false));\n                    break;\n                case DURATION_DESC:\n                    Arrays.sort(sorted", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "self.worker.compile_data()\n        self.worker.compile_data()\n        self.worker.compile_data()\n        self.worker.compile_data()\n        self.worker.compile_data()\n        self.worker.compile_data()\n        self.worker.compile_data()\n        self.worker.compile_data()\n        self.worker.compile_data()\n        self.worker.compile_data()\n        self.worker.compile_data", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "    private final OAuth2Requester requester;\n    \n    public OAuth2Requester getRequester()\n    {\n        return requester;\n    }\n    \n    public OAuth2Requester getOAuth2Requester()\n    {\n        return requester;\n    }\n    \n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "    private final Vms vms;\n    private final Errands errands;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    \n    public SpringDirectorClient(URI uri) {\n        this.restTemplate = new RestTemplate();\n        this.restTemplate.setErrorHandler(new BoshRestTemplateErrorHandler());\n        this.rest", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "    public HiMuteStatus getMuteStatus(HiSide side)\n    {\n        synchronized (_lock)\n        {\n            return _chat.getMuteStatus(side);\n        }\n    }\nDifian/DifianApp/src/com/sonova/difian/ui/MainActivity.java\npublic final class MainActivity extends Activity implements", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "        return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "    public void onClick(GuiMouseEvent event) {\n        if (event.getButton() == 0 && event.getType() == MouseEvent.CLICK) {\n            TabbyChat.getInstance().getChat().setActiveChannel(channel);\n        }\n    }\n\n    @Override\n    public void drawButton(int mouseX, int mouseY, float", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Sad = BlackFormula2.price_Sad(DATA[looptest][0], DATA[looptest][1], DATA[looptest][2], \n            DATA[looptest][3", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "            VotingModule.class\n    };\n\n\n    private AthenaGM plugin;\n    private HashMap<String, Module> modules;\n\n\n    public ModuleLoader(AthenaGM plugin) {\n        this.plugin = plugin;\n        this.modules = new HashMap<String, Module>();\n    }\n\n\n    /**\n     * Loads all modules\n     */\n    public void", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize thread pool size.\n     * @return {@link DownloadQueue}.\n     * @see #newDownloadQueue()\n     */\n   ", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "  public void init(MutableConfig config) {\n    config.addOption(\"packager\", \"packager\", \"packager\", \"packager\", \"packager\", \"packager\", \"packager\", \"packager\", \"packager\", \"packager\", \"packager\", \"packager\", \"pack", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList nodeList = element.getElementsByTagName(QUERY_SET_CONFIG_TAG);\n        if (nodeList.getLength() > 0) {\n            Element querySetConfigElement = (Element) nodeList.item(", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "                        S['runmemory'] = ret['runmemory']\n                        S['runtime'] = ret['runtime']\n                        S['timesubmit'] = ret['timesubmit']\n                        S['codelenth'] = ret['codelenth']\n                        S['language'] = ret['language']\n                        S['nickname", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "            left_foot_task = PoseTask(\n                self.robot, self.robot.left_foot, self.swing_foot.pose,\n                weight=swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance.right_foot,\n", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "    simple_op.add(BvNeg)\n    simple_op.add(BvNot)\n    simple_op.add(ZeroExtend)\n    simple_op.add(Extract)\n    simple_op.add(Concat)\n    simple_op.add(Repeat)\n    simple_op.add(Ite)\n    simple_op.add(RotateLeft)\n    simple_op.add", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\taJPEG.mSOFSegment.encode(aOutput).log(aLog);\n\n\t\taJPEG.mDQTSegment.encode(aOutput).log(aLog);\n\n\t\tif (aJPEG.mColorSpaceTransform != null)\n\t\t", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "            if (sl == null) {\n                logger.severe(\"Keine Sammellastschrift ausgewählt\");\n                return;\n            }\n\n            HibiscusExporter exporter = new HibiscusExporter(sqlSessionFactory,\n                    sqlSessionFactory.getConfiguration().getEnvironment()\n                            .getDataSource(), conf);\n\n            List<DataRow", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "    def generate_pronunciations_arguments(self) -> List[GeneratePronunciationsArguments]:\n        \"\"\"Generate arguments for :func:`~montreal_forced_aligner.alignment.pretrained.generate_pronunciations_func`\"\"\"\n        return [\n            GeneratePronunciationsArguments(\n                os.path.join(self.working_directory", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "        LoreProperties lore = LoreLoader.getLore(key);\n\n        if (lore == null) {\n            entityPlayer.addChatMessage(new ChatComponentText(\"Lore not found!\"));\n            return;\n        }\n\n        LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        if (properties.contains(key))", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "    private final UserDAO userDAO;\n    private final CategoryDAO categoryDAO;\n    private final BudgetDAO budgetDAO;\n    private final RecurringDAO recurringDAO;\n    private final TransactionDAO transactionDAO;\n    private final AuthTokenDAO authTokenDAO;\n    private final PasswordEncoder passwordEncoder;\n    private final BudgetTypeDAO", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger logger = LogUtil.getLogger();\nNext line of code:\n\tprivate static final CloudUtil cloudUtil = CloudUtil.getInstance();\nNext line of code:\n\tprivate static final CollectionsUtil collectionsUtil = CollectionsUtil.getInstance();\nNext line of code:\n\tprivate static final ClasspathUtil classpathUtil = ClasspathUtil.getInstance();\n", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "    FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    FlipInX(FlipInX.class),\n    FlipInY(FlipInY.class),\n    FlipOutX(FlipOutX.class),\n    FlipOutY", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        smart_print(problem.formula_size(), problem.formula_size(), problem.formula_size())\n\n    if verbose_level >= 1:\n        smart_print(problem.formula_size(), problem.formula_size(), problem.formula", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "            h5 =  LocalHost5\n        return H()\n\n    def test_init(self):\n        hosts = self.get_hosts()\n        container = HostsContainer(hosts)\n\n        self.assertEqual(len(container), 5)\n        self.assertEqual(container.roles, ['h1', 'h2', 'h3', 'h", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "            return command.startswith(\"tc\")\n\n        return filter(tc_command_filter, self.__command_history)\n\n    def __str__(self):\n        return self.__make_text()\n\n    def __make_text(self):\n        text = msgfy(\n            \"tcset\",\n            device=self.device,\n            direction=self.direction,\n            netem", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n  assert isinstance(encoder, GLONASSL2TwoBitsEncoder)\n  assert isinstance(encoder, GLONASSL1L2TwoBitsEncoder)\n  assert isinstance(encoder, GPS", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mExpenseManagerDbHelper.getReadableDatabase();\n\n        String[] projection = {\n                ExpenseEntry._ID,\n                ExpenseEntry.COLUMN_NAME_DESCRIPTION,\n                ExpenseEntry.COLUMN_NAME", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "    private SimpleDateFormat monthFormatter;\n    private SimpleDateFormat yearFormatter;\n\n    private TextView monthTitle;\n    private TextView yearTitle;\n\n    private OnMonthChangeListener onMonthChangeListener;\n    private OnDayChangeListener onDayChangeListener;\n\n    private ScrollManager scrollManager;\n\n    private boolean isPrepared = false;\n\n    private boolean isScrolling", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "    my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert almost_eq(my_stream.take(25), [random.random() for _ in xrange(25)])\n\n  def test_inf_input(self):\n    my_stream = white_noise(inf)\n    assert isinstance(my_stream, Stream)\n    assert almost_eq", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "                isinstance(t2, RecordMeta) and\n                t1.__instance__ is None\n            ):\n                t1.__instance__ = Record[field_refs(backref, t2.__items__)]\n                unify(t1, t2, backref)\n            else:\n                raise\n\n    elif isinstance(t1, Record", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "        self.auth = Auth(login_data, no_prompt)\n    )\n    def __repr__(self):\n        \"\"\"Return string representation.\"\"\"\n        return f\"<Blinkpy {__version__}>\"\n\n    @property\n    def last_refresh(self):\n        \"\"\"Return last refresh time.\"\"\"\n        return self.last_refresh_time\n\n   ", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\tif isinstance(model_item.data, Sketch):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, SketchInstance):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, SketchInstance):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "self._varz.message_bytes_sent(buf.tell())\nscales/sinks/async.py\nclass AsyncSink(object):\n  def __init__(self, sink):\n    self._sink = sink\n\n  def __getattr__(self, name):\n    return getattr(self._sink, name)\n\n  def __call__(self,", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "        assertThat(out.toString(), equalTo(\n                \"Thread dump of '\" + process.JMX_AUTH_CONNECTION + \"':\\n\" +\n                \"java.lang.Thread.State: RUNNABLE\\n\" +\n                \"at com.redhat.dumpling.cli.SourceTest$1.run(SourceTest.java:62)\\n\" +\n               ", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "        data.setOperation(DrumOperation.UPDATE);\n        return data;\n    }\n\n    private static DrumStoreEntry<String, String> createNewData(String auxiliaryData, DrumOperation operation, String... val) {\n        InMemoryEntry<String, String> data = new InMemoryEntry<>();\n        if (val != null && val", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" 个\");\n            }\n        });\n    }\n}\nmedialoader/src/main/java", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "        return new RoxanaPropertiesMockBuilder().build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager(this.getRoxanaProperties(), this.getTranslator());\n    }\n\n    private static class MockedBusinessException extends RuntimeException implements BusinessException {\n\n        private static final String RO", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "    self._socket.write(self._ping_msg)\n\n  def _CheckPingResponse(self, msg):\n    \"\"\"Check if the response to a ping message is valid.\n\n    Args:\n      msg: The message received from the server.\n    Returns:\n      True if the message is a valid response to a ping message.\n   ", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "      assert almost_eq(freq2lag(lag2freq(v)), v)\n      assert almost_eq(lag2freq(freq2lag(v)), v)\n\n  def test_freq2lag_and_lag2freq_with_generators(self):\n    for v in [37, 12, .5, -2, 1", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "            Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy20Service.class,\n            Proxy21Service.class,\n            Proxy22Service.class,\n            Proxy23Service.class,\n            Proxy24Service", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "        SpellHelper.set_dictionary(list(pytz.all_timezones))\nclembot/config/constants.py\nclass Icons:\n\n    avatar = \"https://cdn.discordapp.com/emojis/709090479904012298.png?v=1\"\n    avatar2 = \"https://cdn.discordapp.com/emojis", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "    elif self.symbol in ('eq', 'ne'):\n        return operator.eq(*operands) if self.symbol == 'eq' else operator.ne(*operands)\n    elif self.symbol == 'lt':\n        return operator.lt(*operands)\n    elif self.symbol == 'le':\n        return operator.le(*operands)\n    elif self", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "        welcomeString.setText(\"Bienvenido, \" + Utils.getFullName(getActivity()));\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEvents.add(new Event(Constants.MENU_IMAGE1, R.drawable.ic_home, R.string.menu_home, HomeActivity.class));\n        m", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "            // Notify the fragment that the chat was created\n            InviteToChatFragment.InviteToChatFragmentInviteToChatFragmentInviteToChatFragmentInviteToChatFragmentInviteToChatFragmentInviteToChatFragmentInviteToChatFragmentInviteToChatFragmentInviteToChatFragmentInviteToChatFragmentInviteToChatFragmentInviteToChat", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "        UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertNotNull(response);\n        Assert.assertEquals(\"SUCCESS\", response.getReturnCode());\n        Assert.assertEquals(\"SUCCESS\", response.getResultCode());\n        Assert.assertNotNull(response.getPrepayId());\n        Assert.assertNotNull(response.getCodeUrl());\n        Assert.assertEquals(\"NATIVE\", response", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "        MessageMapper messageMapper = new MockedMessageMapper(KEY, SUCCESS);\n        MessageTranslated messageTranslated = creator.create(messageMapper);\n        assertEquals(KEY, messageTranslated.getKey());\n        assertEquals(SUCCESS, messageTranslated.getSeverity());\n        assertEquals(KEY, messageTranslated.getMessage());\n    }\n\n    @Test\n    void createWithParametersTest", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\tpublic Operand readOperand() throws IOException {\n\t\t\treturn readOperand(in.peek());\n\t\t}\n\n\t\tpublic Operand readOperand(int peek) throws IOException {\n\t\t\tint tag = peek & 0x0F;\n\t\t\tswitch (tag) {\n\t\t\tcase CODEINT4_TAG:\n\t\t\tcase CODEINT12_TAG:\n\t\t\t\treturn", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "client = Client(username, password, project_id, auth_url, insecure, region_name, service_type, service_name, endpoint_type, endpoint_url, cacert, cert, key, timeout, retries, retry_interval, retry_max, http_log_debug, http_log_headers, http_log_bodies, http_log_max_size", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "            MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(timezone=self.__timezone)\n                return self.__parser.parse(ping_lines)\n            except ParseError as e:\n                logger.debug(f\"failed to parse", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate.getText()));\r\n        } else {\r\n            JOptionPane.showMessageDialog(null, \"Frame rate must be at least 1\");\r\n            m.videoSetFrameRate.setText(\"1\");\r\n        }\r\n\r\n        // set width\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) > ", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "            self._probe = probe\n        # Set the parameters.\n        self._set_params(**kwargs)\n        # Create the temporary directory.\n        self._create_tempdir()\n        # Create the spike store.\n        self._create_spike_store()\n        # Create the extractor.\n        self._create_extractor()\n        #", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.buildPingUri(context.getUrl(), context.getConnectionData());\n        final BoundRequestBuilder bound", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "      self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def get_block(self, index):\n    \"\"\"\n      Returns the basic block that contains the given bytecode index.\n    \"\"\"\n    return self.blocks_dict.get(index, None)\n\n  def get_node(self, block):\n    \"\"\"\n     ", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "        ObservableRegistry.getObservable(QRCodeFragment.class).register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getObservable(QRCodeFragment.class).remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "  public void visit(final InExp inExp) throws QueryGrammarException {\n    final Column column = inExp.getColumn();\n    if (inExp.getValue() == null)\n      throw new QueryGrammarException(\n          \"Cannot apply IN with a NULL value\");\n\n    result.append(OPEN_BRACKET);\n    visit(column);\n   ", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/test1.xml\");\n\t\t\tFile expectedOutputFile = new File(basePath + \"/test1.xforms\");\n\t\t\tFile expectedOutputFileBrowsing = new File(basePath + \"/test1.xforms.browsing\");\n\t\t\tFile expectedOutputFileBrowsing2 = new File(base", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "            DiscreteDistribution(np.array([0.5, 0.5]), np.array([0, 1])).draw(1),\n            np.array([0]),\n        )\n        self.assertEqual(\n            DiscreteDistribution(np.array([0.5, 0.5]), np.array([0, 1])).", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpad state\n        state = stateFactory.createState(VpaidState.class);\n\n        assertThat(state instanceof TestVpadState, is(true));\n\n    }\n\n    @", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void accept(final FixTag tag, final Object value) throws InvalidValueException {\n\t\tValidity validity = validities.get(tag);\n\t\tif (validity == null) {\n\t\t\tvalidities.put(tag, validity = new Validity(tag));\n\t\t}\n\t\tvalidity.accept(value);\n\t}\n\t\n\tpublic static class", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))\n        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=\"\", language=\"Hindi\"))\n        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=\" \", language=\"Hindi\"))\n        self.assertEqual(hindi_placeholder_name(),", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                        expectLastCall().andThrow(new ExpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfTheSystem();\n                                    return GIVEN", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        if rem:\n            # append padding bits\n            self.append( Bit(self.rest_name).map(string) )\n            # TODO: check if rem is a multiple of 8\n            # TODO: check if rem is not too long\n            # TODO: check if rem is not too short\n            # TODO", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "        for cls in walk_subclasses(model):\n            if cls.Meta.abstract:\n                continue\n            self._bind_model(cls, skip_table_setup=skip_table_setup)\n\n    def _bind_model(self, model, *, skip_table_setup=False):\n        \"\"\"Bind a single model to this engine.\n\n        :param model: Model", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "resposta = funcao()\n```\n\n## Your task: \nPlease modify the code to include the following changes:\n1. Add a new method `consultar_status` to the `FuncoesSAT` class that sends a POST request to the endpoint 'consultarstatus' and returns a `RespostaConsultarStatus", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "    class NotAModel:\n        pass\n    engine.bind(NotAModel)\n    assert False, \"should have raised InvalidModel\"\n    # noinspection PyTypeChecker\n    assert isinstance(e, InvalidModel)\n\n\ndef test_bind_abstract(engine):\n    \"\"\"Can bind abstract models\"\"\"\n    class AbstractModel(BaseModel):\n", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "    assert u6.base_value == 1.0 / (mass_sun_kg * m_per_pc**3)\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"Msun/kpc**3\")\n    assert u7.base_value == 1.0 / (mass_sun_kg * m", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "tests/unit/test_cli.py\n    def test_instance_references(self):\n        \"\"\"\n        Test the instance references command.\n        \"\"\"\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-branches\n        # pylint: disable=too", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "        List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule());\n        modules.add(new LoanModule());\n        for (Module module : modules) {\n            if (!module.initialize(this, logger)) {\n                logger.error(\"Module \" + module.getName() + \" could not be initialized!\");\n                continue;\n           ", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "        tag = TAG()\n        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n        :param index: Index into the tag list.\n        :param name: Name of a type of tag to retrieve. Specify None to retrieve\n            all types", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                    public void startEditAccountActivity(Account account) {\n                        Intent intent = EditActivity.getIntent(MainActivity.this, R.string.account_edit_title,\n                                account, new AccountEditController(), true);\n                        startActivityForResult(intent, NEW_ACCOUNT_RESULT);\n                    }\n\n                    @Override\n                    public void startEditOrderActivity(Order order) {\n                       ", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponse<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<ImgurResponse<List<String>>> listAccountImageIds(\n\t\t\t@Path(\"", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "        resource = ThermometerResource(aircraft.sensors.thermometer)\n\nclass PitotTubeResourceTests(TestCase):\n    def test_get_pitot_tube_data(self):\n        huginn_data_path = configuration.get_data_path()\n\n        fdm_builder = FDMBuilder(huginn_data_path)\n        fd", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "    column = VectorModel.map[\"foo\"][\"bar\"]\n    value = 3\n    expected_ref = \"#n0.#n1\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_names = {\n        \"#n0\": \"map\",\n        \"#n1\": \"bar\"\n    }\n   ", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "            Platform.runLater(new Runnable() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tAlert alert = new Alert(Alert.AlertType.ERROR, \"Error: \" + e.getMessage(), ButtonType.OK);\r\n\t\t\t\t\talert.showAndWait();\r\n\t\t\t\t}\r\n\t\t\t});\r\n            return false;\r\n        }\r\n        \r\n        if (", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "            comment_form = self.form_class(initial={'user': request.user})\n        else:\n            comment_form = self.form_class()\n        paginator = Paginator(nodes, 10)\n        page = request.GET.get('page')\n        try:\n            nodes = paginator.page(page)\n        except PageNotAnInteger:\n            nodes = paginator", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending gifs\n     *\n     * @param serviceIds a {@link Map} of a collection of ids for better content delivery experience\n     * @param limit      <b>", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "            of(mConnectionSuccessListener).ifPresent(successListener -> successListener.failed(connectionErrorCode(connectionErrorCode)));\n        }\n    };\n\n    @NonNull\n    private final WifiManager.WifiLock mWifiLock = mWifiManager.createWifiLock(\"WifiLock\");\n\n    @NonNull\n    private final WifiManager.WifiLock mWifiLock", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "            LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            TemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "        for (PlaySession ps : stack.getPlaySessions()) {\n            ps.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "    def __init__(self, log_path, vad_path, segmentation_path, **kwargs):\n        super().__init__(log_path, **kwargs)\n        self.vad_path = vad_path\n        self.segmentation_path = segmentation_path\n\n    def run(self):\n        \"\"\"Run the function\"\"\"\n        with open(self.v", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "    private final Deployments deployments;\n    private final Errands errands;\n    private final Vms vms;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    \n    public SpringDirectorClient(URI uri) {\n        this.restTemplate = new RestTemplate();\n        this.restTemplate.setErrorHandler(new Bosh", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\npyfmodex/fmod.py\nclass Sound(FmodObject):\n    \"\"\"Sound object.\n\n    :param str name_or_data: Name of the sound to load, or raw sound data", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "                bitpos=section.bitpos_start + section.bitpos_offset\n            )\n            bit_writer.set_pos(nbytes_write * NBITS_PER_BYTE)\n\n        # Serialize the message to bytes\n        bufr_message.serialized_bytes = bit_writer.get_bytes()\n\n        # Wire the template if requested\n        if wire_template:\n", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "        form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            comments = form.cleaned_data['comments']\n            AbuseReport.objects.create(\n                logged_against=logged_against,\n                logged_by=logged_by,\n                abuse_comment=comments)\n            return redirect('accounts:profile', user_id)\n", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "    public void listenToResultSet(final BenchmarkResult paramResult) {\n        final BenchmarkResult benchRes = (BenchmarkResult) paramResult;\n        final BenchmarkResult benchRes2 = benchRes;\n        final BenchmarkResult benchRes3 = benchRes2;\n        final BenchmarkResult benchRes4 = benchRes3;\n        final", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "        // Checking PhyML binary\n        if (!PhyMLv3AminoAcidRunEstimator.checkBinary())\n        {\n        \tSystem.err.println(\"PhyML binary not found. Please, check your PhyML installation.\");\n        \tSystem.err.println(\"ProtTest will exit.\");\n        \tSystem.err.println(\"If you", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(ID(\"myRecording\"), URL(\"http://www.tropo.com\"), BEEP(true), SEND_TONES(false), EXIT_TONE(\"1\"), MUTE(false));\n\t\ttropo.on(EVENT(\"continue\"), Do.say(\"Thank you for your call.\"));\n\t\ttropo.on(EVENT(\"", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "                VerificadorDePrazos.estaNoPrazo(listaDeRespostas.getPropriedades().getPrazo())) {\n            QuestaoDaLista questaoDaLista = listaDeRespostas.getListaDeExercicios().getQuestaoDaLista(idDaQuestao);\n            resposta.set", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(ProgramTrack.class);\n\t\t\t\t\tadapter.mTracks = ProgramManager.getInstance().getTracks();\n\t\t\t\t\tmViewPager.setAdapter(adapter);\n\t\t\t\t\tmViewPager.setOnPageChangeListener", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "    PlayerUIController playerUIController;\n\n    @Mock\n    AdInterface adInterface;\n\n    @Mock\n    CuePointRetriever cuePointRetriever;\n\n    @Mock\n    CuePointRetriever cuePointRetriever2;\n\n    @Mock\n    CuePointRetriever cuePointRet", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tappEvent.fireEvent(AppEvent.Event.EXIT) ;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tauthorize(new SimpleBrowserImpl(), new Callback<Credential>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess(Credential credential) {\n\t\t\t\t\tlogger.info(\"Login success\") ;\n\t\t\t\t\tclient = new Drive.Builder(\n\t\t\t\t\t\t\tNetHttp", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "    String className = adapterName(type);\n    ClassName adapterClassName = ClassName.get(packageName, className);\n    ClassName bindingClassName = ClassName.get(packageName, type.getSimpleName());\n    ClassName bindingMembersClassName = ClassName.get(packageName, type.getSimpleName() + \"$Members\");\n    ClassName bindingMembersInjectorClassName =\n        ClassName.get(packageName,", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\r\n         */\r\n        public static void enableReceiveNormalMsg(boolean enable){\rNext line of code:\n            new EnableReceive", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 0\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "    elif is_comment_node(elem) and context.parent_map.get(elem) is None:\n        return f'/comment()[{context.position}]'\nNext line of code:\n    elif is_document_node(elem) and context.parent_map.get(elem) is None:\n        return '/'\n    elif elem is root:\n        return path\n   ", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "t = Table({'a': [1, 2, 3], 'b': [4, 5, 6]})\nt.add_column('c', [7, 8, 9])\nt.add_column('d', [10, 11, 12])\nt.add_column('e', [", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "                TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n        }\n    }\n\n    private void transmitMessage(Message message)\n    {\n        synchronized (_lock)\n        {\n            Contract.check(message != null);\n\n            Log.i(TAG, String.format(\"Transmit", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "        assertThat(main.getStackTrace().getHead().getMethodName(), equalTo(\"busyWaiting\"));\n    }\n\n    @Test\n    public void blocked() {\n        ThreadDumpThread main = sut.thread(\"main\");\n        assertThat(main.getStatus(), equalTo(ThreadStatus.BLOCKED));\n        assertThat(main.getStackTrace().getHead().getMethodName(),", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "                DatePicker datePicker = new DatePicker(this, 2000, 2050);\n                datePicker.setOnDateSetListener(new DatePicker.OnDateSetListener() {\n                    @Override\n                    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {\n                        // 选择的日期\n                       ", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "            GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n       ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "    private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private ViewPager mViewPager;\n    private TabLayout tabLayout;\n    private CheckBox cbHook;\n    private CheckBox cbHook90;\n    private CheckBox cbHook180;\n    private CheckBox cbHook270;\n    private CheckBox cbHook360", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "        self.tracerouter = Tracerouter.Tracerouter()\n        self.pcap_logger = PcapLogger.PcapLogger(self)\n        self.pcap_logger.start()\n        self.pcap_logger.ready()\n        self.pcap_logger.set_config(config)\n        self.pcap_logger.set_flow_manager(self.fm)\n        self.p", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "deltas = api_client.deltas.since(\"cursor\")\n# Complete the code below\n# 1. Instantiate a Deltas object from the response\n# 2. Assert that the Deltas object has the correct attributes\n# 3. Assert that each Delta in the Deltas object has the correct attributes\n", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "        self,\n        callback_url,\n        triggers=None,\n        state=None,\n        callback_type=None,\n        callback_format=None,\n        callback_headers=None,\n        callback_body=None,\n        callback_body_format=None,\n        callback_body_params=None,\n        callback_body_params_format=None,\n        callback_body_params_type=None,\n        callback_body", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "    this);\n    activityLightLevelManager = new ActivityLightLevelManager(activityLightLevelChanger, sharedPreferences);\n    activityLightLevelManager.onResume();\n\n    // Set up the renderer.\n    SkyBoxRenderer skyBoxRenderer = new SkyBoxRenderer(this);\n    SkyBoxRenderer.SkyBoxRendererListener skyBoxRendererListener =", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "            non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_thermochemical_prob = 0\n        lnlike = multi_phase_error + eq_thermochemical_prob + act", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "            Str('ID', Pt=ID(), Len=1, Repr='hex') \\\r\n            ])\r\n        self._post__init__(with_options, **kwargs)\r\n\r\n# section 9.2.2\r\nclass REGISTRATION_ACCEPT(Layer3):\r\n    '''\r\n    Net -> ME\r\n    Dual\r\n    #", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "        TcClassParser(self.__con).parse(device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output))\ntcconfig/_tc_command_helper.py\ndef run_tcset(device, direction, shaping_rule):\n    from . import _tc_command_helper\n\n    _tc_command_helper.run_tc", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n\n\ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result,", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "    def validation_error(exc_class):\n        def decorator(f):\n            @functools.wraps(f)\n            def wrapper(*args, **kwargs):\n                try:\n                    return f(*args, **kwargs)\n                except SwaggerMappingError as exc:\n                    raise exc_class(str(exc), child=exc)\n            return wrapper", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
