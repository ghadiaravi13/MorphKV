{"pred": "    private final transient KademliaRoutingTable routingTable;\n    private final transient KadConfiguration config;\n\n    /* Operations */\n    private final transient Timer timer;\n\n    /**\n     * @param ownerId\n     * @param config\n     * @param server\n     * @param localNode\n     * @param dht", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        // mParameterListView.setVisibility(View.GONE);\n        mParameterListView.setVisibility(View.GONE);\n\n        mParameterListAdapter = new EffectParameterListAdapter(activity, mEffects);\n        mParameterListView.setAdapter(mParameterListAdapter);\n\n        mImmersiveSensorNavigation = new ImmersiveSensorNavigation(glView);\n        mImmersiveTouchNavigation =", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    round_keys = (Variable(\"k0\", 8), Variable(\"k1\", 8))\n\n    @classmethod\n    def eval(cls, pt0, pt1):\n        return tuple([pt0 + pt1 + cls.round_keys[0", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "    private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private boolean mImmersiveSensorNavigationEnabled;\n    private boolean mImmersiveTouchNavigationEnabled;\n    private boolean mParameterListVisible;\n\n    public EffectManager(Activity activity, ViewGroup parameterListView, SpectaculumView spectaculumView) {\n", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    public void start() {\n        LOG.info(\"Starting processor\");\n        statusReporter.broadcast(new StatusMessage(StatusMessage.MessageType.STARTED_UP, \"\"));\n        for (int i = 0;", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务配置\n     */\n    private TaskProperties taskProperties;\n\n    /**\n     * 任务运行实例\n     */\n   ", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.path(), passphrase, args.checkFileIntegrity());\n\t\t\tif (problems.isEmpty()) {\n\t\t\t\tprint(\"No problems found.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprint(\"Found \" + problems.size() + \" problems:\");\n\t\t\tproblems.stream().sorted().forEach(problem ->", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "            //save the deviceId to storage\n            DatabaseManager.INSTANCE.setDeviceId(deviceId);\n            //save the regId to storage\n            DatabaseManager.INSTANCE.getGCMPreferences(activity).edit().putString(AbstractYasmeActivity.PROPERTY_REG_ID, regId).commit();\n            //save the app version to storage", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    when(mockDataStore.getSecurityKeys(ACCOUNT_NAME)).thenReturn(\n        ImmutableList.of(new SecurityKeyData(0L, null, KEY_HANDLE, USER_PUBLIC_KEY_ENROLL_HEX,\n            VENDOR_CERTIFICATE, 0)));\n    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            self.acctA = self.global_config['_radius_client']\n            self.acctA.do_acct([('User-Name', self.username), ('Calling-Station-Id', self.cli), ('Called-Station-Id', self.cld), \\\n              ('h323-conf-id', self.cGUID), ('call", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "    __typeid__ = 0x01\n    __header__ = EmbeddedSignatureHeader\n\n    def __init__(self, uri):\n        super(URI, self).__init__()\n        self.uri = uri\n\n    def __bytearray__(self):\n        return bytearray([len(self.uri)]) + bytearray(self.uri,", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "def convert_ast_constraint(ast_node):\n  if ast_node.kind == ast.AST_CONST:\n    return Const.fromValue(ast_node.data)\n  elif ast_node.kind == ast.AST_NAME:\n    return Ref.fromName(ast_node.data)\n  elif ast_node.kind == ast.AST_COMPARE:\n    return Comparator.fromOpcode(*", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity != null) {\n            activity.showVideo(args);\n        }\n    }\n\n    public static", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        Log.d(\"SettingActivity: \", \"postLocationInformation(): latitude: \" + latitude + \", longitude: \" + longitude);\n        // Post location to backend.\n        Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(BaseUrls.forkMeBackendApi)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "        for net_name, net in self.net.items():\n            ilp = InterLayerPipeline(net, self.batch_size, self.resource)\n            self.assertEqual(ilp.network, net)\n            self.assertEqual(ilp.batch_size, self.batch_size)\n            self.assertEqual(ilp.resource, self.resource)\n            self.assertEqual(ilp._", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "    def __init__(self, *args, **kwargs):\n        global init_called\n        init_called = True\n\n    class User(BaseModel):\n        id = Column(String, hash_key=True)\n        name = Column(String)\n        email = Column(String)\n\n    engine.bind()\n\n    user = engine.load(User, id", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "    for context.item in context.inner_focus_select(self[0]):\n    for result in self[1].select(copy(context)):\n        if not isinstance(result, (tuple, XPathNode)) and not hasattr(result, 'tag'):\n            yield result\nfrom ..xpath_nodes import XPathNode\nfrom ..xpath_token import XPathToken", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new HSBAdjustTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new RescaleTransformation(),\n                    new RGBAdjustTransformation(),\n                    new SolarizeTransformation(),\n                    new TritoneTransformation()\n            )),\n    COLOR_EFFECTS(\"Color Effects\",\n            Arrays.asList(\n                    new Equal", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "    private static final String TAG = MovieInfoFragment.class.getSimpleName();\n    @BindView(R.id.text_movie_title) TextView textMovieTitle;\n    @BindView(R.id.text_movie_description) TextView textMovieDescription;\n    @BindView(R.id.text_movie_rating) TextView textMovieRating;\n    @BindView(R.id.text_movie_runtime)", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                writeResponse(instance, CREATE_MBEAN, correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n            } catch (MBeanRegistrationException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n            } catch", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "wild.set_message(wild_report)\nwild.insert()\nwild.monitor_task = wild.create_task_tuple(wild.monitor_status())\n        return wild\n\n\n    @group(pass_context=True, category='Bot Info', aliases=[\"wild\"])\n    @channel_checks.wild_report_enabled()\n    async def cmd_wild(self, ctx, pokemon:", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    data = SNLIData(c['data_path'], vocab=vocab)\n    data.set_retrieval(Retrieval(c['dictionary_path'], vocab, c['retrieval_kwargs']))\n    data_stream = data.get_stream('train', c['batch_size'], seed=c['seed'])\n    valid_stream = data", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.speed0_mps == -C / float(GPS.L1CA.CENTER_FREQUENCY_HZ) * 100.\n ", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "                Intent intent = new Intent(getActivity(), RaffleActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n            } else if (raffle.isValid() && !isMan) {\n                Participant participant = raffle.getFort", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "                assert self.redlock.locked()\n        with self.assertRaises(TooManyExtensions):\n            self.redlock.extend()\n        self.redlock.release()\n\n    def test_extend_with_redis_errors(self):\n        assert not self.redis.exists(self.redlock.key)\n        with unittest.mock.patch.object(self.redis, 'set') as set_", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        return ConeSettings(self._ptr, \"Sound\")\n\n    @property\n    def threed_distance_filter(self):\n        \"\"\"The distance filter settings for this sound.\n\n        :type: DistanceFilter\n        \"\"\"\n        return DistanceFilter(self._ptr, \"Sound\")\n\n    @property\n    def threed_doppler", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "    @calg.register(CompressionAlgorithm)\n    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n\n    def __init__(self):\n        super(CompressedData, self).__init__()\n        self.calg = 0\n        self.data = bytearray()\n\n    def __byte", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        cellSize = findCellSize(imgshape, findCelSizeParameter = findCellSizeParameter, verbose = verbose, out = out, **parameter);\n        \n        #intensity of cells\n        cellIntensity = findCellIntensity(img2, imgshape, findCellIntensityParameter = findCellIntensityParameter, verbose =", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume / 100f);\n        } else if (accuracy == Accuracy.NICE) {\n            Assets.niceTapSound.play(Global", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "            while (transactionIterator.hasNext()) {\r\n                Transaction t = transactionIterator.next();\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private boolean checkDirectoryValid(File directory) {\r\n\r\n        if (!directory.exists()) {\r\n            System.err.println(\"Directory does", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                if (query.queryType == RequestType.GROUPBY) {\n                    Either<String, Tuple2<List<String>, List<String>>> dataSourceDescRes = coordinator.aboutDataSource(stmnt.dataSource, reqHeaders);\n                    if (dataSourceDescRes.isLeft()) {\n                        throw new Exception(\"Datasource info either not available (or)", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                    UsageEncryption.OSY,\n                    OperationMode.CBC,\n                    EncryptionAlgorithmCoded.TWOKEY3DES,\n                    algorithm_parameter_name=AlgorithmParameterName.KYE,\n                    algorithm_parameter_value=b'',\n                ),\n                key_name=KeyName(\n                    user_id=message.dialog.client.user_id,\n                    key_type=KeyType.V", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                            if (env.combExpCheck[i] != 0) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                }\n            } else {\n                env.numCombExpCheck = 0;\n            }\n        } // USE_CEC\n\n        if (Config.USE_BACKREF_WITH_LEVEL)", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),\n    url(r'^pipeline-job-template$', get_pipeline_job_template, name=\"ajax-pipeline-job-template\"),\n    url(r'^save-pipeline-config$', ajax_save_pipeline_config, name=\"ajax-save-pipeline-config\"),\n   ", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tString noData;\n\t\t\n\t\tResourceData (Resources res)\n\t\t{\n\t\t\tmeter = MeterSpec.getCounter (MainActivity.this, MeterSpec.T.APPLICATION, MeterSpec.AmountType.AVG_MONTH);\n\t\t\ttags = new EnumMap<SRSLevel, String> (SRSLevel.class);\n\t\t\tcolors =", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        if storage_type in STORAGE_TYPES:\n            self._storage_type = storage_type\n        else:\n            raise PyOrientBadMethodCallException(\n                storage_type + ' is not a valid storage type', []\n            )\n        return self\n\n\n#\n# DB CREATE\n#\n# Creates a database in the OrientDB Server", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public WhenApplyingOneArgument<$SystemUnderTest, $Argument> when(CheckedBiFunction<$SystemUnderTest, $Argument, ?> whenStep) {\n        preparation.getArgumentSuppliers().add(functions.toSupplier(whenStep));\n        return new WhenSteps<>(preparation);\n    }\n\n    @OverrideNext line", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    CommandResult result;\n    try {\n      result = process.await();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new IosDeviceException(RealDeviceImpl.this, e);\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(RealDeviceImpl", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\t// TODO Auto-generated method stub\n\t\tSharedPreferences options = PreferenceManager.getDefaultSharedPreferences(contextRef.get());\n\t\tint color = options.getInt(Keys.BAR_BACKGROUND, 0x22000000);\n\t\tif (options.getBoolean(Keys.INVERT_FONT_COLOR, false)) {\n\t\t\tcolor = Color.argb(255, ", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = XmlUtil.fromXml(Message.class, xml);\n\t\tAbstractEvent event = message.asEvent();\n\t\tif (event != null) {\n\t\t\treturn handleEvent(event);\n\t\t}\n\t\tReceivedTextMessage textMessage = message.asTextMessage();\n\t\tif (textMessage != null) {\n\t\t\treturn", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "    # 1. 检查该文件是否已经运行过，如果已经运行过则直接返回。\n    # 2. 如果没有运行过，则运行该 apk 文件，获取运行时特征并存储在 '该文件路径' +", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "        city = await ctx.city()\n        if city is None:\n            raise AccessDenied(\"This command is only available for raid report channels.\")\n\n        await ctx.send(f\"City has been set to {city}.\")\n\n    @command(pass_context=True, category='Bot Info', aliases=[\"raid-timezone\", \"rtz", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\"), date(2015, 11, 25))\n        self.assertEqual(date_string_to_date(\"11/12/2012\"), date(2012, 12, 11))\n        self.assertEqual(date_string_to_date(\"09/02/", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor(config_file, os.path.dirname(config_file))\n        config_actor.start()\n        gevent.sleep(1)\n\n        # startup session database\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.start()\n        gevent.sleep(1)\n\n        if honeypot", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                            ShareUtil.sharePicture(mActivity, picUrl, \"分享自煎蛋 \" + picUrl);\n                            break;\n                        case 1:\n                            FileUtil.savePicture(picUrl, mSaveFileCallBack);\n                            break;\n                        case 2:\n                            IntentHelper.toCommentListActivity(mActivity,", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\tsavemgh_v2(positive_data, position_array, \"pFWER_%s\" % opts.tmifile[0])\n\t\t\t\t\telif opts.outtype[i] == 'nii':\n\t\t\t\t\t\tsavenifti_v2(positive_data, position_array, \"pFWER_%s\" % opts", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                ResponseSyncAdapter.class,\n                InstallSurveyDependencies.class,\n                InstallSurveyDependenciesFragment.class,\n                InstallDependenciesDialog.class,\n                SurveyActivity.class,\n                SurveyPromptLoader.class,\n                PromptFragment.class,\n                OhmletActivity.class,\n                OhmletActivity.OhmletFragment.class,\n                HomeFragment.class,\n", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDH: ECDHCipherText,\n                PubKeyAlgorithm.ElGamal: ElGCipherText}\n\n        if self._pubalg in sigs:\n            self._sig = sigs[self._pubalg]()\n\n", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "    elif is_xpath_node(context.item):\n        yield context.item\nelementpath/xpath1/xpath1_parser.py\n@method('(', bp=80)\ndef nud_open_parenthesis(self):\n    self.parser.expected_name('expression', 'function', 'operator', 'symbol', 'let expression')\n    self[:]", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "      'no_members': Counter\n    }\n\n  class HeapNode(object):\n    \"\"\"A node in the heap.\"\"\"\n    def __init__(self, sink, load=0):\n      self.sink = sink\n      self.load = load\n      self.index = 0\n\n    def __lt__(self, other", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "        nc._send_message_with_protocol(OK(), protocol)\n        protocol.send_string.assert_called_once_with(\n            json.dumps(to_dict(OK())))\n\n    def test_send(self):\n        \"\"\"\n        Ensure the send method works as expected.\n        \"\"\"\n        nc = NetstringConnector(self.event_loop)\n        transport = mock.Magic", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);Next line of code:\n        assertTrue(\"is prepared\", qe instanceof PreparedExecution);Next line of code:\n        assertTrue(\"is batch prepared\", qe instanceof PreparedBatchExecution);Next line of code:\n        assertTrue(\"is callable\", qe instanceof", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionSuccessAndFail() {\n        StatementExecution se1 = new StatementExecution();\n        se1.setSuccess(true);\n\n        StatementExecution se2 = new", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "                continue\n            \n            # Send the ADR request\n            log.info(\"Sending ADR MAC Command\")\n            self._sendLinkADRRequest(device)\n            \n        self.adrprocessing = False\n        returnValue(None)\n        \n    def _createLinkADRRequest(self, device):\n        \"\"\"Create a LinkADRReq MAC Command", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        done, errors = return_queue.get(timeout=1)\n                        sum_errors +=", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#Addr_dict = {0:'Not present', 1:'Reserved', 2:'16-bit address', 3:'64-bit address'}\n#is not working with Python 2.6.6\n#it works with Python 2.7.2\n#so I have to use the previous one\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "        ObservableRegistry.getObservable(ChatSettingsActivity.class).register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getObservable(ChatSettingsActivity.class).remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\nfints/segments/base.py\nclass FinTS3SegmentMeta(type):\n    def __new__(mcs, name, bases, attrs):\n        cls = super().__new__(mcs, name, bases, attrs)\n\n        if", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "            time = self.img_handle.time\n\n        else:\n\n            # Get time from config\n            time = self.config.time\n\n        # Convert time to Julian date\n        jd = datetime2JD(time, UT_corr=self.config.UT_corr)\n\n        # Add time to JSON file\n        json_dict['time'] =", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "        refreshPublicRoomsList(false);\n    }\n\n    private void refreshPublicRoomsList(Boolean force) {\n        if (force || (null == mPublicRoomsListList)) {\n            Log.d(LOG_TAG, \"refreshPublicRoomsList\");\n\n            // get the public rooms list\n            Collection<MXSession> sessions = Matrix", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "        self.bingo_card_manager = BingoCardManager(self.dbi)\n        self.bingo_card_writer = BingoCardWriter()\n        self.bingo_data_generator = BingoDataGenerator()\n        self.global_config_cache = GlobalConfigCache(self.dbi, bot=self.bot)\n        self.guild_metadata = GuildMetadata\n        self.b", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n\n    #running iterations\n    logger.info(\"Running Ragout iterations\")\n    bp_graphs = {}\n    for stage in run_stages:\n        logger.info(\"Running stage '%s'\", stage.name)\n        bp_graphs[", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);\n    }\n\n    /**\n     * Reloads the plugin.\n     */\n    @Override\n", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);\n                }\n                stopGcmPush();\n                stopHwPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HwPush\":\n                if(shouldInit()) {\n                    HMSAgent", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(OBJECT_NAME));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectInstance>>(\n                SET_OBJECT_INSTANCE));\n        registry.put((byte) (REMOVE_NOTIFICATION_LIST", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "    private DefaultListModel<String> recent_files = new DefaultListModel<String>();\n    private DefaultListModel<String> recent_files2 = new DefaultListModel<String>();\n    private DefaultListModel<String> recent_files3 = new DefaultListModel<String>();\n    private DefaultListModel<String> recent_files4 = new DefaultListModel<String>();\n    private DefaultListModel<String", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "    private void createMetricChartPanel(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, false);\n        GCStatsChartPanel panel =\n                new MetricChartPanel(\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "        if (packet.getSubType() == PacketType.CONNECT) {\n            onConnect(packet, client, transport);\n        } else if (packet.getSubType() == PacketType.DISCONNECT) {\n            onDisconnect(packet, client, transport);\n        } else if (packet.getSubType() == PacketType.EVENT)", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "        lMS.addTrack(factory.createVideoSource(\n            VideoCapturer.create(appRtcClient.videoDeviceName()),\n            appRtcClient.videoConstraints()));\n      }\n      videoSource = lMS.videoTracks.getFirst().source;\n      videoSource.addRenderer(\n          VideoRenderer.createGui(0, 0, 100", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "            contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, -1L);\nlibrary/src/main/java/com/evernote/android/job/JobStorage.java\npublic static final String COLUMN_REQUIREMENTS = \"requirements\";\nlibrary/src/main/java/com/evernote/android/job/JobStorage.java\npublic static final String COLUMN_REQUIREMENTS_ENFOR", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreference preferenceDoubleTapEnable;\n    private CheckBoxPreference preferenceDoubleTapAllCards;\n    private CheckBoxPreference preferenceDoubleTapFoundationFirst;\n\n    private CheckBoxPreference preferenceShowAdvancedSettings;\n    private CheckBoxPreference preferenceHide", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "    # inject journal on system object\n    inject(obj, '_journal', DiskJournal(basedir, system_data_path))\n    obj._journal.setup()\n\n    # inject publisher on system object\n    inject(obj, '_publisher', Publisher([]))\n\n    # inject network on system object\n    inject(obj, '_network',", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "docker_config = self.setup_docker()\n\nclickable/commands/docker/docker_support.py\nclass DockerSupport(object):\n    def update(self, docker_config: DockerConfig):\n        pass\nclickable/commands/docker/docker_support.py\nclass DockerSupport(object):\n    def update(self, docker_config: DockerConfig):\n        pass\n\n", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "    List<Board> results = new ArrayList<>();\n\n    // load all boards in root folder\n    results.addAll(LoadFavoriteBoardsInFolder(\"\"));\n\n    // load all boards in sections\n    for (int i = 0; i < SectionNames.length; i++) {\n      String sectionName = SectionNames", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "        ObservableRegistry.getObservable(this.getClass()).register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getObservable(this.getClass()).remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view =", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t\t// create test class\r\n\t\tICompilationUnit testClass = model.getTestClass(true);\r\n\t\tCompilationUnit cu = GeneratorUtils.createASTRoot(testClass);\r\n\t\tASTRewrite rewrite = ASTRewrite.create(cu.getAST());\r\n\r\n\t\t// create test class body\r\n\t\trewrite.setAST(c", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "        self.simulator_data_client.add_simulator_data_listener(mock_simulator_data_listener)\n        self.simulator_data_client.datagramReceived(mock_simulator_data_datagram, (\"127.0.0.1\", 0))\n\n        self.assertTrue(mock_simulator_data_listener.simulator_data_received.called)\n        self.assertEqual(1", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "            showResponse = true;\n        } else {\n            showResponse = false;\n        }\n        showMessage();\n    }\n\n    public void setDiffHttpMessage(SentinelHttpMessage diffHttpMessage) {\n        this.diffHttpMessage = diffHttpMessage;\n        showMessage();\n    }\n\n    public void setLinkManager(ViewMessageLink", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "    assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", \"CREATING\", None),\n    (\"ACTIVE\", \"UPDATING\", None),\n    (\"ACTIVE\", \"DELETING\",", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "        self._header = ID3Header(fileobj)\nmutagen/id3/_util.py\nclass ID3UnsupportedVersionError(error, ValueError):\n    pass\nmutagen/id3/_util.py\nclass ID3NoHeaderError(error, ValueError):\n    pass\nmutagen/id3/_util.py\nclass error(M", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r\n\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * f0 -> BasicSearch() f1 -> ( Ord4Search() )?\r\n   */\r\n", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                    new EdgeTransformation(),\n                    new EmbossTransformation()\n                    )),\n    STYLIZATION(\"Stylization\",\n            Arrays.asList(\n                    new EqualizeTransformation()\n                    ));\n\n    private final String title;\n    private final List<Transformation> transformations;\n\n    TransformationCategory(String title, List<Transformation> transformations) {\n        this", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "            exception_class = self._decode_field( FIELD_STRING )\n            exception_message = self._decode_field( FIELD_STRING )\n\n            # Raise the exception\n            raise PyOrientCommandException(\n                exception_message.decode('utf-8'), [exception_class]\n            )\n\n        # decode message type\n        self._message_type", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "    api = BalancingData(args.apikey)\n\n    params = {\n        'FromSettlementDate': args.fromdate or date.today() - timedelta(days=1),\n        'ToSettlementDate': args.todate or args.fromdate or (date.today()) - timedelta(days=1)\n    }\n    if args", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if\n\t\t\titems.add( item );\n\t\t} // for\n\n\t\treturn items;\n\t} // convertToGalleryItems\n\n\t/**\n\t * Returns a list of gallery items that", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "        new TaskName()), StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_SLASHES), StaticString.WHITESPACE,\n        new Percentage(), StaticString.WHITESPACE,\n        StringWrapper.wrap(\"[\", new ProgressBar(50, BAR_EQUALS), \"]\"), StaticString.W", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static A a(Url href, Attribute... attributes) {\n\t\treturn new A(href, attributes);\n\t}\n*/\n}\nsrc/main/java/br/com/caelum/vraptor/html/tags/Th.java\npublic class Th implements Tag {\n\n\tprivate NestedElement[] children = new NestedElement[0];\n\tprivate final Attribute", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "        events.append(Event(e))\n        return events\npacket/VolumeSnapshot.py\nclass VolumeSnapshot:\n    def __init__(self, data, volume):\n        self.volume = volume\n        self.id = data.get(\"id\")\n        self.name = data.get(\"name\")\n        self.description = data.get(\"description\")\n", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "            Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:\n     * <pre> assertThat(ds.getBatchStatements(), batch(", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "        } else if (id == R.id.menu_save) {\r\n            if (mWallpaper == null) return;\r\n\r\n            WallpaperDownloader.prepare(this)\r\n                    .wallpaper(mWallpaper)\r\n                    .start();\r\n        } else if (id == R.id.menu_share) {\r\n            if (mWallpaper == null)", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "  private static final Map<Operator, Occur> opToOccur = new HashMap<Operator, Occur>();\r\n\r\n  static {\r\n    opToOccur.put(Operator.AND, Occur.MUST);\r\n    opToOccur.put(Operator.ANDNOT, Occur.MUST_NOT);\r\n    opTo", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.vcf:\n\t\t\tconverters=[GenotypeVCF(i) for i in args.study_name]\n\t\telse:\n\t\t\tconverters=[GenotypePLINK(i) for i in args.study_name]\n\n\t\tif args.genotype is None:\n\t\t\traise ValueError('Genotype data is not defined!')\n", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "        self.beginning_datetime = filenameToDatetime(vid_file)\n        self.beginning_datetime = datetime.datetime(2017, 6, 26, 2, 55, 20, 353000)\n        self.beginning_datetime = datetime.datetime(2017, 6, 26, 2", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "    p.update(p.pack_args(), ILMVALS)\n    ilm = ilms.LegendrePoly2P1D(order=(3,3,3), constval=1.9, category='ilm')\n    ilm.update(ilm.get_params(), ILMVALS)\n\n    # 3.", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);\n\t}\n\n\t@Override\n\tpublic String toString()\n\t{\n\t\treturn \"ModConfig\";\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj)\n\t{\n\t\treturn obj instanceof ModConfig;\n\t}\n\n\t@Override\n\tpublic int hashCode()\n\t{\n\t", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "        comments = Comment.objects.filter(post=post).filter(deleted=False).order_by('-created')\n        comment_form = self.form_class()\n        return render(request, self.template_name, {'post' : post, 'comments' : comments, 'comment_form' : comment_form})\n\nclass EditPost(LoginRequiredMixin, View):\n", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));\n\t\t\t\t\t}\n\t\t\t\t\telse if (selectedCells.size() > 1) {\n\t\t\t\t\t\tsetSelection(new MultiCellSelection(new ArrayList<>(selectedCells)));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsetSelection(new StructuredSelection());\n\t\t\t\t\t}\n\t\t\t\t\tfireSelectionChanged();\n", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "    @keyclass.register(RevocationKeyClass)\n    def keyclass_int(self, val):\n        self._keyclass = [val]\n\n    @keyclass.register(Fingerprint)\n    def keyclass_fingerprint(self, val):\n        self._keyclass = [RevocationKeyClass.Normal]\n        self.fingerprint", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "        if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            if self[1] is None or self[1].evaluate(context) == item.target:\n                yield item\n\n\n@method(function('comment', nargs=0, bp=79, label='kind test'))\ndef select", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "def getAS3PuffleString(client, puffles):\r\n    puffles_as3_str = list()\r\n    for puffle in puffles:\r\n        p_id, p_type, p_sub_type, p_name, p_adopt, p_food, \\\r\n        p_play, p_rest, p_clean, p_hat,", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "    S = exactpsf.ExactLineScanConfocalPSF()\n    state = states.ImageState([P, H, I, S], im)\n    state.set_tile(tile)\n    state.calculate_model()\n    return state.data()\n\ndef make_image_1():\n    P = objs.PlatonicSpheresCollection", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "            compile_info = run_mp(compile_information_func, jobs, self.log_directory)\n        else:\n            compile_info = run_non_mp(compile_information_func, jobs, self.log_directory)\n        self.unaligned_files = set()\n        self.too_short_files = set()\n        self.log_likelihood = 0\n       ", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "    platepar.rotation_from_horiz = ApplyAstrometry.rotationWrtHorizon(platepar)\nRMS/Astrometry/ApplyAstrometry.py\ndef rotationWrtHorizon(platepar):\n    \"\"\" Given the platepar, compute the rotation of the FOV with respect to the horizon.\n\n   ", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "        contentValues.put(JobStorage.COLUMN_END_MS, 70_000L);\n        contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, 50_000L);\n        contentValues.put(JobStorage.COLUMN_LAST_RUN, 40_000L);\n        contentValues.put(JobStorage.COLUMN_NUM_FAILURES, 3);\n        contentValues.put(JobStorage", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "        Toaster.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        Toaster.getInstance().remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        chatRem = inflater.inflate(R.layout.fragment_chat", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "        model = Progress\n        fields = ['component', 'area', 'year', 'fiscal_year', 'value']\ngoals/templatetags/goals_tags.py\nfrom django import template\nfrom django.utils.safestring import mark_safe\nfrom django.utils.html import escape\nfrom django.utils.translation import u", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "            fab.show();\n        }\n    }\n\n    @UiThread\n    protected void handleHistory(HistoryDirectory historyDirectory) {\n        if (historyDirectory == null) {\n            Toast.makeText(getContext(), R.string.error_network, Toast.LENGTH_SHORT).show();\n            Flow.get(getContext()).goBack();\n        } else {\n            this.history", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "        }).then(new Accept<Channel>() {\n            @Override\n            protected void doAccept(final Channel channel) throws Exception {\n                LOGGER.debug(\"Reconnected transport\");\n\n                context.tryChangeConnectionState(reconnecting, new ConnectedConnectionState(channel, true));\n            }\n        }).then(new OnFailure<Void>() {\n            @Override", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "                new RegisterFragment.RegistrationParam(success, email, password, message));\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/ui/fragments/LoginFragment.java\npublic class LoginFragment extends Fragment implements NotifiableFragment<LoginFragment.LoginParam> {\n\n    public static String inputMail", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "    private final SpatialOperator spatial = new SpatialOperator();\n    private final Distance distance = new Distance();\n    private final TimePriority time = new TimePriority();\n    private final Router<Road, RoadPoint> router = new Router<Road, RoadPoint>() {\n        @Override\n        public List<Road> route(R", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "    private List<FilterType> filterTypes;\n    private HashMap<String, List<FilterType>> filterTypeMap;\n    private List<FilterType> filterTypeList;\n    private List<FilterType> filterTypeList2;\n    private List<FilterType> filterTypeList3;\n    private List<Filter", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "        graphics.draw_colored_triangles(tris, fills)\n        g.unapply_shader(self)\n\n    def _render_solid_fill(self):\n        fill = self.style.fill\n        tris = self.triangles\n        self.svg.n_tris += len(tris) / 3\n        fills = [fill", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {\n\t\t\t\t\ta = new AppData();\n\t\t\t\t} else {\n\t\t\t\t\ta = new ShortcutData();\n\t\t\t\t}\n\t\t\t\ta.read(reader, data);\n\t\t\t\tapps.add(a);\n\t\t\t}\n\t\t} catch (FileNotFoundException e) {\n\t\t\t//Log.e(App", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow && ClipBoardAction.isShowInStatusBar) {\n                    isClipBoard", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "        self.beg_alt, self.end_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], self.lat, self.lon), \\\n            raDec2AltAz(self.ra_array[-1], self.dec_array[-1], self.jd_array[-1],", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void exitFunction(@NotNull FunctionContext ctx) {\n\t\tsuper.exitFunction(ctx);\n\t\tCollection<ParseTree>", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "    /**\n     * Called when the visitor reaches a {@link com.bazaarvoice.jless.ast.node.ArgumentsNode}.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean enter(ArgumentsNode node);\n\n    /**\n     * Called when the visitor reaches a {@link com.bazaarvoice.j", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "    private CodeGeneratorFactory codeGeneratorFactory;\n\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n        typeUtils = processingEnv.getTypeUtils();\n        elementUtils = processingEnv.getElementUtils();\n        messager = processingEnv.getMessager();\n        fileManagerFactory", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "        bind(GerritHttpAuthDataProvider.class);\n        bind(GerritCheckoutProvider.class);\n        bind(GerritPushExtension.class);\n        bind(GerritToolWindow.class);\n        bind(GerritRestModule.class);\n        bind(GerritUiModule.class);\n        bind(GerritActionsModule.class);\n", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                    if (getZxidFromName(snapshots.get(i).getName()) <= zxidLong) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n\r\n                if (snapFile == null) {\r\n                    System.err.println(\"No snapshot file found that precedes zxid", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "        if query_string:\n            query = self.parse_search_query(query_string)\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.is_unassigned()]\n        elif filter_type is FilterType.Income:\n            entries = [e for e in entries if e.is_income()]\n", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "        Int('marker', Type='uint16', Repr='hex'),\n        Int('length', Type='uint16', Repr='hex'),\n        Str('data', LenFunc=lambda l: l-2),\n        ]\n    def __init__(self, **kwargs):\n        Layer.__init__(self, **", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.just(new ArrayList<>());\n\t\t\t\t\t}\n\t\t\t\t\treturn Observable.zip(\n\t\t\t\t\t\t\tObservable.just(query),\n\t\t\t\t\t\t\tObservable.just(query),\n\t\t\t\t\t\t\tRxTuples.toPair())\n\t\t\t\t\t\t\t.flatMap(pair -> Observable.merge(\n\t\t\t\t\t\t\t\t\tObservable.just(pair),\n\t\t\t\t\t\t\t\t\tObservable.just(pair).delay(500, TimeUnit.MILLISECONDS),\n\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "    psf = exactpsf.ExactLineScanConfocalPSF(zscale=1.0, normalize=True)\n    sph = objs.ExactVolumeSphereCollection(pos=POS, rad=rad, param_prefix='sph',\n            category='obj', method='exact-gaussian-fast')\n    slb =", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)\n\n\ndef apply_or(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                    int position = RequestFragment.sSelectedRequests.get(i);\r\n                    Request request = mAdapter.getItem(position);\r\n                    if (request == null) continue;\r\n\r\n                    if (i > 0) stringBuilder.append(\"\\n\");\r\n                    stringBuilder.append(request.getName())\r\n                            .append(\" (\")\r\n                            .append(request.getActivity())\r\n                            .append(\"", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "            instance, (int, float, Decimal, datetime.datetime, datetime.date, datetime.time,\n                       Duration)\n        ) and not isinstance(instance, bool)\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return issubclass(sub", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "            return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'RubricsPage':\n            return RubricsPage()\n        if pageletId == 'RubricPage':\n            return RubricPage()\n       ", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "                if not checkFileExistence(pattern.get(\"datafile\")):\n                    errmsg += \"Pattern %s:  Data file %s does not exist.\\n\" % (pattern.get(\"name\"), pattern.get(\"datafile\"))\n                    rvalue = False\n\n            # 2.2 data file format\n            if", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\n    filter_class = ThemeFilter\n    ordering_fields = ('id', 'code',", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\nNext line of code:\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\nNext line of code:\n    private ContentItem", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\tgenerationService.setCleaningFolder(false);\n\t\tgenerationService.setParameters(null);\n\t\tgenerationService.setMetadata(null);\n\t\tgenerationService.setSpecificTreatment(null);\n\t\tgenerationService.setMapping(null);\n\t", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                        new ChangePasswordTask(user).execute(\"1\");\n                    }\n                });\n\n        // \"Cancel\" button to cancel the dialog\n        alert.setNegativeButton(R.string.cancel,\n                new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                        // Canceled.\n                    }\n                });\n\n        alert.show", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view(), login_url=LOGIN_URL),\n        name=\"package-new\"),\n    url(r'^view/(?P<package_name>[\\w\\-\\+]+)$', TranStatusPackage", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "peregrine/iqgen/bits/encoder_gps.py\nclass GPSL1L2BitEncoder(TwoBandsBitEncoder):\n  '''\n  Generic single bit encoder for GPS L1 C/A and L2 Civil signals\n  '''\n\n  def __init__(self, outputConfig):\n    '''\n    Constructs", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "    return tgAsDict[\"tiers\"][0][\"entryList\"]\n\n\nclass TestTextgrid(unittest.TestCase):\n    def setUp(self):\n        self.testDir = join(os.path.dirname(__file__), \"test_files\")\n        self.testTextgridFN = join(self.testDir, \"test_textgrid.TextGrid\")\n        self", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        num_utterances = return_queue.get(timeout=1)\n                        if stopped.stop_check():\n                            continue\n                    except Empty:\n                        for", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "        dataset = UAV123(root_dir, version=version)\n        self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NfS')\n        for fps in [30, 240]:\n            dataset = NfS(root_dir, fps=fps", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "    <T> T get(FixTag tag, Class<T> type);\n    <T> T get(FixTag tag, Class<T> type, T defaultValue);\n    <T> T get(FixTag tag, Class<T> type, Supplier<T> defaultValue);\n    <T> T get(Fix", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "            yield chunk_idx, bounds\n\n    def iter_data(self, data):\n        \"\"\"Iterate over chunks of data.\"\"\"\n        for chunk_idx, bounds in self.iter_chunks(data.shape[0]):\n            (s_start, s_end, keep_start, keep_end) = bounds\n            chunk = data_chunk(data, chunk", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tresult.setQueryNode(AlvisIRAnyQueryNode.INSTANCE);\n\t\t\tresult.addExplanation(new AnyMatchExplanation(anyQueryNode.getField()));\n\t\t\treturn result;\n\t\t}\n", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\tprivate Validator validator;\n\t\n\tprivate FolderCleaner folderCleaner;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t\t", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "        registry.put((byte) (ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Attribute>(ATTRIBUTE));\n        registry.put((byte) (ATTRIBUTE_LIST ^ RESPONSE_MASK), new MarshalledResponseHandler<AttributeList>(ATTRIBUTE_LIST));\n        registry.put((byte) (BOOLEAN ^ RESPONSE_MASK), new MarshalledResponseHandler", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                        Result res = lp.detectLanguage(content, lang);\n                        if (res != null && res.isReliable && res.languageCode.equals(lang)) {\n                            FileSaver fs = new FileSaver(content, res.languageCode, \"twitter\", url, tweet.getId());\n                            String filename = fs.save(logDb);\n                           ", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n            if descriptor.operator_code == 201:\n                lines.append('{}nbits offset'.format(indent + INDENT_CHARS))\n            elif descriptor.operator_code == 202:\n                lines.append('{}scale offset'.format(indent + INDENT_CHARS", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "        help=\"\"\"network delay time [milliseconds].\n        the minimum delay time is 0ms.\n        e.g. tcset eth0 --delay 100ms\n        \"\"\".format(\n            _get_unit_help_msg()\n        ),\n    )\n    group.add_argument(\n        \"--delay-distro\",\n        dest=\"latency", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "        return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        try:\n            return self.get_contacts().get()\n        except MultipleObjectsReturned:\n            logging.error(\"Multiple contacts returned for phone number: %s\" % self.phone_number)\n            return self.get_contacts().first()\n\n    @property", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "    pipeline.apply(\"Read live projects\", Read.from(LiveProjectSource.of(org)));\n\n    // Convert projects to GCPResourceState objects.\n    PCollectionTuple liveStatesTuple = liveProjects.apply(\n        ParDo.named(\"Convert live projects to Java objects\")\n            .of(new ExtractState(errorTag))\n            .with", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "        self.rule = DetectSoft404()\n\n    def test_get_pattern(self):\n        self.assertEqual(self.rule.get_pattern(\"http://example.com/\"), \"/\")\n        self.assertEqual(self.rule.get_pattern(\"http://example.com/abc\"), \"/abc/\")\n        self.assertEqual(self.rule.get_pattern(\"http://example.com/abc/", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ffibuilderRX.compile(tmpdir=cls.tmpdirnameRX.name, verbose=VERBOSE)\n        spec", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "    conditions.append(AndCondition())\n    conditions.append(AndCondition(Condition(), Condition()))\n    conditions.append(AndCondition(Condition(), Condition(), Condition()))\n    conditions.append(AndCondition(Condition(), AndCondition(Condition(), Condition())))\n    conditions.append(AndCondition(Condition(), AndCondition(Condition(), Condition()), Condition", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "        assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 0\n        assert get_square_idx(0, 2) == 0\n        assert get_square_idx(1, 0) == 0\n        assert get_square", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "    private final IJavaProject testProject;\n\n    private final IJavaProject baseProject;\n\n    private final IType testType;\n\n    private final IType baseType;\n\n    private final GeneratorModel model;\n\n    private final GeneratorWizardMainPage page;\n\n    private final HashMap<IMethod, Method> methodMap = new HashMap", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "self.next_sink = next_provider.CreateSink(global_properties)\n<|file_sep|>import os\nimport sys\nimport time\nimport random\nimport string\nimport subprocess\nimport threading\nimport multiprocessing\nimport signal\nimport logging\nimport traceback\nimport json\nimport re\nimport requests\nimport psutil\nimport", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate static final int MAX_CHUNKS_PER_PAGE = 1000;\n\tprivate static final int MAX_CHUNKS_PER_PAGE = 1000;\n\tprivate static final int MAX_CHUNKS_PER_PAGE = 1000;\n\tprivate static final int MAX_CHUNKS_PER_PAGE = 1000;\n\tprivate static final int MAX_CHUNKS_PER", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "      () -> Optional.of(input).filter(Files::isDirectory).map(path -> FileHelper.walkIfNecessary(List.of(path), pathFilenameEndsWith(\".java\"))).orElse(List.of(input)));\n    var exitCode = javadocTool.run(cmdLine.toArguments(), files.toArray(new File[0]));\n    if", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)\n\n    def enviar_dados_venda(self, dados_venda, *args, **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.enviar_dados_venda`.\n\n        :return", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "    if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace2_event_log)\n    else:\n      git_trace2_event_log.Write()\n\n    # If we are running in a mirror, we need to make sure that we are\n    # running in the mirror's root directory", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "    Prefs providePrefs(SharedPreferences prefs) {\n        return new Prefs(prefs);\n    }\n\n    @Provides @Singleton\n    PersistentData providePersistentData(Application app) {\n        return new PersistentData(app);\n    }\n\n    @Provides @Singleton\n    Gson provideGson() {\n        return new Gson();\n   ", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "        assertThat(ds).hasTotalQueryCount(5);\n    }\n\n    @Test\n    public void testTotalCountWithBatch() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution());  // select\n        queryExecutions.add(getMockSelectQuery", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "        return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckOutCommand()\n", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "        verifiers.put(VerifierTableModel.COLUMN_GENERATES_ERRORS, new ValidSchemaNameVerifierImpl());\n        verifiers.put(VerifierTableModel.COLUMN_ACTIVATED, new LocalFilesExistVerifierImpl());\n        verifiers.put(VerifierTableModel.COLUMN_GENERATES_ERRORS, new RemoteFilesExistVerifierImpl());\n    }\n\n    private void createBatchListeners", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "            showProgress(false);\n            Toaster.getInstance().toast(R.string.error_login, Toast.LENGTH_LONG);\n        }\n    }\n\n    public void onPostRegisterExecute(Boolean success) {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n\n        if (success) {\n            Log.d(getClass().getSimpleName", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (invokes the drupal Service user.login)\n     *\n     * @param username the user's username\n     * @param password the user's plaintext password\n", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "        lexmsg = lexMessage(text)\n        self.textArea.addMessage(lexmsg, self.chum)\n        self.textInput.clear()\n        self.textArea.setFocus()\n        self.textArea.verticalScrollBar().setValue(self.textArea.verticalScrollBar().maximum())\n        self.textInput.setFocus()\n        self.parent().testquirksChanged", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "            (r'/login', LogInHandler),\n            (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem/([^/]+)/([^/]+)', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/problemlist', Problem", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAnd", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "                throw new ProtTestInternalException(\"Unknown criterion\");\n        }\n\n        return new SelectionChunk(informationCriterion);\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade.ProtTestFacade#computeInformationCriterion(pal.alignment.Alignment, es.uvigo.darwin", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "    return Pair(e1, e2, t.Pi(ty1, ty2))\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn an expression of type Sigma into\n    its first component.\n    \n    Arguments:\n    - `expr`: an expression\n    \"\"\"\n    ty, _ = typing", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "    void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(PlaybackService playbackService);\n    void inject(DemoSamplesInstallerService demoSamplesInstallerService);\n    void inject(DemoSamplesInstaller demoSamplesInstaller);\n    void inject(KioskModeHandler kioskModeHandler);\n    void inject(AnalyticsTracker analyticsTracker", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "    private List<SliceValue> slices = new ArrayList<>();\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_chart_category, container, false);\n\n        chart = (PieChartView) view.findViewById", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "    response = Response()\n    with pytest.raises(ResponseValidationError):\n        prepare_body(response)\n    assert response.content_type is None\n\n\ndef test_response_content_type_json():\n    response = Response()\n    response.content_type = 'application/json'\n    assert prepare_body(response) == {}\n\n\ndef test_response_content_type_non_json():\n    response", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t@Override\n\tpublic void enterCommandChain(ConsoleCommandParser.CommandChainContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\nNext line of code:\n\t@Override\n\tpublic void exitCommandChain(ConsoleCommandParser.CommandChainContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\nNext line of", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "                except TextGridParseError as e:\n                    self.return_dict[\"textgrid_error_files\"].append(e)\n                except Exception as e:\n                    exc_type, exc_value, exc_traceback = sys.exc_info()\n                    self.return_dict[\"unknown_error_files\"].append(\n                        (\n                            file_name,\n                            wav_path,\n", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "        AccelerometerResource,\n        \"/aircraft/sensors/accelerometer\",\n        resource_class_args=(sensors.accelerometer,)\n    )\n\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueFPS())\nhuginn/instruments.py\nclass Instruments(object):\n    \"\"\"The Instruments class contains the instances of the aircraft's\n    instruments\"\"\"\n    def __init__(self, fdmexec):\n        self.fdmexec =", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "    CMD_OPTION_SUMMARY_HELP_LINE,\n    CMD_OPTION_HELP_HELP_LINE,\n]\n\nINSTANCE_ASSOCIATORS_HELP_INSTANCENAME_LINES = [\n    'An instance path is specified using the INSTANCENAME argument',\n    '1. By specifying the instance path as an untyped WBEM URI',\n    '2. By specifying", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t/**\n\t * 后台主页\n\t * @param mv\n\t * @return\n\t */\n\t@RequestMapping(value=\"/manage\",method=RequestMethod.GET)\n\tpublic ModelAndView manage(ModelAndView mv) {\n\t\tSubject currentUser = SecurityUtils.getSubject();\n\t\tUsers userobj", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                            MessageHelper.showError(project, t);\n                        }\n                        else if(exceptionClass.equals(InvalidOperationException.class)){\n                            MessageHelper.showError(project, t);\n                        }\n                        else if(exceptionClass.equals(SdkClientException.class)){\n                            MessageHelper.showError(project, t);\n                        }\n                        else{\n                            MessageHelper.showCriticalError(project, t", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                       join_keyword=hindi_remind())\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow for sign up + cancel in Gujarati...\")\n        self.run_e2e_flow_for_language(language=\"Gujarati\",\n                                       person_name=u", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationListener locationListener;\n  protected Location lastLocation;\n  protected boolean locationUpdatesEnabled = true;\n  protected boolean locationUpdatesActive = false;\n  protected boolean locationUpdatesPassive = false;\n  protected boolean locationUpdatesProviderDisabled = false;\n  protected", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "refresh_avd(adb, os.path.join(BASE_DIR, 'DynamicAnalyzer', 'tools', 'android', 'avd'), 'MobSF', 'MobSF', 'emulator')\n    print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android Emulator\"\n    refresh_avd(adb, os", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRCHeader(Layer):\n    constructorList = [\n        Bit('message_type', Pt=0, BitLen=8, Dict=GSM_RR_dict, Repr='hum'),\n        Bit('message_reference', Pt=0, BitLen=8),\n        Bit('criticality', Pt=0,", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tadjacency_lh = create_adjac_vertex(v_lh,faces_lh)\n\t\t\tadjacency_rh = create_adjac_vertex(v_rh,faces_rh)\n\t\t\tadjacency = np.array([adjacency_lh, adjacency_rh])\n\t\t\tadjacency = np.array([adj", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "        throw new QueryGrammarException(\"Cannot apply \" + exp.getOperator()\n            + \" operation on a null value.\");\n    } else {\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(C", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "        CacheList list = new CacheList();\n        list.setName(listName);\n        cacheService.storeCacheList(list);\n        sessionContext.setData(CACHE_LIST, list);\n        loadListsFromDBService.restart();\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final Cache", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "s = s[:-2] + '>'\nreturn s\nlibmich/core/element.py\nclass Str(Element):\n    '''\n    class defining a standard Element, \n    managed like a stream of byte(s), or string.\n    It is always byte-aligned (in term of length, at least)\n    \n    attributes", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                        new TimeEntryOvertimeAggregation()));\n\n        user.setOptions(userSession.getUser().getManagedUsers());\n        user.setValue(userSession.getUser());\n\n        groupsDl.setQuery(\"select g from sec$Group g where g.parent is null\");\n        groupsDl.load();\n\n        projectsDl.setQuery(\"select p from", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "            (True, PubKeyAlgorithm.ElGamal): ElGPub,\n            (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (True", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                            self._expansion_num, ExpansionInfo.BOARDTYPE)\n\n    @property\n    def mux_ad_chan1(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                            self._expansion_num, ExpansionInfo.MUX_AD_CHAN1)\n\n    @property\n    def", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "        self.key_size = read_u16le(f)\naaf2/utils.py\ndef read_s64le(f):\n    (result, ) = unpack(b\"<q\", f.read(8))\n    return result\naaf2/utils.py\ndef read_u32be(f):\n    (result, ) = unpack", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "            user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Invitation to join {}'.format(site.name))\n            template = 'accounts/emails/invitation_email.html'\n            url = request.build_absolute_uri(reverse('accounts:activate',\n                                                     args=[user.activation_key]))\n            comments", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "await Utilities.message(ctx.channel, f\"**{pokemon}** details {pokemon.to_dict}\")\n\nshould be:\nawait Utilities.message(ctx.channel, f\"**{pokemon}** details {pokemon.to_dict()}\")\nclembot/core/bot.py\nclass Clembot(commands.Bot):\n\n    def __init__(self,", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "            ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_CEX:\n            ex = Cex('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_BITTREX:\n            ex = Bittrex('BTC-BCC", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "            if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        if context.item is not None:\n            yield context.item\n\n    else:\n        # XSD typed selection\n        if context.item is not None:\n            context.item = self", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "    helpTestData(0, 10);\n    helpTestData(1, 10);\n    helpTestData(9, 10);\n    helpTestData(10, 10);\n    helpTestData(11, 10);\n    helpTestData(20, 10);\n  }\n  \n ", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t\tProperties properties = new Properties();\n\t\t\tNamedNodeMap attributes = elt.getAttributes();\n\t\t\tfor (int i = 0; i < attributes.getLength(); ++i) {\n\t\t\t\tAttr attr = (Attr) attributes.item(i", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                    MiPushClient.registerPush(getApplicationContext(), mi_APP_ID, mi_APP_KEY);\n                    Log.e(MYTAG, \"使用小米推送\");\n                }\n                break;\n            case \"HuaweiPush\":\n                if(shouldInit()) {\n                    HMSAgent.init(getApplicationContext());\n                    HMSAgent.connect(this, new ConnectHandler", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "    private final KadConfiguration config;\n    private int connectAttempts = 0;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.bootstrapNode = bootstrapNode;\n", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "                tablefmt = 'plain'\n\n            output.append(tabulate(rows, headers, tablefmt=tablefmt,\n                                   numalign=numalign, stralign=stralign,\n                                   missingval='NULL'))\n    if status:\n        output.append(status)\n\n    return '\\n'.join(output)\n\n\nclass VCli(object):\n    def __", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "    return words_api(wordnik_api, token)\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@InjectNext line of code:\n\tprivate ConnectorIssues connectorIssues;\n\t\n\t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tctx = this;\n\t\ttaskListByJQLACtivity = this;\n\t\tsetContentView(R.layout.tasklistbyjqlactivitylayout);\n\t", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "        self.assertIsInstance(handle, HANDLE)\n\n    def test_create_event_invalid_handle(self):\n        with self.assertRaises(WindowsAPIError) as context:\n            CreateEvent(bManualReset=False, bInitialState=False, lpName=\"\")\n\n        self.assertEqual(context.exception.errno, events.ERROR_INVALID_NAME)\n\n    def test_create_event_invalid_handle", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                    return roundEnv.getElementsAnnotatedWith(annotation)\n                            .stream()\n                            .map(element -> {\n                                currentAnnotatedElement.set(element);\n                                return parserHolder.getParser().parse(element);\n                            });\n                })\n                .collect(Collectors.toList());\n        if (!parsedPaths.isEmpty()) {\n            LOG.debug(\"Parsed paths: {}\",", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "    protected PageParser pageParser;\n\n    protected ExecutorService executorService;\n\n    protected CountDownLatch latch;\n\n    protected ReentrantLock lock = new ReentrantLock();\n\n    protected Condition condition = lock.newCondition();\n\n    protected AtomicInteger runningThreadCount = new AtomicInteger(0);\n\n    protected AtomicReference<Throwable> exception = new Atomic", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "            actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n        }\n\n        PopupHandler.installPopupHandler(editTableView, actionPopupGroup, \"POPUP\", ActionManager.getInstance());\n    }\n\n    private Document buildMongoDocument", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "    private GuiButton next;\n    private GuiButton prev;\n    private GuiButton add;\n    private GuiButton remove;\n    private GuiButton forget;\n    private GuiButton select;\n    private GuiButton save;\n    private GuiButton close;\n    private GuiText name;\n    private GuiText alias;\n    private GuiText", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClearAllNotifications();\n            case ConstantStr.FUNC_CLEAR_MEM_CODE:\n                return new BtnClearBackground();\n            case ConstantStr.F", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "        form.setText(Messages.configurationEditorWebModulesPageTitle);\r\n        form.getBody().setLayout(new GridLayout(1, false));\r\n\r\n        Section section = toolkit.createSection(form.getBody(), ExpandableComposite.TITLE_BAR);\r\n        section.setText(Messages.configurationEditorWebModulesSection);\r\n        section.setDescription(Messages.configurationEditorWebModulesDescription);\r\n        section.setLayoutData", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "        type = Type()\n        type.name = \"foo\"\n        type.item = Object.factory(\"string\", None)\n        type.item.name = \"bar\"\n\n        self.assertEqual(\"bar\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\n        type = Type()\n        type.name = \"foo", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "        if _cluster_type not in CLUSTER_TYPES:\n            raise PyOrientBadMethodCallException(\n                _cluster_type + ' is not a valid data cluster type', []\n            )\n        self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n       ", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "    (primary_blog,) = [blog for blog in userinfo['blogs'] if blog.get('primary', False)]\n    display_name = primary_blog.get('title', username)\n    if person is None:\n        tumblr_avatar_url = 'http://api.tumblr.com/v2/blog/%s.tumblr.com/avatar/64", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t}\n\n\t\t\t\tif(fcpMessage == null) {\n\t\t\t\t\tLogger.minor(this, \"Message inserted\");\n\t\t\t\t\treturn true;\n\t\t\t\t} else if(fcpMessage.errorcode == FCPPutFailedException.COLLISION) {\n\t\t\t\t\tLogger.minor(this, \"Collision while inserting message, trying again\");\n\t\t\t\t\tcontinue", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "  0: LOAD_FAST                0 (self)\n  1: LOAD_ATTR                0 (name)\n  2: LOAD_FAST                1 (value)\n  3: STORE_ATTR               0 (name)\n  4: LOAD_CONST               0 (None)\n  5:", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "    CreditPeriod activeCreditPeriod = null;\n    List<CreditPeriod> creditPeriods = null;\n    List<DailyExpense> dailyExpenses = null;\n    List<ExpenseCategory> expenseCategories = null;\n    BigDecimal totalExpenses = BigDecimal.ZERO;\n    BigDecimal totalExpensesByCategory = null;\n   ", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\nPLATFORM_CHOICES = tuple([(slug, slug)\n                          for slug in all_platform_slugs])\n\nclass LanguageAdmin(admin.ModelAdmin):\n    list_display = ('locale_id', 'lang_name', 'locale_alias", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "app/src/main/java/com/ratebeer/android/gui/activities/MainActivity.java\nprivate void openCustomList(CustomListWithCount customList) {\n\tstartActivity(CustomListActivity.start(this, customList._id));\n}\napp/src/main/java/com/ratebeer/android/gui/activities/MainActivity.java\nprivate void openCustom", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "        self.__parser = self.__detect_parser(ping_result.stdout)\n\n    def parse(self, ping_result: PingResult) -> PingStats:\n        \"\"\"\n        Parse ping command output.\n\n        Args:\n            ping_result (PingResult):\n                Ping command execution result.\n\n        Returns:\n            PingStats:\n                Ping statistics.\n\n", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "            Log.e(this.getClass().getSimpleName(), \"Chat not found in DB\");\r\n            throw new ExceptionInInitializerError(\"Chat not found in DB\");\r\n        }\r\n\r\n        // Restore latest message on display\r\n        if (savedInstanceState != null) {\r\n            latestMessageOnDisplay.set(savedInstanceState.getLong(RESTORE_LATEST_MESSAGE_ON_DISPLAY", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t\tpublic Cubeshaft() {\n\t\t\ttry {\n\t\t\t\tDisplay.setDisplayMode(new DisplayMode(800, 600));\n\t\t\t\tDisplay.create();\n\t\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\t\tDisplay.setTitle(\"Cubeshaft\");\n\t\t\t\tDisplay.setIcon(new java.awt.Image(\n\t\t\t\t\t\tnew FileInputStream(\"res/icon.png", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "    account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string.letters + string.digits) for i in range(20))\n            while", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "        assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n\n        assertThat(qe, isCallable());\n        assertThat(qe, callable());\n        assertThat(qe, is(batchCallable()));\n        assertThat(qe, batchCallable());\n\n        assertThat(qe, isPrepared());\n        assertThat(qe, prepared", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "    } else if (Utils.getXmlNodeValue(doc, TAG_TOTAL_BYTES) != null) {\n      log(\"server response is: totalBytes \" + serverMessage.getUploadedFileNames(), null);\n      return;\n    } else if (Utils.getXmlNodeValue(doc, TAG_CURRENT_BYTES) != null) {\n      log(\"", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "    merged_assembly_points_by_sources = {}\n    for source, aps in assembly_points_by_sources.items():\n        merged_assembly_points_by_sources[source] = merge_assembly_points(assembly_points_by_source=aps)\n    merged_assembly_points = [merged_ap for aps in merged_assembly_points_by_sources.values", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n   ", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @group(pass_context=True, category='Bot Info', aliases=[\"global\"])\n    @is_guild_admin()\n    async def cmd_global_config", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.isInstalled()) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!gd.isOnline()) {\n\t\t\t\t\t\tgd.showAlert(getString(R.string.error), getString(R.string.e_no_network_connection), null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!gd.isExternalStorageWritable()) {\n\t\t\t\t\t\tgd.showAlert(getString", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "    private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /** Defines the first visible day of the week. */\n    private int firstVisibleDayOfWeek = 1;\n\n    /** Defines the last visible day of the week. */\n    private int lastVisibleDayOfWeek = 7;\n\n    /** Defines the first visible hour of the", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n    }\n\n    @Override\n    public Stemcells stemcells() {\n        return", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "    new DefaultPublicKeyLocator(\n        new IdentityServerDescriptorProvider(),\n        new JsonServerInfo.ServerInfoResolver() {\n          @Override\n          public JsonServerInfo resolve(URI serverDescriptor) {\n            return JsonServerInfo.getDocument(SERVER_INFO_DOCUMENT);\n          }\n        });\n\n    locators = new VerifierProviders();\n   ", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n\n", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                } catch (FilesNotFoundException fnfe) {\n                    // Expected\n                }\n            }\n\t\t\t\n\t\t\tfor(int i=0; i < 5; ++i) \n\t\t\t\tclient.deleteObject(containerName, names[i]);\n\t\t\t\n\t\t\tassertTrue(client.deleteContainer(containerName));\n\t\t} catch (Exception e) {\n\t\t", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                    trackHistoryEntry = new TrackHistoryEntry();\n                    trackHistoryEntry.stationUuid = currentStation.StationUuid;\n                    trackHistoryEntry.stationIconUrl = currentStation.IconUrl;\n                    trackHistoryEntry.track = liveInfo.getTrack();\n                    trackHistoryEntry.artist = liveInfo.getArtist();\n                    trackHistoryEntry.title =", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "DrawerLayout.DrawerListener, ProjectsFragmentListener, QueuesFragmentListener, StashesFragmentListener, FavoritesFragmentListener, PatternFragmentListener, StashFragmentListener, QueuedProjectFragmentListener, ProjectFragmentListener {\n\n    @ViewById(R.id.drawer_layout)\n    DrawerLayout drawerLayout;\n\n    @ViewById(R.id.drawer_list", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private class IconViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\r\n\r\n        private final ImageView icon;\r\n        private final TextView title;\r\n        private final LinearLayout container;\r\n\r\n        IconViewHolder(View itemView) {\r\n            super(itemView);\r\n            container = itemView.findViewById(R.id.container);\r\n            icon = itemView.findViewById(R", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING, Default.ENCODING)\n\n    convert_configs = load_convert_config(\n        logger, ctx.obj[Context.CONVERT_CONFIG], subcommand=\"url\"\n    )\n\n    max_workers = ctx.obj.get(Context.MAX_WORKERS)\n    con, is_create_db = create_database", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "        return _item.playlistItemID\n        return _item.playlistItemID\n        return _item.playlistItemID\n        return _item.playlistItemID\n        return _item.playlistItemID\n        return _item.playlistItemID\n        return _item.playlistItemID\n        return _item.playlistItemID\n", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "        self.assertRaises(\n            InputError,\n            _environment_to_string,\n            [(u\"key\", u\"value\"), (42, u\"value\")])\n\n    def test_type_check_for_environment_value(self):\n        self.assertRaises(\n            InputError,\n            _environment_to_string,\n            [(u\"key\", u\"value\"), (", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "    if isinstance(cmd, GitcAvailableCommand) and not cmd.manifest.IsGitc:\n      print(\"fatal: '%s' requires a GITC client\" % name, file=sys.stderr)\n      return 1\n```\n\n## Your task: \nPlease modify the code to include a new command class `Git", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "            } catch (TaskDataException e) {\n                taskData.setState(TaskData.STATE_FAIL_DATA);\n                taskData.setErrorInfo(e.getMessage());\n                log.error(\"TaskRunnerContainer.process()任务数据异常:{}\", e.getMessage());\n            } catch (TaskPartnerException e) {\n                taskData.setState(TaskData.STATE_FAIL_PART", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "        entry = Entry.create(\"http://example.com\")\n        await r.after_headers(entry)\n\n    @async_test()\n    async def test_reject_404(self):\n        r = RejectStatusCode(404)\nNext line of code:\n        entry = Entry.create(\"http://example.com\", response=StaticResponse(404))\n", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "        //保存用户的学号和姓名\n        BaseInfoDao dao = new BaseInfoDao(mContext);\n        dao.add(\"stuXH\", stuXH);\n        dao.add(\"stuName\", stuName);\n        //保存用户的登录url\n        String url = \"http://210.44.159", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "        Qdisc.attach(self.__con)\n        Qdisc.create()\n        self.__device = device\n        self.__ifb_device = None\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__export_path = export_path", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "            state[\"inventory\"] = [mudobj_ref(item) for item in inv]\n        except AttributeError:\n            pass\n\n    def add_livings_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            livings = obj.livings     # type:", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.tokenImage.substring(0, 1));\r\n    } else {\r\n", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t}\n\n\tpublic ParameterizedGenerationService(boolean cleaningFolder) {\n\t\tthis.pipelineGenerator = new PipeLineGeneratorImpl();\n\t\tthis.valorizatorParameters = new ValorizatorParametersImpl();\n\t\tthis.validator = new ValidatorImpl();\n\t", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "        try {\r\n            decoder = (DataDecoder) Class.forName(dataDecoder).newInstance();\r\n        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException ex) {\r\n            System.err.println(\"Error while creating data decoder\");\r\n            exit(1);\r\n        }\r\n        DataNodePrinter dnp = new DataNodePrinter(print, decoder);\r\n\r\n        if", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "            self.params[\"root_dispersion\"] = self.root_dispersion\n        except UncertainTimeError:\n            log.error(\"We can't tell how accurate your clock is.  Switzerland won't work.\")\n            sys.exit(1)\n        except:\n            log.error(\"Weird but possibly non-fatal error:\\n", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "        cursorById.close();\n\n        // Test the content provider query with a selection\n        where = new MovieSelection();\n        where.id(movieRowId);\n        cursorById = mContext.getContentResolver().query(MovieColumns.CONTENT_URI,null,where.sel(),where.args(),null);\n        DataTestUtilities.validateMovieCursor(\"query by", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n   ", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "        self.assertIsNone(node_children('a text node'))\n\n    def test_node_nilled_function(self):\n        self.assertIsNone(node_nilled(self.elem))\n        self.assertIsNone(node_nilled('a text node'))\n\n        xml_test = '<A xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.map_view);\r\n\t\tdataProvider = DataProvider.getDataProvider(this);\r\n\t\tlocationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE),", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "ConfigCommandProcessor(\nConfigVlanCommandProcessor(self.logger),\nConfigVRFCommandProcessor(self.logger),\nConfigInterfaceCommandProcessor(self.logger)\n)\n)\nfake_switches/cisco/switch_core.py\nfrom fake_switches.cisco import cisco2960\nfrom fake_switches.cisco import cisco3560\nfrom", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "  assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutputConfig2():\n  '''\n  Output configuration selection test", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\nsatcfe/cliente.py\nclass ClienteSATLocal(FuncoesSAT):\n    \"\"\"Implementação de :class:`FuncoesSAT` que utiliza a biblioteca SAT\n    localizada no mesmo diretório que o aplic", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    # TODO: better reference state handling\n    # TODO: model exclusions handling\n    # TODO: better reference state handling\n    # TODO: model exclusions handling\n    # TODO: better reference state handling\n", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "api.add_resource(ForcesResource, \"/fdm/forces\",\n                 resource_class_args=(fdm.fdmexec,))\nhuginn/rest.py\nclass WaypointResource(Resource):\n    \"\"\"The WaypointResource is used to ad, delete and update waypoints\"\"\"\n    def __init__(self, db):\n        self", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "    def load_corpus_information(self) -> None:\n        \"\"\"Load information from the temporary directory\"\"\"\n        self._load_speakers()\n        self._load_files()\n        self._load_utterances()\n        self._load_corpus_info()\n\n    def _load_speakers(self):\n        \"\"\"Load speaker information from the", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "    private static final String[] PERMISSIONS = {Manifest.permission.CAMERA};\n\n    private CameraSource mCameraSource = null;\n    private CameraSourcePreview mPreview;\n    private GraphicOverlay<OcrGraphic> mGraphicOverlay;\n    private OcrDetectorProcessor mDetectorProcessor;\n    private boolean mFlashSupported = false;\n", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static Logger getLogger() {\n\t\treturn LogUtil.getLogger();\n\t}\n\n\tpublic static Logger getLogger(Class<?> c) {\n\t", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "        return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private void installActions() {\n        DefaultActionGroup actionGroup = new DefaultActionGroup();\n        actionGroup.add(new AddServerAction());\n        actionGroup.add(new RemoveServerAction());\n        actionGroup.add(new ExpandAllAction());\n        actionGroup.add", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tcontainer.h1(\"Todo List\", \"What needs to be done?\").input(\"new-todo\", \"What needs to be done?\");\n\n\t\t// List of items\n\t\tlist = new ViewOnBoth<State, List<Model>>(stateInit, modelsInit, (state, models) -> {\n\t\t\t", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "                if(output != null) {\n                    if (SET_CROP_OPTIONAL) {\n                        if (CROP_ASPECT_RATIO == -2) {\n                            cropImageView.setCropShape(CropImageView.CropShape.RECTANGLE);\n                            cropImageView.setAspectRatio(cropAspectX, cropAspectY);\n                        } else {\n", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "    private BaseAdapter.OnItemClickListener mOnItemClickListener = new BaseAdapter.OnItemClickListener() {\n        @Override\n        public void onItemClick(int position, View view) {\n            Song song = mAdapter.getItem(position);\n            if (mActivity != null) {\n                mActivity.onSongSelected(mAdapter.getSongList(), position);\n            }\n        }\n", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "    validate_key_condition(model, index, key)\n\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_range_key_success(model, index):\n    \"\"\"Single key condition: equality comparison on range key\"\"\"\n    query_on = index or model.Meta\n    if query_on.range_key is None:\n        pytest", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "            GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        locker.doWhileLocked(new Runnable() {\n\n            public void run() {\n                dataset.addGCActivity(gcActivity);\n            }\n        });\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,Next line of code:\n", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "self.api.add_resource(RestSystem, '/system')\nfloranet/web/rest/__init__.py\nfrom flask_restful import Api, Resource\nfrom floranet.web.rest.system import RestSystem\nfrom floranet.web.rest.device import RestDevice, RestDevices\nfrom floranet.web.rest.gateway import Rest", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "        self._file_tree_model = FileTreeModel(root_dir=directory)\n        self._file_tree_model.setRootPath(directory)\n        self._file_tree_model.setSortingEnabled(True)\n        self._file_tree_model.sort(0, QtCore.Qt.AscendingOrder)\n        self._file_tree_model.setReadOnly(True)\n", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "        MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n    )\n    )\n    group.add_argument(\n        \"--reordering\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet re", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "    private final static TexturedModal MODAL2 = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n\n    private final static Color TRAY_COLOR = Color.of(0xff000000);\n    private final static Color TRAY_COLOR_HOVER = Color.of(0", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface WeekClickListener {\n        /**\n         * Triggered when a week was clicked\n         *\n         * @param week\n         *            The week that was clicked\n         */\n        void week", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "        if db_type in DB_TYPES:\n            self._db_type = db_type\n        else:\n            raise PyOrientBadMethodCallException(\n                db_type + ' is not a valid database type', []\n            )\n        return self\n\n    def set_user(self, user):\n        self._user = user\n", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "            client.getBaseClient().upgrade(packet.getData());\n            break;\n        }\n\n        case MESSAGE: {\n            PacketType subType = packet.getSubType();\n            if (subType == PacketType.CONNECT) {\n                client.getBaseClient().onConnect();\n            } else if (subType == PacketType.DISCONNECT)", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem> contentItemList = new ArrayList<ContentItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<Commit", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());\n\t\tGenerationService generationService = new GenerationService(preprocessors, generator, postprocessors);\n\t\treturn generationService;\n\t}\n\n\tprivate Generator setGenerator", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "    PCollection<GCPProject> liveProjects =\n        pipeline.apply(\"Read live data\", Read.from(new LiveProjectSource(org)));\n    // Convert projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        liveProjects.apply(ParDo.named(\"Convert", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "bloop/session.py\ndef ready(session):\n    \"\"\"Wait for the session to be ready to use.\n\n    This is a no-op if the session is already ready.  If the session is not ready, it will wait until it is ready.\n    This is useful for testing, where you may want to ensure that", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                           dim, vocab, lookup)\n            else:\n                raise NotImplementedError()\n            children.append(self._def_reader)\n        else:\n            self._def_reader = None\n\n        if self._retrieval:\n            self._def", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "    private boolean _isTyping = false;\n    // Guarded by _lockObject.\n    private boolean _isSaving = false;\n    // Guarded by _lockObject.\n    private boolean _isConnected = false;\n    // Guarded by _lockObject.\n    private boolean _isMuted = false", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "    private int pickCount;\n    private int maxVideoCount;\n    private int maxVideoSize;\n    private int maxVideoDuration;\n    private int videoQuality;\n    private ProgressDialog progressDialog;\n    private ArrayList<CustomGallery> mItems;\n    private ArrayList<CustomGallery> mSelectedItems;\n    private boolean isVideo", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOutDownLeft(RotateOutDownLeft.class),\n    RotateOutDownRight(RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "            perfil = Perfil.objects.get(user=self.object)\n            perfil_form = UserFormEdicion(instance=perfil)\n            perfil_formset = PerfilFormSet(instance=perfil)\n        else:\n            perfil_form = UserFormCreacion()\n            perfil_formset = PerfilFormSet()\n        return self.render_to_response", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setDensity(fog.density);\n        descriptor.setGradient(fog.gradient);\n        descriptor.setColor(fog.color);\n\n        return descriptor;\n    }\n\n    public static Fog convert(FogDescriptor descriptor) {\n        Fog fog", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic long[] readLongBlock(String path, int blockSizeX, int blockSizeY, long nbBlocksX, long nbBlocksY)\n\t{\n\t\tif(this.handle == null) new ErrorJSON(\"Please open the Loom file first\");\n\t\treturn this.handle.int64().readMatrixBlock(path, blockSizeX, blockSize", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plusActorDetailsComponent();\n}\napp/src/main/java/com/rashwan/reactive_popular_movies/feature/actorDetails/actorMovies/injection/ActorMoviesComponent.java", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidixMethodCheckException e) {\n\t\t\tview.addException(e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark.\n\t *\n\t * @return if run succeeds or not\n\t */\n\tpublic boolean runBenchmark() {\n\t\tfinal BenchmarkResult res =", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "    ci_pipeline_manager = CIPipelineManager()\n    pipeline_config_manager = PipelineConfigManager()\n    transplatform_sync_manager = TransplatformSyncManager()\n    release_schedule_sync_manager = ReleaseScheduleSyncManager()\n    build_tags_sync_manager = BuildTagsSyncManager()\n    yml_based_job_manager = YMLBasedJobManager", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo\n\t\t\t\t\t.getMoreSuitableEndpoint(endpointType);\n\t\t\tif (endpoint == null) {\n\t\t\t\tthrow new APIWrapperException(\n\t\t\t\t\t\t\"Problem finding a suitable endpoint.\",\n\t\t\t\t\t\tError.NOT_SUITABLE_ENDPOINT_FOUND, null);\n\t\t\t}\n\t\t\tlogManager.logInfo(this,\n", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                planilla_de_relevamiento = form.save()\n                return HttpResponseRedirect(reverse('relevamiento:jerarquizar_marca',\n                                                    args=[planilla_de_re", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "      return\n    self._cstr = self.__process(root)\n    logger.debug(\"Finalized constraint: %s\", self._cstr)\n\n  def __process(self, node):\n    if node.data[0] == COMPARE_OP:\n      cmp = Comparator.fromOpcode(node.data[0], node.data[", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<TransferAction>       transferActionSupportHandler       = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupportHandler<", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {\n\t\tif (this.getRound() != null) {\n\t\t\tthrow new PlayerPresentException();\n\t\t}\n\t\tif (!Bukkit.getPlayer(this.getName()).isOnline()) {\n\t\t\tthrow new PlayerOfflineException();\n\t\t}\n\t\tRound r = Min", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\nassert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\nassert_array_equal(fold([MIN_HASH_VALUE], MAX_HASH_VALUE / 2), [0])\nassert_array_equal(fold([MIN_HASH", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "        else:\n            result = format_digits(str(value), fmt_token, fmt_modifier=fmt_modifier)\n\n    if 'o' in fmt_modifier:\n        result += ordinal_suffix(value)\n\n    return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('xs:double?', 'xs", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.type == DocumentModelItemType.Document:\n\t\t\t\treturn default_flags\n\t\t\telif model_item.type == DocumentModelItemType.Geometry:\n\t\t\t\treturn default_flags\n\t\t\telif model_item.type == DocumentModelItemType.Sketch:\n\t\t\t\treturn default_flags\n\t\t\telif model_item.type == DocumentModelItemType.Part:\n\t\t\t\treturn default", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "        object1.properties = {\"p1\": object2, \"p2\": object3}\n        object2.properties = {\"p1\": array}\n        object3.properties = {\"p1\": array}\n        object_dto = []\n        object = object1\n\n        response = Hydrator(version1, versions,", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "          FASTDecoder decoder = DispatchLoader.loadDispatchReader(catBytes, PipeBundle.buildRingBuffers(new Pipe(new PipeConfig((byte)15, (byte)7, TemplateCatalogConfig.buildRingBuffers(new TemplateCatalogConfig(catBytes), (byte)8, (byte)18)).initBuffers())));\n          //FASTDecoder decoder", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n  to_map_and_back(DFO, DopplerPoly(1, 1, (1, )))\n  to_map_and_back(DFO, DopplerS", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "                containsString(\"hits.total: 2\"));\n        assertThat(\"all records were added to the index\", searchAllResponse, containsString(\"hits.hits.0._source.title: DAB\"));\n        assertThat(\"all records were added to the index\", searchAllResponse, containsString(\"hits.hits.1._source.title", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "src/leap/mx/vendor/pgpy/packet/types.py\nclass SubKey(VersionedPacket, Sub):\n    __typeid__ = 0x07\n    __ver__ = 0\n\n    @sdproperty\n    def created(self):\n        return self._created\n\n    @created.register(datetime)\n", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\n\t\tGeoJSONWriter geoJSONWriter = new GeoJSONWriter();\n\t}\n\n", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                        res = authz.getResults(\n                            context.get(ContextKeys.SEARCH_FILTER, String.class),\n                            context.get(Global.InvokeKeys.SEARCH_CONTEXT, ExtMap.class)\n                        );\n                    } catch (SQLException e) {\n                        addContextMessage(context, true, e.getMessage());\n                        context.<List<Throwable>>get(Context", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "url(r'^users/$', users_list, name='users-list'),\nurl(r'^users/new/$', new_user, name='new-user'),\nurl(r'^users/(?P<pk>[-\\w]+)/edit/$', edit_user, name='edit-user'),\nurl(r'^users/(?P<pk>[-\\w]+)/delete", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                            Intent intent = new Intent(getActivity(), MixedActivity.class);\n                            intent.putExtra(\"stack\", stack.getName());\n                            startActivity(intent);\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"new_session\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        if (stack != null) {\n", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "    private CookBookAdapter adapter;\n    private int page=1;\n    private int totalPage=1;\n    private int pageSize=10;\n    private String url;\n    private String title;\n    private String type;\n    private String date;\n    private String click;\n    private String remark;\n    private String positionTitle", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "        obj.updateBuffImg();\n        obj.updateBlockShape();\n        obj.updateBlockLabel();\n        obj.updateComment();\n        obj.updateSocketTags();\n        obj.updateControlLabels();\n        obj.updateBlockWidget();\n        obj.updateBlockImage();\n        obj.updateBlockImageLocation();\n        obj.updateBlockImageSize();\n        obj.update", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "        f = derivative.XDA([XorDiff(d1), XorDiff(d2)])\n        beta = XorDiff(d3)\n        result = self._find_preimage(f, beta)\n        if result is not None:\n            i, j = result\n            assert f.eval(Constant(i, DP_WIDTH),", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n\t\tpublic Node transformConstant(ConstantNode node) {\n\t\t\treturn node;\n\t\t}\n\t\tpublic Node transformMultiConstant(MultiConstantNode node) {\n\t\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Load the config\n\t\tsaveDefaultConfig();\n\t\tConf.loadConfig();\n\t\t\n\t\t// Register the commands\n\t\tbaseCommand = Conf.getBaseCommand();\n\t\tgetCommand(baseCommand).setExecutor(new CommandExecutor());\n\t\t\n\t\t// Register the events\n", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "        Challenge challenge = new Challenge(challengeData);\n        connection.saslMechanism.processChallenge(challenge);\n    }\n\n    private void parseFailure(Element doc) throws IOException {\n        Failure failure = new Failure(doc);\n        connection.saslMechanism.processFailure(failure);\n    }\n\n    private void parseSuccess(Element doc) throws", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Cham32 = cham.get_Cham_instance(cham.ChamInstance.cham_32_64)\nChaskey = ChaskeyPi\nPi = PiPermutation\nHight = HightCipher\nLea = LeaCipher\nShacal1 = Shacal1Cipher\nShacal", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "    private SongListAdapter mAdapter;\n    private FastScroller mFastScroller;\n    private Toolbar mToolbar;\n    private boolean mShowToolbar = true;\n    private boolean mShowFastScroller = true;\n    private boolean mShowHeader = true;\n    private View mHeaderView;\n    private int mHeaderLayoutId", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "            // FlowAbsEffect and FlowAbsSubEffect are subeffects of the FlowAbsEffect and should not be selected directly\n            return false;\n        }\n        mSpectaculumView.selectEffect(index);\n        mSelectedEffect = effect;\n        mSelectedEffect.addListener(this);\n        return true;\n    }\n\n    public", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "        Bit('Spare', Pt=0, BitLen=2, Repr='hex'),\n        Bit('M', Pt=0, BitLen=1),\n        Bit('N', Pt=0, BitLen=1),\n        Bit('E', Pt=0, BitLen=1),\n        Bit", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "            load();\n        }\n    };\n    private AlbumEditorDialog.OnEditionSuccessListener mOnAlbumEditionSuccessListener = new AlbumEditorDialog.OnEditionSuccessListener() {\n        @Override\n        public void onEditionSuccess() {\n            load();\n        }\n    };\n    private OnClickListener mOnClickListener = new OnClickListener() {\n\n        @Override\n       ", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "self.add_file(file)\nmontreal_forced_aligner/corpus/features.py\nclass AcousticCorpusMixin(FeatureConfigMixin, CorpusMixin, metaclass=ABCMeta):\n    \"\"\"\n    Mixin class for acoustic corpus information\n\n    Attributes\n    ----------\n    num_jobs: int\n        Number of jobs", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),\n\t\t\t\tuser.getCallbackServiceUri(), user.getCallbackServiceWsdlUri(),\n\t\t\t\tuser.getCallbackUsername(), user.getCallbackPassword());\n\t}\n\n\t@GET\n\t@Path(\"listusers\")\n\t@Produces", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers that Shodan will send when making requests to your API key.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info/headers\")\n    Observable<Http", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.name(), message.value());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(ImmutableMap.copyOf(message.properties()));\n    }\n  }\n\n  private", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    assert almost_eq(erb[\"glasberg_moore_slaney\"](freq), bandwidth)\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 130.52),\n      (3000, 343.65),\n     ])\n  def test_glasberg_moore_83_example(self,", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "            if dataset is None:  # None is returned if hit Sequence Delimiter\n                break\n            dataset.file_tell = fp.tell() + offset\n            seq.append(dataset)\n    else:\n        # Read until Sequence Delimiter Tag\n        while True:\n            dataset = read_sequence_item(fp, is_implicit", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "    try {\n      final T expressionContext = proxyBuilder.build();\n      CoordinatesWalker walker = new BaseCoordinatesWalker(document) {\n        @Override\n        protected void onRun(RunCoordinates runCoordinates, ParagraphCoordinates paragraphCoordinates) {\n          runProcessorsForRun(runCoordinates, paragraphCoordinates, expressionContext, document);\n       ", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(getActivity().getApplication(), prefs, searchCriteria, page, PAGE_SIZE);\n    }\n\n    @Override\n    protected IRavelryActivity getRavelryActivity() {\n        return (IRavelryActivity)", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "    @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags += NotationDataFlags & val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = self.bytes_to_int(val)\n\n    @sdproperty\n    def not", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "        self.textInput.setText(\"\")\n        self.textInput.setFocus()\n        self.parent().messageSent.emit(\"PESTERCHUM:MESSAGE\", self.chum.handle, serverMsg)\n    def addMessage(self, lexmsg, chum):\n        if len(lexmsg) == 0:\n            return\n        color =", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "def check_string_like(arg, type_, env):\n    if isinstance(type_, _StringLike):\n        return check_arg(arg, type_, env)\n    elif isinstance(type_, Union):\n        for t in type_.__types__:\n            if isinstance(t, _StringLike):\n                return check_arg(arg, t, env", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime10)):\n            return GregorianMonthDay(value.month, value.day, value.tz", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "    if features is None:\n        features = feature_transforms\n    # TODO: we should only search and get phases that have the same sublattice_site_ratios as the phase in the database\n    desired_data = get_prop_data(comps, phase_name, 'GM', datasets)\n    desired_data = filter", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n        controller.getContentPlayer().setPlayWhenReady(false);\n        controller.getContentPlayer().stop();\n        controller.clearMovieResumeInfo();\n        controller.clearAd", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "mobile/src/main/java/de/unima/ar/collector/sensors/CustomCollector.java\npublic abstract class CustomCollector\r\n{\r\n    private int type;\r\n    private boolean registered = false;\r\n\r\n\r\n    public CustomCollector(int type)\r\n    {\r\n        this.type = type;\r\n    }\r\n\r\n\r\n    public abstract void register();\r\n\r\n\r\n    public abstract void dereg", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "    Call<Suggestions> getSuggestions(@Query(\"q\") String query);\n\n    @FormUrlEncoded\n    @POST(\"anonid\")\n    Call<AnonIdResponse> getAnonId(@Field(\"localid\") int localId);\n\n    @GET(\"packs\")\n    Call<PackResponse> getP", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "        return Stream(model=model, engine=self).move_to(position)\n\n    def transaction(self, mode=\"rw\"):\n        \"\"\"Create a :class:`~bloop.transactions.Transaction` for atomic updates.\n\n        :param mode: \"rw\" for read/write, \"r\" for read-only.  Default is \"rw\".\n       ", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "        self.log.info(\"confusion matrix:\\n%s\" % ConfusionMatrixFormatter().format(confusion_matrix, data_set.label_map))\n\n        self.plot_confusion_matrix(confusion_matrix, classes=list(data_set.label_map.keys()), normalize=True)\naudeep/backend/learners.py\nclass PreProcessingWrapper(Lear", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t@RequestMapping(value = \"/profile/{username}\", method = RequestMethod.GET)\n\tpublic ModelAndView profile(@", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "g = Graph('localhost', 2424, 'root', 'root', database='test')\npyorient/ogm/graph.py\nclass Graph(object):\n    \"\"\"Graph database connection.\n\n    :param host: OrientDB server host\n    :param port: OrientDB server port\n    :param user: Orient", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "        return self._create_decoder()\n\n    def _create_decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences as input, and is initialized with the hidden representation\n        of the input sequences as initial state.\n\n        Returns\n        -------\n", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "all_platform_slugs.extend(TRANSIFEX_SLUGS)\nall_platform_slugs.extend(ZANATA_SLUGS)\nall_platform_slugs.extend(DAMNEDLIES_SLUGS)\nall_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableDefinitionNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(PropertyNode node) {\n        return defaultValue();\n    }\n\n    // Concrete visit methods (NodeNavigation", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t}\n\n\tpublic static H3", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "        final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Method\", '=', Alignment.Left);\n        table.addHeader(\"Class\", '=', Alignment.Left);\n        table.addHeader(\"Mean\", '=', Alignment.Right);\n        table.addHeader(\"StdDev\", '=', Alignment.Right);\n        table.addHeader(\"Min", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "      walker = Walker(self.graph, visitor, backwards=True)\n      walker.traverse(node)\n      for edge in visitor.edges:\n        if edge.source.kind == ControlFlow.N_LOOP:\n          return edge.source\n      return None\n\n    def get_parent_if(node):\n      class BwdEdges(EdgeVisitor):\n        def __", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.traindata, this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.info(\"Unknown tree type\");\n\t\t\t\tSystem.exit(-1);\n\t\t}\n\t\t\n\t\tthis.t = this.tree.getNumberOfInternalNodes();\n\t\tthis.T = this.t + this", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "def _get_serialization_parameters(elem: ElementTree.Element) -> Dict[str, Any]:\n    params = {}\n    for param in elem.findall(SERIALIZATION_PARAMS):\n        name = param.get('name')\n        if name is None:\n            raise ElementPathError('XPST0081', 'serialization parameter missing name", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                }\n            });\n        }\n\n        @Override\n        public void onBingEvent(Event event, RoomState roomState, BingRule bingRule) {\n            Log.i(LOG_TAG, \"onBingEvent >>>> \" + event);\n\n            if (null != mBingRule) {\n                if (m", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI32ToDDI33Preprocessor ddi32To33 = new DDI32ToDDI33Preprocessor();\n\t\n\t// PostProcessing\n\t\n", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationEtatPlaces(self, _):\n        site = self.GetSelectedSite()\n        annee = self.releves_choice.GetClientData(self.releves_choice.GetSelection())\n        DocumentDialog(self", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "self.rave = rave_body\npymanoid/robot.py\nclass Robot(Body):\n\n    \"\"\"\n    Robot model.\n\n    Parameters\n    ----------\n    rave_body : openravepy.KinBody\n        OpenRAVE body to wrap.\n    com : PointMass, optional\n        Center of mass of the", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "        final QueuedProject queuedProject = queuedProjectResult.queuedProject;\n        View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n        }\n        name.setText(queuedProject.name);\n        author.setText(queuedProject.patternAuthor.name);\n        gauge_description.setText(queuedProject.pattern.g", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "                new RefreshCommand(),\n                new MigrateCommand(),\n                new LoanModule());\n        logger.info(\"EconomyLite \" + PluginInfo.VERSION + \" has been initialized!\");\n    }\n\n    private void initializeFiles() {\n        // Check if the config file exists\n        if (!configManager.getFile().toFile().exists())", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "        else:\n            raise ValueError(\"Unknown prior type: {}\".format(prior))\n        prior_specs = build_prior_specs(prior, params)\n        return {'prior_specs': prior_specs}\n\n    def _fit(self, symbols, datasets, phase_models=None, callables=None, data_weights=None, priors=None, chains", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "    return Const.fromValue(arg)\nequip/analysis/constraint/expr.py\nclass Constraint(object):\n  \"\"\"\n    A constraint is a tree of ``Expr`` nodes. It is derived from a conditional\n    expression in the AST.\n  \"\"\"\n  def __init__(self, ast):\n    self._ast = ast", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics;\n\tprivate final FringeLayer fringeLayer;\n\tprivate final SpriteBatch batch;\n\tprivate final Config config;\n\tprivate final PingPongEq<ControllerPlayer> controller = new PingPongEq<>(null, null);\n\tprivate final PingPongEq<ControllerPlayer> controllerRemote = new PingPongEq", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new TempSensorView();\n                    o = tview.getView();\n                    ((TempSensorPresenter) tview.get", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic Long reference2() {\n\t\tSet<Long> set = new HashSet<>();\n\t\tAtomicLong aLong = new AtomicLong();\n\t\tjdbcTemplate.query(\"SELECT AUTHOR.*, BOOK.* FROM AUTHOR LEFT OUTER JOIN BOOK ON AUTHOR.ID = BOOK.AUTHOR_ID\", (rs, rowNum) -> {\n\t\t\tLong authorId = rs", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLQuery getRootQuery() {\n\t\treturn rootQuery;\n\t}\n\n\tpublic void setRootQuery(SQLQuery rootQuery) {\n\t\tthis.rootQuery = rootQuery;\n\t}\n\n\t@Override\n\tpublic void executeServer(SQLTranslation exp, ForestReader in, ForestWriter out) {\n\t\t// TODO Auto-generated method stub", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "        install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['packagename'], app_info['mainactivity'], True)\n        \n        # TODO: 添加其他测试方法\n        auto_app_test(adb, app_info)\n        \n        # 开启下载日志线程\n        download_logs_thread = threading", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return genomes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genomes\n     */\n    Genome parseGenomes(InputStream inputStream);\n\n    /**\n     * Parse", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "                Symbol.typed(bar_type, 'bar'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_if():\n    inc_type = Func[[IntType], IntType]\n    check_expr_type(\n        \"\"\"\n        if", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, query(startsWith(\"...\")));\n\n        assertThat(pe, queryType(QueryType.SELECT));\n        assertThat(pe, paramAs", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "self._viewWidget.on_insert_sketch()\nGUI/Widgets/ViewWidget.py\nclass ViewWidget(QStackedWidget):\n\tdef __init__(self, main_window, document):\n\t\tQStackedWidget.__init__(self, main_window)\n\t\tself._doc = document\n\t\tself._sketchView = Sketch", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                            return new NotFoundException(cause);\n                        case 405:\n                            return new APIIncorrectException(cause);\n                    }\n                }\n                return cause;\n            }\n        };\n        _config = config;\n        // Set up the adapter\n        mAdapter = new RestAdapter.Builder()\n                .setEndpoint(BASE_URL)\n                .set", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "registerRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the start token for expressions. The default is <code>${</code>.\r\n\t * \r\n\t * @param exprStartToken\r\n\t *            the start token\r\n\t */\r\n\tpublic void setExprStartToken(String exprStartToken", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_UPPERCASE, false)) {\n\t\t\tlabelFactory = new UpperCaseFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "    url(r'^package/(?P<slug>[\\w\\-\\+]+)/new$', staff_member_required(AddPackageCIPipeline.as_view(),\n                                                                     login_url=LOGIN_URL), name=\"package-add-ci-pipeline\"),\n    url(r'^history/(?P<pipeline_id>[\\w\\-\\+]+)$',", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                Transition transition = getWindow().getSharedElementEnterTransition();\r\n\r\n                if (transition != null) {\r\n                    transition.addListener(new Transition.TransitionListener() {\r\n                        @Override\r\n                        public void onTransitionStart(Transition transition) {\r\n\r\n                        }\r\n\r\n", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "    person = None\n    if not request.user.is_anonymous():\n        person = request.user.person\n    account = account_for_vimeo_id(access_token_data['user_id'], person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_name", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "    grid = _gen_grid(data, options)\n    \n    # Compute likelihood across grid\n    likelihood = _grid_likelihood(data, options, grid)\n    \n    # Apply priors to likelihood\n    posterior = _apply_priors(data, options, likelihood, grid)\n    \n    # Compute integral of posterior\n    integral", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "            UIDialog.getDicesDialog(false);\n          }\n      }\n    });\n    rollBtn.setVisible(false);\n    addActor(rollBtn);\n\n    doubleBtn = new TextButton(\"Double\", ts);\n    doubleBtn.addListener(new ClickListener() {\n      @Override\n      public void clicked(InputEvent event, float x, float", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "        self.assertListEqual(list(etree_iter_paths(root)), [\n            (root, '.'),\n            (root[0], 'a/Q{http://www.w3.org/2001/XMLSchema}b1[1]'),\n            (root[0][0], 'a/Q{http://www.w3.org", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "        self.runner.add(ContentSimhashSampling(), with_child=True)\n        self.runner.add(ContentSampling(), with_child=True)\n        self.runner.add(RejectStatusCode(), with_child=True)\n        self.runner.add(self.rule, with_child=True)\n        self.rule.set_engine(self.engine)\n        self.rule.set_child_heuristics(self", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    cfecanc = CFeCancelamento(\n            destinatario=Destinatario(\n                    CPF='11122233396',\n                    xNome=u'João de Teste'),\n            chCanc='CFe12345678901234567890123456789012345678901234',\n            CN", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a genome.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a genome\n     */\n    Genome parseGenome(InputStream inputStream);\n\n   ", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "            EtsiResponse resp = this.client.send(req);\n            \n            // 5. Get the signature\n            CmsSignature cmsSig = new CmsSignature(resp.getSignature());\n            SignatureValue sigValue = new SignatureValue(cmsSig.getRawSignature());\n            \n            // 6. Construct the ASiC file", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Feature:\n\t\t\treturn get_icon(\"feature\")\n\t\telif type(obj) is Plane:\n\t\t\treturn get_icon(\"plane\")\n\t\telif type(obj) is Proformer:\n\t\t\treturn get_icon(\"pro", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "mobile/src/main/java/de/unima/ar/collector/sensors/PressureSensorCollector.java\npublic class PressureSensorCollector extends SensorCollector\r\n{\r\n    private static final int      type       = 6;\r\n    private static final String[] valueNames = new String[]{ \"attr_millibar\", \"attr_time\" };\r\n\r\n", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<Game> schedule;\n\tprivate TeamLeaders teamLeaders;\n\tprivate List<PlayerOverview> playerOverview;\n\t\n\tpublic Team(String teamId) throws TeamNotFoundException {\n\t\tTeamSummaryResponse teamSummaryResponse = getTeamSummary(teamId);\n\t\tif (teamSummaryResponse.getLeague().getTeams().size() == 0)", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "        DeviceInfo deviceInfo = new AndroidDeviceDetailsInfo().getDeviceInfo();\n        Feedback feedback = new Feedback(userFeedback, deviceInfo, packageInfo, email);\n        FeedbackUseCase feedbackUseCase = FeedbackUseCase.Companion.getInstance();\n        feedbackUseCase.sendFeedback(feedback,\n                new Function1<Unit, Unit>() {\n", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "            table_index.setdefault(table_name, []).append(key)\n            object_index.setdefault(key, []).append(obj)\n\n        for table_name, keys in table_index.items():\n            request[table_name] = {\n                \"Keys\": keys,\n                \"ConsistentRead\": consistent\n            }\n\n        loaded_items = self.session.load_items(request", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "                art = draw_art(key['key_size'], key['key_algo'], fingerprint)\n                print(art)\n            print('Fingerprint: {0}'.format(format_fingerprint(fingerprint)))\n            print('Description: {0}'.format(description))\n            print('Created at:  {0}'.format(created_at))\n           ", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\nfrom django.contrib import admin\nfrom django.utils.translation", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "        return RespostaExtrairLogs.analisar(retorno)\nsatcfe/resposta/consultarultimasessaofiscal.py\nclass RespostaConsultarUltimaSessaoFiscal(RespostaSAT):\n    \"\"\"Lida com as respostas da função ``ConsultarUltimaSess", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "        self.assertEqual(node_document_uri(ElementTree.XML('<A/>')), None)\n        document = ElementTree.parse(io.StringIO('<A/>'))\n        self.assertEqual(node_document_uri(document), None)\n        xml_test = '<A xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:base", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case DURATION_ASC:\n                    Arrays.sort(sorted, new ItemDurationComparator(false));\n                    break;\n                case DURATION_DESC:\n                    Arrays.sort(sorted", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "self.worker.compile_train_graphs()\nmontreal_forced_aligner/alignment/multiprocessing.py\nclass CompileTrainGraphsArguments(NamedTuple):\n    \"\"\"\n    Arguments for :class:`~montreal_forced_aligner.alignment.multiprocessing.CompileTrainGraphsFunction`\n    \"\"\"\n\n    log_path: str\n    dictionary", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "    private final OAuth2Requester requester;\n    \n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.sessionController = sessionController == null? new", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "    private final Vms vms;\n    private final Errands errands;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    \n    public SpringDirectorClient(URI uri, RestTemplate restTemplate) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, uri);\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "    public HiMuteStatus getMuteStatus(HiSide side)\n    {\n        synchronized (_lockObject)\n        {\n            return _chat.getMuteStatus(side);\n        }\n    }\nDifian/DifianApp/src/main/java/com/sonova/difian/communication/fittingconnection/FittingConnection", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "        return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "    public void onClick(GuiMouseEvent event) {\n        if (event.getType() == GuiMouseEvent.MouseEvent.CLICK) {\n            TabbyChat.getInstance().getChatGui().setActiveChannel(channel);\n        }\n    }\n\n    @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        ILocation bounds =", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);\n        DoubleDerivatives d3Sad = BlackFormula2.price_Sad(DATA[looptest][0], DATA[looptest][1], DATA[looptest][2], \n            DATA[loopt", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "            VotingModule.class\n    };\n\n\n    private AthenaGM plugin;\n    private HashMap<String, Module> modules;\n\n\n    public ModuleLoader(AthenaGM plugin) {\n        this.plugin = plugin;\n        this.modules = new HashMap<String, Module>();\n        loadModules();\n    }\n\n\n    /**\n     * Load all modules\n    ", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize thread pool size.\n     * @return {@link DownloadQueue}.\n     * @see #newDownloadQueue()\n     */\n   ", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "  public void init(MutableConfig config) {\n    config.set(\"packager.packages\", List.of(\"packager\"));\n  }\n\n  @Override\n  public void configure(MutableConfig config) {\n    config.derive(config.getOrUpdate(\"packager.packages\", List.class), (packages, value) -> packages", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList nodeList = element.getElementsByTagName(QUERY_SET_CONFIG_TAG);\n        if (nodeList != null && nodeList.getLength() > 0) {\n            Element querySetConfigElement = (Element", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "                        S['runmemory'] = ret['runmemory']\n                        S['runtime'] = ret['runtime']\n                        S['codelenth'] = ret['codelenth']\n                        S['realsubmittime'] = ret['realsubmittime']\n                        S['language'] = ret['language']\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "            left_foot_task = PoseTask(\n                self.robot, self.robot.left_foot,\n                self.swing_foot.left_foot_pose, weight=swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance.right", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "    simple_op.add(BvNeg)\n    simple_op.add(BvNot)\n    simple_op.add(Extract)\n    simple_op.add(ZeroExtend)\n    simple_op.add(Concat)\n    simple_op.add(Repeat)\n    simple_op.add(Ite)\n    simple_op.add(RotateLeft)\n    simple_op.add", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew DQTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DHTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tif (aJPEG.mArithACK != null)\n", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "            if (sl == null) {\n                JOptionPane.showMessageDialog(null,\n                        \"Keine Sammellastschrift ausgewählt.\",\n                        \"Fehler\", JOptionPane.ERROR_MESSAGE);\n                return;\n            }\n\n            SqlSession session = sqlSessionFactory.openSession();\n            try {\n                LastschriftenMapper mapper = session\n", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "    def generate_pronunciations_arguments(self) -> List[GeneratePronunciationsArguments]:\n        \"\"\"\n        Generate Job arguments for :func:`~montreal_forced_aligner.alignment.pretrained.generate_pronunciations_func`\n\n        Returns\n        -------\n        list[:class:`~montreal_forced_aligner.alignment.pre", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "        LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        if (!properties.hasLore(key)) {\n            properties.addLore(key);\n            PacketSyncLore.updateLore((EntityPlayerMP) entityPlayer);\n            entityPlayer.addChatComponentMessage(new ChatComponentText(String.format(\"Added lore", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "    private final UserDAO userDAO;\n    private final CategoryDAO categoryDAO;\n    private final BudgetDAO budgetDAO;\n    private final RecurringDAO recurringDAO;\n    private final TransactionDAO transactionDAO;\n    private final AuthTokenDAO authTokenDAO;\n    private final PasswordEncoder passwordEncoder;\n    private final BudgetTypeDAO", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\nNext line of code:\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\nNext line of code:\n\tpublic static Logger getLogger() {\n\t\treturn LogUtil.getLogger();\n\t}\nNext line of code:\n\tpublic static Logger getLogger(String name) {\n\t\treturn Log", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "    FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    FlipInX(FlipInXaxis.class),\n    FlipInY(FlipInYaxis.class),\n    FlipOutX(FlipOutXaxis.class),\n   ", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        smart_print(\"SMT problem:\")\n        smart_print(problem.hrepr(full_repr=verbose_level >= 3))\n\n    ch_found = problem.solve(initial_weight, solver_name, search_mode, check, verbose_level", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "            h5 =  LocalHost5\n            ssh1 = LocalSSHHost1\n            ssh2 = LocalSSHHost2\n            ssh3 = LocalSSHHost3\n            ssh4 = LocalSSHHost4\n            ssh5 = LocalSSHHost5\n        return H\n\n    def test_init(self):\n", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "            return command.startswith(\"tc\")\n\n        return self.__iptables_ctrl.get_command_history(tc_command_filter)\n\n    def get_command_history_string(self):\n        return \"\\n\".join(self.get_command_history())\n\n    def get_command_history_file_path(self):\n        return \"{:s}.tcconfig_history\".format(self.device)\n\n    def", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1.NAME: False,\n                  NormalRateConfig.GPS.L2.NAME: False,\n", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n\n        Cursor cursor =  db.query(ExpenseManagerContract.ExpenseTable.TABLE_NAME, null,\n                ExpenseManagerContract.ExpenseTable", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "    private SimpleDateFormat monthFormatter;\n    private SimpleDateFormat yearFormatter;\n\n    private TextView monthTitle;\n    private TextView yearTitle;\n\n    private OnMonthChangeListener onMonthChangeListener;\n    private OnDayChangeListener onDayChangeListener;\n\n    private ScrollManager scrollManager;\n\n    private boolean isPrepared = false;\n\n    private Handler backgroundHandler;\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "    my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert almost_eq(my_stream.take(30), [random.uniform(-1, 1) for _ in xrange(30)])\n\n  def test_inf_input(self):\n    my_stream = white_noise(inf)\n    assert isinstance(my_stream, Stream", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "                isinstance(t2, FuncMeta) and\n                isinstance(t2.__args__[-1], TypeVarMeta) and\n                t2.__args__[-1].__instance__ is None\n            ):\n                t2.__args__[-1].__instance__ = t1\n                unify(t1.__", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "        self.auth = Auth(login_data=login_data, no_prompt=no_prompt)\n    ):\n        \"\"\"\n        Initialize Blink class.\n\n        :param login_data: dictionary for login data\n                           must contain the following:\n                             - username\n                             - password\n        :param no_prompt: Should any user input prompts\n                          be", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "def populate_sketch(self, sketch, parent_item):\n\t\tsketch_item = self.create_model_item(parent_item, sketch)\n\t\tfor edge in sketch.get_edges():\n\t\t\tself.create_model_item(sketch_item, edge)\n\t\tfor kp in sketch.get_keypoints():\n\t\t\tself.create_model_item(sketch_item, kp", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "self._varz.message_bytes_sent(buf.tell())\nscales/thriftmux/serializer.py\nclass ThriftMuxMessageSerializerSink(ClientMessageSink):\n  \"\"\"A serializer sink that serializes thrift messages to the finagle mux\n  wire format\"\"\"\n\n  class Varz(VarzBase):\n    _VARZ", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "        assertThat(out.toString(), equalTo(\n                ThreadDumpFactory.fromString(\n                        Util.asString(process.getInputStream())\n                ).getHeader()\n        ));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithAuth() throws Exception {\n        TestThread.JMXProcess process = disposer.register(TestThread.runJmx", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "        data.setOperation(DrumOperation.UPDATE);\n        return data;\n    }\n\n    private static DrumStoreEntry<PLDTestData, String> createNewData(long key, DrumOperation op, long... val) {\n        InMemoryEntry<PLDTestData, String> data = new InMemoryEntry<>();\n        PLD", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" 个\");\n            }\n        });\n    }\n\n    @Override\n    protected", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "        return new RoxanaPropertiesMockBuilder()\n                .withLocale(Locale.CANADA.getLanguage())\n                .withBaseName(\"messages\")\n                .withResponseStrategy(ResponseStrategy.FULLY)\n                .withSuppressFailsTranslations(true)\n                .build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerFor", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "    self._socket.write(self._ping_msg)\n\n  def _CheckInitialConnection(self):\n    \"\"\"Check if the server is alive by sending a ping message.\"\"\"\n    self._last_ping_start = time.time()\n    self._SendPingMessage()\n    self._ping_ar = AsyncResult()\n    self._ping_ar.raw", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "      assert almost_eq(freq2lag(lag2freq(v)), v)\n\n  def test_freq_lag_converters_are_inverses_with_generators(self):\n    for v in [37, 12, .5, -2, 1, .18, 4, 1e19, 2", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "            Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy20Service.class,\n            Proxy21Service.class,\n            Proxy22Service.class,\n            Proxy23Service.class,\n            Proxy24Service", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "        SpellHelper.set_dictionary(list(pytz.all_timezones))\nclembot/exts/config/config.py\nclass ConfigCog(commands.Cog):\n\n    _cache = dict()\n    by_guild = dict()\n\n\n    def __init__(self, bot):\n        self.bot = bot\n        self.dbi = bot.db", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "    if self.symbol == 'eq':\n        return numeric_equal(*operands)\n    elif self.symbol == 'ne':\n        return numeric_not_equal(*operands)\n    elif self.symbol == 'lt':\n        return operands[0] < operands[1]\n    elif self.symbol == 'gt':\n        return operands[0]", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "        welcomeString.setText(\"Bienvenido, \" + Utils.getPrefs(getActivity(), Constants.KEY_FIRST_NAME));\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEvents.add(new Event(MENU_ID_IMAGE1));\n        mEvents.add(new Event(MENU_ID_IMAGE2", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "            // Notify the fragment that the chat was created\n            InviteToChatFragment.ChatRegisteredParam param = new InviteToChatFragment.ChatRegisteredParam(success, newChatId);\n            ObservableRegistry.getObservable(classToNotify).notify(param);\n        } else {\n            Toaster.getInstance().toast(R.string.unable_create_chat,", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "        UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertEquals(\"SUCCESS\", response.getResultCode());\n        Assert.assertEquals(\"SUCCESS\", response.getReturnCode());\n        Assert.assertEquals(\"NATIVE\", response.getTradeType());\n        Assert.assertNotNull(response.getPrepayId());\n        Assert.assertNotNull(response.getCodeUrl());\n       ", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "        MessageMapper messageMapper = new MockedMessageMapper(KEY, SUCCESS);\n        MessageTranslated messageTranslated = creator.create(messageMapper);\n        assertEquals(KEY, messageTranslated.getKey());\n        assertEquals(SUCCESS, messageTranslated.getSeverity());\n        assertEquals(KEY, messageTranslated.getMessage());\n    }\n\n    @Test\n    void createWithParametersTest", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "src/main/java/erjang/beam/repr/Operands.java\n  public static class YReg extends DestinationOperand {\npublic final int nr;\npublic YReg(int nr) {this.nr=nr;}\n\n@Override\npublic YReg asYReg() {return this;}\n@Override\npublic YReg testYReg()", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "client = Client(USERNAME, PASSWORD, project_id=TENANT_NAME, auth_url=AUTH_URL)\nclient.instances.list()\nclient.instances.create(name, flavor_id=None, volume=None, databases=None,\n                        users=None, restorePoint=None, availability_zone=None,\n                        datastore=None, datastore_version=None, nics=None,\n", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "            MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(timezone=self.__timezone)\n                return self.__parser.parse(ping_lines)\n            except ParseError:\n                continue\n\n        raise ParseError(reason=Parse", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "            Main.setVideoFrameRate(Integer.parseInt(m.videoSetFrameRate.getText()));\r\n        } else {\r\n            JOptionPane.showMessageDialog(null, \"Frame rate must be greater than 0\");\r\n            m.videoSetFrameRate.setText(\"1\");\r\n        }\r\n\r\n        // set width\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) > ", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "            self._probe = probe\n        # Set the parameters.\n        self._set_params(**kwargs)\n        # Create the temporary directory.\n        self._create_tempdir()\n        # Create the spike store.\n        self._create_spike_store()\n        # Create the probe adjacency list.\n        self._create_probe_adj", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.buildPingUri(context);\n        final BoundRequestBuilder boundRequestBuilder = prepareGet", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "      self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    \"\"\"\n      Analyzes the bytecode and creates the CFG.\n    \"\"\"\n    self._blocks = []\n    self._block_idx_map = {}\n    self._block_nodes = {}\n    self._frames =", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "        ObservableRegistry.getObservable(QRCodeFragment.class, QRData.class).register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getObservable(QRCodeFragment.class, QRData.class).remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "  public void visit(final InExp inExp) throws QueryGrammarException {\n    final Column column = inExp.getColumn();\n    final String baseVariableName = column.getName();\n    result.append(OPEN_BRACKET);\n    visit(column);\n    if (inExp.isNegative()) {\n      result.append(\" \").append(Operator.NOT", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/test1.xml\");\n\t\t\tFile expectedOutput = new File(basePath + \"/test1.xforms\");\n\t\t\tFile expectedOutputBrowsing = new File(basePath + \"/test1.browsing.xforms\");\n\t\t\tFile expectedOutputBrowsing2 = new File(basePath + \"/", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "            DiscreteDistribution(np.array([0.5, 0.5]), np.array([0, 1])).draw(1)[0],\n            0,\n        )\n        self.assertEqual(\n            DiscreteDistribution(np.array([0.5, 0.5]), np.array([0, 1])).", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpad state\n        state = stateFactory.createState(VpaidState.class);\n\n        assertThat(state instanceof TestVpadState, is(true));\n\n    }\n\n    @", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(final BooleanTag tag, final boolean value) {\n\t\tValidity validity = validities.get(tag);\n\t\tif (validity == null) {\n\t\t\tvalidities.put(tag, validity = new Validity(tag));\n\t\t}\n\t\tvalidity.acceptBoolean(value);\n\t}\n\t\n\t@OverrideNext line of", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))\n        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=\"\", language=\"Hindi\"))\n        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=\" \", language=\"Hindi\"))\n        self.assertEqual(hindi_placeholder_name(),", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfThe", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        if rem > 0:\n            # append padding bits\n            self.append(Bit('%s' % self.rest_name, Pt=0, BitLen=rem))\n        # clean temporary data\n        del self.BUF, self._buflen, self._consumed, \\\n            self._offset, self._", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "        for cls in walk_subclasses(model):\n            if cls.Meta.abstract:\n                continue\n            self._bind_model(cls, skip_table_setup=skip_table_setup)\n\n    def _bind_model(self, model, *, skip_table_setup=False):\n        \"\"\"Bind a single model to the engine.\n\n        :param model: Model", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "resposta = self._invocar(\n                'ComunicarCertificadoICPBRASIL',\n                self.gerar_numero_sessao(),\n                self._codigo_ativacao,\n                certificado)\nsatcfe/base.py\nclass FuncoesSAT(object):\n    \"\"\"Estabelece a interface bás", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "    class NotAModel:\n        pass\n    engine.bind(NotAModel)\n    assert False, \"Should have raised InvalidModel\"\n    # noinspection PyUnresolvedReferences\n    with pytest.raises(InvalidModel):\n        engine.bind(NotAModel)\n\n\ndef test_bind_abstract(engine):\n    \"\"\"Can bind abstract", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "    assert u6.base_value == 1.98892e-14\n\n    # Test that we can handle units with no base value\n    u7 = Unit(\"Msun/pc**3\", base_value=None)\n    assert u7.base_value is None\n\n    # Test that we can handle units with", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "tests/unit/pywbemcli/cli_test_extensions.py\ndef execute_command(cmd, args, env=None, stdin=None, verbose=False,\n                    capture=True):\n    # pylint: disable=too-many-arguments\n    \"\"\"\n    Execute a command and return the return code, stdout, and stderr.\n\n    Parameters:\n      cmd", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "        List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule());\n        modules.add(new LoanModule());\n        modules.forEach(module -> {\n            if (module.initialize(logger, container)) {\n                logger.info(\"Module \" + module.getName() + \" has been enabled!\");\n            } else {\n                logger.warn(\"", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "        tag = TAG()\n        self._call_fmod(\n            \"FMOD_Sound_GetTag\",\n            index,\n            name,\n            byref(tag),\n        )\n        return tag\n\n    def set_tag(self, index, name, data, datalen, datatype):\n        \"\"\"Set a metadata tag.\n\n        '", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                    public void startEditAccountActivity(Account account) {\n                        Intent intent = EditActivity.getIntent(MainActivity.this,\n                                R.string.account_edit_title, account, new AccountEditController(),\n                                R.string.ok_button, R.string.cancel_button);\n                        startActivityForResult(intent, NEW_ACCOUNT_RESULT);\n                    }\n\n                    @Override\n                    public void", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<ImgurResponseWrapper<List<String>>> listAccountImageIds(\n\t\t\t", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "        resource = ThermometerResource(aircraft.sensors.thermometer)\n\nclass PitotTubeResourceTests(TestCase):\n    def test_get_pitot_tube_data(self):\n        huginn_data_path = configuration.get_data_path()\n\n        fdm_builder = FDMBuilder(huginn_data_path)\n        fd", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "    column = User.age\n    value = 3\n    expected_ref = \"#n0[:v0]\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_names = {\"#n0\": \"d_age\"}\n    expected_values = {\":v0\": expected_action.value}\n\n    ref,", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "            Platform.runLater(new Runnable() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tAlert alert = new Alert(AlertType.INFORMATION, \"Error adding to queue:\\n\" + e.getMessage(), ButtonType.OK);\r\n\t\t\t\t\talert.showAndWait();\r\n\t\t\t\t}\r\n\t\t\t});\r\n            return false;\r\n        }\r\n", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "            comment_form = self.form_class()\n        else:\n            comment_form = self.form_class(initial={'comment' : 'You must be logged in to comment.'})\n        paginator = Paginator(nodes, 10)\n        page = request.GET.get('page')\n        try:\n            nodes = paginator.page(page)\n        except Page", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending terms to use in gif searching.\n     * Clicking on these terms can perform searches with the term itselft as the query\n     *\n     * @param serviceIds a", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "            of(mConnectionSuccessListener).ifPresent(connectionSuccessListener -> connectionSuccessListener.failed(connectionErrorCode));\n        }\n    };\n\n    @NonNull\n    private final WifiConnectionReceiver mWifiConnectionReceiver = new WifiConnectionReceiver(mWifiConnectionCallback, mWifiManager);\n\n    @NonNull\n    private final WifiStateReceiver mWifiStateReceiver =", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "mobile/src/main/java/de/unima/ar/collector/sensors/CustomCollector.java\npublic abstract class CustomCollector\r\n{\r\n    private int type;\r\n    private boolean registered = false;\r\n\r\n\r\n    public CustomCollector(int type)\r\n    {\r\n        this.type = type;\r\n    }\r\n\r\n\r\n    public abstract void register();\r\n\r\n    public abstract void dereg", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "        for (PlaySession ps : stack.getPlaySessions()) {\n            ps.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "    def __init__(\n        self,\n        log_path: str,\n        feats_path: str,\n        vad_path: str,\n        vad_options: MetaDict,\n        min_pause_duration: float = 0.2,\n        max_segment_length: float = 6.0,\n        snap_boundary_threshold: float =", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "    private final Deployments deployments;\n    private final Errands errands;\n    private final Vms vms;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    \n    public SpringDirectorClient(URI uri, RestTemplate restTemplate) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    def set_tag(self, index, name, type, datatype, data):\n        \"\"\"Set a metadata tag.\n\n        'Tags' are metadata stored within a sound file. These can be", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "                bitpos=section.bitpos_start + section.length.bitpos\n            )\n        else:\n            if nbytes_write != bufr_message.length.value:\n                raise PyBufrKitError('Declared length ({}) does not match actual length ({})'.format(\n                    bufr_message.length.value, nbytes_write))\n\n        #", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "        form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            comments = form.cleaned_data['comments']\n            abuse_report = AbuseReport.objects.create(\n                logged_against=logged_against,\n                logged_by=logged_by,\n                abuse_comment=comments,\n            )\n            messages.success(request, _", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "    public void listenToResultSet(final BenchmarkMethod meth, final AbstractMeter meter, final double data) {\n        // do nothing\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void listenToException(final AbstractPerfidixMethodException exec) {\n        // do nothing\n    }\n\n", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "        ApplicationOptions options = new ApplicationOptions(args);\n        ProtTestFacade facade = factory.createFacade(options, MPJ_ME, MPJ_SIZE);\n        facade.run();\n        finalize(0);\n    }\n\n    /**\n     * Finalizes the application.\n     * \n     * @param exitCode the exit code\n     */\n", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(ID(\"myRecording\"), URL(\"/record\"), BEEP(true), SEND_TONES(true), EXIT_TONE(\"1\"));\n\t\ttropo.on(EVENT(\"continue\"), Do.say(\"Thank you for your call.\"));\n\t\ttropo.on(EVENT(\"timeout\"), Do.say(\"You did not respond in", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "                VerificadorDePrazos.estaNoPrazo(listaDeRespostas.getPropriedades().getPrazo())) {\n            nenvios = listaDeRespostas.getPropriedades().getNumeroDeEnvios();\n            nmaxenvios = listaDeRespostas.getPropried", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(ProgramPageView.class);\n\t\t\t\t\tadapter.mTracks = ProgramManager.getInstance().mTracks;\n\t\t\t\t\tmViewPager.setAdapter(adapter);\n\t\t\t\t\tmViewPager.setOnPage", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "    PlayerUIController controller;\n\n    @Mock\n    AdInterface adInterface;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    StateFactory factory;\n\n    @Inject\n    FsmComonent component;\n\n    @Before\n    public void setUp() throws Exception {\n\n        Dagger", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tappEvent.fireEvent(AppEvent.Event.EXIT) ;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tauthorize(new SimpleBrowserImpl(stage, \"https://www.google.com\"), new Callback<Credential>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess(Credential result) {\n\t\t\t\t\tlogger.info(\"Login success\") ;\n\t\t\t\t\tConfiguration", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "    String className = type.getQualifiedName().toString();\n    ClassName adapterClassName = adapterName(ClassName.get(packageName, className), INJECT_ADAPTER_SUFFIX);\n    ClassName bindingClassName = bindingOf(injectableType(type.asType()));\n    ClassName membersInjectorClassName = ClassName.get(\n        packageName, className + \"$MembersInjector\");\n   ", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\r\n         */\r\n        public static void enableReceiveNormalMsg(boolean enable){\rNext line of code:\n            new EnableReceive", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '--message-type', 'c", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "    elif is_comment_node(elem) and context.parent_map.get(elem) is None:\n        return f'/comment()[{context.position}]'\nNext line of code:\n    elif elem == root:\n        return path\nNext line of code:\n    elif elem == root.getroot():\n        return path + '/Q{%s", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "t = Table({'a': [1, 2, 3], 'b': [4, 5, 6]})\nt.add_column('c', [7, 8, 9])\nt.add_column('d', [10, 11, 12])\nt.add_column('e', [", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "                TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n        }\n    }\n\n    private void sendUserInfoRequest()\n    {\n        synchronized (_lockObject)\n        {\n            if (_pendingAudiologistInfo)\n            {\n                return;\n            }\n\n           ", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append(dmy_rightvar)\n\n\t\tEXOG.append(dummy_code_cosine(time_var, period = period))\n\n\t\tEXOG.append(dmy_leftvar * dummy_code_cosine(time_var, period = period))\n\n\t\tEXOG.append(dmy_right", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "        assertThat(main.getStackTrace().getHead().getMethodName(), equalTo(\"busyWaiting\"));\n    }\n\n    @Test\n    public void busyWaitingWithLock() {\n        ThreadDumpThread main = sut.thread(\"main\");\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(main.getStackTrace().getHead().", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "                DatePicker picker = new DatePicker(this);\n                picker.setSelectedItem(mRecord.getRecordTime().getYear(),\n                        mRecord.getRecordTime().getMonth() + 1,\n                        mRecord.getRecordTime().getDay());\n                picker.setOnDatePickListener(new DatePicker.OnYearMonthDayPickListener() {\n                    @Override", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "mobile/src/main/java/de/unima/ar/collector/sensors/CustomCollector.java\npublic abstract class CustomCollector\r\n{\r\n    private int type;\r\n    private boolean registered;\r\n    private boolean registerCollector;\r\n    private int sensorRate;\r\n\r\n\r\n    public CustomCollector(int type, boolean registerCollector, int sensorRate)\r\n    {\r\n       ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "    private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private ViewPager mViewPager;\n    private TabLayout tabLayout;\n    private CheckBox cbShow;\n    private CheckBox cbHide;\n    private CheckBox cbChameleon;\n    private CheckBox cbVibrate;\n    private CheckBox cbNavbarHeight;\n", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "        self.tracerouter = Tracerouter.Tracerouter()\n        self.pcap_logger = PcapLogger.PcapLogger(config.pcap_logdir)\n        self.time_manager = TimeManager.TimeManager()\n        self.time_manager.get_time_error = self.get_time_error\n        self.time_manager.method = \"none\"\n       ", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "deltas = api_client.deltas.since(\"cursor\")\nnylas/client/delta_models.py\nclass Deltas(RestfulModel):\n    attrs = (\n        \"cursor_start\",\n        \"cursor_end\",\n        \"_deltas\",\n    )\n    read_only_attrs = tuple(attrs)\n\n    def __init__(self,", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "        self,\n        emails,\n        duration,\n        interval,\n        start_at,\n        end_at,\n        buffer=None,\n        free_busy=None,\n        open_hours=None,\n    ):\n        if isinstance(emails, six.string_types):\n            emails = [[emails]]\n        elif isinstance(emails[0], list) is False", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "    this);\n    activityLightLevelManager = new ActivityLightLevelManager(activityLightLevelChanger, sharedPreferences);\n    activityLightLevelManager.onResume();\n\n    // Set up the UI\n    setContentView(R.layout.main);\n    skyView = (GLSurfaceView) findViewById(R.id.skyview);\n    skyView.setRenderer(rendererController", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "            non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_thermochemical_prob = 0\n        lnlike = multi_phase_error + eq_thermochemical_prob + act", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "            Str('Identity', Pt=ID(), Len=8) \\\r\n            ])\r\n        if with_options:\r\n            self.append(Options())\r\n        self.map(kwargs)\r\n\r\n# section 9.2.13\r\nclass LOCATION_UPDATING_ACCEPT(Layer3):\r\n    '''\r\n    Net -> ME\r\n    Dual\r\n    #", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "        TcClassParser(self.__con).parse(device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output))\ntcconfig/parser/_tc.py\nclass TcParser:\n    __RE_DEVICE = re.compile(\"dev (?P<device>[a-zA-Z0-9]+)\")\n   ", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n\n    \ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "    def validation_error(exc_class):\n        def decorator(f):\n            @functools.wraps(f)\n            def _validate(*args, **kwargs):\n                try:\n                    return f(*args, **kwargs)\n                except (\n                    jsonschema.exceptions.ValidationError,\n                    SwaggerMappingError,\n                ) as exc:\n                    #", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
