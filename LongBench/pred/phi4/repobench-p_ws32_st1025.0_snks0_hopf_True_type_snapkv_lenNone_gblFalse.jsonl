{"pred": "    private final transient KademliaRoutingTable routingTable;\n    private final transient MessageFactory messageFactory;\n    private final transient KadConfiguration config;\n\n    /* Timers */\n    private final Timer refreshTimer;\n    private final Timer storeTimer;\n\n    /* Constants */\n    private static final int DEFAULT_REFRESH_INTERVAL = 10000", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        // mParameterListView.setVisibility(View.GONE);\n        mParameterListView.setVisibility(View.GONE);\n\n        mParameterListAdapter = new EffectParameterListAdapter(activity, mEffects);\n        mParameterListView.setAdapter(mParameterListAdapter);\n\n        mImmersiveSensorNavigation = new ImmersiveSensorNavigation(glView);\n        mImmersiveTouchNavigation =", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8]\n    rounds = 1\n\n    @classmethod\n    def eval(cls, pt, rk0, rk1):\n        return tuple([pt + rk0 +", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "    private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private boolean mImmersiveEffectActive;\n    private boolean mImmersiveEffectSensorNavActive;\n    private boolean mImmersiveEffectTouchNavActive;\n    private boolean mParameterPanelVisible;\n\n    public EffectManager(Activity activity, ViewGroup parameter", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event, Consumer<Boolean> callback) {\n        event.save();\n        eventQueue.add(event);\n        callback.accept(true);\n    }\n\n    private void processEvent(Event event", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务配置信息\n     */\n    private TaskProperties taskProperties;\n\n    /**\n     * 任务配置信息\n     */\n    private", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.path(), passphrase, args.checkFileIntegrity());\n\t\t\tif (problems.isEmpty()) {\n\t\t\t\tprint(\"No problems found.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprint(\"Found \" + problems.size() + \" problems:\");\n\t\t\tproblems.stream().sorted().forEach(problem ->", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "            //save the deviceId to storage\n            DatabaseManager.INSTANCE.setDeviceId(deviceId);\n            //save the regId to storage\n            DatabaseManager.INSTANCE.setRegId(regId);\n            //save the userId to storage\n            DatabaseManager.INSTANCE.setUserId(userId);\n            //save the deviceProduct to storage\n            Database", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    when(mockDataStore.getSecurityKeyData(ACCOUNT_NAME, APP_ID_SIGN_SHA256)).thenReturn(\n        new SecurityKeyData(ACCOUNT_NAME, APP_ID_SIGN_SHA256, SERVER_CHALLENGE_SIGN, USER_KEY));\n    U2fSignRequest u2fSignRequest = u2fServer.getSignRequest", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            self.acctA = self.global_config['_acct_client']\n        else:\n            self.acctA = FakeAcctClient()\n        self.acctA.start(self.cId, self.cli, self.cld, self.caller_name, self.username, self.remote_ip, self.global_config['acct_out'])\n       ", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "    __typeid__ = 0\n    __header__ = EmbeddedSignatureHeader\n\n    def __init__(self, uri):\n        super(URI, self).__init__()\n        self.uri = uri\n\n    def __bytearray__(self):\n        return bytearray(self.uri.encode('utf-8'))\n\n    def parse(self", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "def convert_ast_constraint(ast_node):\n  if ast_node.terminal:\n    if ast_node.kind == Expr.REFERENCE:\n      return Ref(data=ast_node.data)\n    elif ast_node.kind == Expr.CONSTANT:\n      return Const(data=ast_node.data)\n    elif ast_node.kind == Expr.OPERATOR:\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_TYPE_FLV);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity != null) {\n            VideoFragment videoFragment = new VideoFragment();\n            video", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        Log.d(\"Location\", \"Latitude: \" + latitude + \", Longitude: \" + longitude);\n        Log.d(\"Location\", \"Time: \" + location.getTime());\n        Log.d(\"Location\", \"Accuracy: \" + location.getAccuracy());\n        Log.d(\"Location\", \"Provider: \" + location.getProvider());\n\n", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "        self.assertRaises(TypeError, InterLayerPipeline, self.net['net1'],\n                          16, self.resource, 1)\n        self.assertRaises(TypeError, InterLayerPipeline, self.net['net1'],\n                          16, self.resource, 1, 1)\n        self.assertRaises(TypeError, InterLayerPipeline, self.net", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "    def __init__(self, *args, **kwargs):\n        nonlocal init_called\n        init_called = True\n        super().__init__(*args, **kwargs)\n\n    class User(BaseModel):\n        id = Column(String, hash_key=True)\n        __init__ = __init__\n\n    engine.bind()\n   ", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "    for context.item in context.inner_focus_select(self[0]):\n        for result in self[1].select(copy(context)):\n            if not isinstance(result, (tuple, XPathNode)) and not hasattr(result, 'tag'):\n                yield result\nfrom ..xpath_nodes import XPathNode\nfrom ..xpath_nodes import TypedElement", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new HSBAdjustTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation(),\n                    new RGBAdjustTransformation(),\n                    new RescaleTransformation(),\n                    new SolarizeTransformation(),\n                    new TritoneTransformation()\n            )),\n    COLOR_EFFECTS(\"", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "    private static final String ARGUMENT_SHARED_ELEMENT_NAME = \"ARGUMENT_SHARED_ELEMENT_NAME\";\n    private static final String TAG = MovieInfoFragment.class.getSimpleName();\n    @BindView(R.id.text_movie_title) TextView movieTitle;\n    @BindView(R.id.text_movie_description) TextView movieDescription;\n    @BindView(R.id.text_movie", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                writeResponse(CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "wild.set_message(wild_report)\nwild.set_message(wild_report)\nwild.set_message(wild_report)\nwild.set_message(wild_report)\nwild.set_message(wild_report)\nwild.set_message(wild_report)\nwild.set_message(wild_report)\nwild.set_message(wild_report)\nwild.set_message(wild_report)\nwild", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    data = SNLIData(c['data_path'], vocab=vocab)\n    data.set_top_k_vocab(c['top_k_vocab'])\n    data.set_sort_by_length(c['sort_by_length'])\n    data.set_shuffle(c['shuffle'])\n    data.set_batch_size(c['batch_size'])\n    data.set_max_len(c['", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.speed0_mps == 0.\n  assert doppler.amplitude_mps == -C / float(GPS.L", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "                Intent intent = new Intent(getActivity(), RaffleActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, Constant.REQUEST_CODE_RAFFLE);\n            } else if (raffle.isValid() && !isMan) {\n                Participant participant = raffle.getFortunateWoman();\n               ", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "                assert self.redlock.locked()\n        with self.assertRaises(TooManyExtensions):\n            self.redlock.extend()\n        self.redlock.release()\n\n    def test_extend_fails_if_not_acquired(self):\n        assert not self.redis.exists(self.redlock.key)\n        with self.assertRaises(ExtendUnlockedLock):\n            self", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        return ConeSettings(self._sptr, \"Sound\")\n\n    @property\n    def threed_distance_filter(self):\n        \"\"\"The distance filter settings for this sound.\n\n        :type: DistanceFilter\n        \"\"\"\n        return DistanceFilter(self._sptr, \"Sound\")\n\n    @property\n    def threed_d", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "    @calg.register(CompressionAlgorithm)\n    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n\n    def __init__(self):\n        super(CompressedData, self).__init__()\n        self._calg = CompressionAlgorithm.Invalid\n        self.data = bytearray()\n\n    def", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        cellSize = findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n        \n        #intensity of cells\n        cellIntensity = findCellIntensity(img3, imgshape, verbose = verbose, out = out, **parameter);\n        \n        #intensity of cells\n        cellIntensity", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume);\n        } else if (accuracy == Accuracy.NICE) {\n            Assets.niceTapSound.play(GlobalConfiguration.feedbackVolume);\n        } else if", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "            while (transactionIterator.hasNext()) {\r\n                Transaction t = transactionIterator.next();\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private boolean checkFileValid(File f) {\r\n\r\n        if (!f.exists()) {\r\n\r\n            System.err.println(\"File does", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                if (query.queryType == RequestType.TIMEBOUND) {\n                    Either<String, String> timeBoundRes = coordinator.getTimeBound(stmnt.dataSource, reqHeaders);\n                    if (timeBoundRes.isLeft()) {\n                        throw new Exception(\"TimeBound info either not available (or)could not be loaded .\" + time", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                    UsageEncryption.OSY,\n                    OperationMode.CBC,\n                    EncryptionAlgorithmCoded.AES128,\n                ),\n                key_name=KeyName(\n                    user_id=message.dialog.client.user_id,\n                    key_type=KeyType.SYMMETRIC,\n                    key_number=1,\n                    key_version=1,\n                ),\n               ", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                            if (env.combExpCheck[i] != 0) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                }\n            } else {\n                env.numCombExpCheck = 0;\n            }\n        }\n\n        if (Config.USE_CRLF) {\n            if (syntax.crl", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),\n    url(r'^pipeline-job-template$', get_pipeline_job_template, name=\"ajax-pipeline-job-template\"),\n    url(r'^save-pipeline-config$', ajax_save_pipeline_config, name=\"ajax-save-pipeline-config\"),\n   ", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tString noData;\n\t\t\n\t\tResourceData (Resources res)\n\t\t{\n\t\t\tint i;\n\t\t\t\n\t\t\tmeter = MainActivity.getMainActivity ().getMeter ();\n\t\t\t\n\t\t\ttags = new EnumMap<SRSLevel, String> (SRSLevel.class);\n\t\t\t\n\t\t\tcolors = new EnumMap<SRSLevel,", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        if storage_type in STORAGE_TYPES:\n            self._storage_type = storage_type\n        else:\n            raise PyOrientBadParamException(\n                \"storage_type must be one of: \" + str(STORAGE_TYPES)\n            )\n        return self\n\n\n#\n# DB CREATE\n#\n# Request: (database-name:string", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public Then<$SystemUnderTest> when(CheckedBiFunction<$SystemUnderTest, $Argument, Void> whenStep) {\n        preparation.prepareFixtures();\n        preparation.prepareFixturesSeparately();\n        return thenStepFactory.buildThenStep(preparation, functions.toFunction(whenStep));\n    }\n\n    @OverrideNext", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    CommandResult result;\n    try {\n      result = process.await();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new IosDeviceException(this, e);\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(this, e);\n    }\n\n    if", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\t// TODO: 11.02.2018 Remove after migration to 0.9.0\n\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(contextRef);\n\t\tif (prefs.getBoolean(\"invertFontColor\", false)) {\n\t\t\ttextColor = Color.WHITE;\n\t\t} else {\n\t\t\ttextColor =", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = XmlUtil.fromXml(Message.class, xml);\n\t\tlog.info(\"weixin >>> \" + message);\n\t\tMessageBuilder builder = Message.buildMessage(message.ToUserName, message.FromUserName);\n\t\tString reply = null;\n\t\tif (message instanceof ReceivedTextMessage) {\n\t\t\tReceivedTextMessage textMessage =", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "    app_info = {}\n    app_info['file_md5'] = genMD5(file_path)\n    app_info['file_path'] = file_path\n    app_info['file_name'] = os.path.basename(file_path)\n    app_info['file_size'] = os.path.getsize(file_path)\n    app_info['", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "        city = await ctx.city()\n        if city is None:\n            raise BadArgument(\"City has not been set for this server. Please set it using `!set city <city-name>`\")\n\n        timezone = await ctx.guild_profile(key='timezone')\n        if timezone is None:\n            raise BadArgument(\"Timezone", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\"), date(2015, 11, 25))\n        self.assertEqual(date_string_to_date(\"11/12/2012\"), date(2012, 12, 11))\n        self.assertEqual(date_string_to_date(\"09/02/", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor(config_file, tempfile.gettempdir())\n        config_actor.start()\n        gevent.sleep(1)\n\n        # startup session database\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.start()\n        gevent.sleep(1)\n\n        # populate database with bait", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                            ShareUtil.shareText(mActivity, picture.getPics()[0]);\n                            break;\n                        case 1:\n                            ShareUtil.sharePicture(mActivity, picture.getPics()[0]);\n                            break;\n                        case 2:\n                            FileUtil.saveImage(mActivity, picture.getPics()[0]);\n                            break;\n                    }\n               ", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\tsaveauto = savemgh_v2\n\t\t\t\t\telif opts.outtype[i] == 'nii':\n\t\t\t\t\t\tsaveauto = savenifti_v2\n\t\t\t\t\telse:\n\t\t\t\t\t\tprint(\"Error: %s is not a valid output type\" % opts.outtype[i])\n\t\t\t\t\t\tquit()\n\t\t\t\t\tfor j in", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                ResponseSyncAdapter.class,\n                InstallDependenciesDialog.class,\n                InstallSurveyDependenciesDialog.class,\n                InstallSurveyDependenciesDialog.InstallSurveyDependenciesFragment.class,\n                InstallSurveyDependenciesDialog.InstallSurveyDependenciesFragment.InstallSurveyDependenciesTask.class,\n                InstallSurveyDependenciesDialog.InstallSurveyDependenciesFragment.InstallSurveyDependenciesTask.Inst", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDH: NotImplemented,\n                PubKeyAlgorithm.ECDHES: NotImplemented,\n                PubKeyAlgorithm.ECDHAN: NotImplemented,\n                PubKeyAlgorithm.ECDAA: NotImplemented,\n                PubKeyAlgorithm.SPHINCS", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "    elif is_xpath_node(item):\n        yield item\nelementpath/xpath_nodes.py\nclass XPathNode(XPathNodeProtocol):\n    \"\"\"\n    Base class for XPath nodes.\n    \"\"\"\n    def __init__(self, parent: Optional[XPathNodeProtocol] = None) -> None:\n        self.parent: Optional[X", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "      'no_members': Counter\n    }\n\n  class HeapNode(object):\n    def __init__(self, sink, load=0):\n      self._sink = sink\n      self._load = load\n      self._downed = False\n\n    def __lt__(self, other):\n      return self._load", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "        nc._send_message_with_protocol(OK(), protocol)\n        protocol.send_string.assert_called_once_with(json.dumps(dict(OK())))\n\n    def test_send(self):\n        \"\"\"\n        Check that the send method works as expected.\n        \"\"\"\n        nc = NetstringConnector(self.event_loop)\n        transport = mock.MagicMock()\n", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);Next line of code:\n        assertTrue(\"is prepared\", qe instanceof PreparedExecution);Next line of code:\n        assertTrue(\"is batch prepared\", qe instanceof PreparedBatchExecution);Next line of code:\n        assertTrue(\"is callable\", qe instanceof", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        ProxyTestDataSource ds = new ProxyTestDataSource();\n        ds.getQueryExecutions().add(new StatementExecution());\n        ds.get", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "                continue\n            \n            # Send the ADR request\n            log.info(\"Sending ADR MAC Command\")\n            self._sendMACCommand(device, command)\n            \n        self.adrprocessing = False\n        returnValue(None)\n        \n    def _createTxpk(self, device, fport, confirmed, fcnt, ack", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        done, errors = return_queue.get(timeout=1)\n                        sum_errors +=", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#Addr_dict = {0:'Not present', 1:'Reserved', 2:'16-bit address', 3:'64-bit address'}\n#is not working with Python 2.6.6\n#(but works with Python 2.7.2)\n#It is a bug in Python 2", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "        ObservableRegistry.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getInstance().unregister(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        chatInfo = inflater.inflate(R.layout.fragment", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\nfints/segments.py\nclass HKTAN2(FinTS3Segment):\n    \"\"\"Zwei-Schritt-TAN-Einreichung, version 2\n\n    Source: FinTS Schnittstellen Spezifikation", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "            time = self.img_handle.time\n\n        else:\n\n            # Get time from config\n            time = self.config.time\n\n        # Convert time to Julian date\n        jd = datetime2JD(time)\n\n        # Add reference time to JSON file\n        json_dict['reference_time'] = jd\n\n\n        # Add the", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "        refreshPublicRoomsList(false);\n    }\n\n    private void refreshPublicRoomsList(Boolean force) {\n        if (force || mPublicRoomsListList == null) {\n            refreshPublicRoomsListAsync();\n        }\n    }\n\n    private void refreshPublicRoomsListAsync() {\n        refreshPublicRoomsListAsync(false);\n   ", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "        self.bingo_card_manager = BingoCardManager(self.dbi)\n        self.bingo_card_writer = BingoCardWriter(self.dbi)\n        self.bingo_data_generator = BingoDataGenerator()\n        self.global_config_cache = GlobalConfigCache(self.dbi, bot=self.bot)\n        self.bingo_card_manager = Bingo", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_seqs)\n\n    #running Ragout\n    logger.info(\"Running Ragout\")\n    ragout = Ragout(raw_bp_graphs, run_stages, phylogeny, naming_ref,\n                    chim_detect, args.solid_scaff", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);\n    }\n\n    /**\n     * Reloads the plugin.\n     */\n    @Override\n", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);\n                }\n                stopGcmPush();\n                stopHwPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HwPush\":\n                if(shouldInit()) {\n                    HMSAgent", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(OBJECT_NAME));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectInstance>>(\n                SET_OBJECT_INSTANCE));\n        registry.put((byte) (REMOVE_NOTIFICATION_LIST", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "    public DefaultMutableTreeNode root;\n    public DefaultMutableTreeNode selected_node;\n    public DefaultMutableTreeNode selected_vuln_node;\n    public DefaultMutableTreeNode selected_host_node;\n    public DefaultMutableTreeNode selected_host_vuln_node;\n    public DefaultMutableTreeNode selected_host_vuln_host_node;\n    public DefaultMutable", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "    private void createMetricChartPanel(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, false);\n        GCStatsChartPanel panel =\n                new MetricChartPanel(\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "        if (packet.getSubType() == PacketType.NOOP) {\n            return;\n        }\n\n        if (packet.getSubType() == PacketType.BINARY_EVENT) {\n            onBinaryEvent(packet, client);\n        } else if (packet.getSubType() == PacketType.BINARY_ACK) {\n            on", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "        lMS.addTrack(factory.createVideoSource(\n            appRtcClient.videoCapturer(), appRtcClient.videoConstraints()));\n      }\n      videoSource = lMS.videoTracks.get(0).source;\n      videoSource.addSink(vsv);\n      pc.addStream(lMS);\n      logAndToast(\"Created local", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "            contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, -1L);\nlibrary/src/main/java/com/evernote/android/job/JobManager.java\npublic static final String PREFS_NAME = \"JobManager\";\nlibrary/src/main/java/com/evernote/android/job/JobManager.java\npublic static final String PREFS_VERSION =", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private CheckBoxPreference preferenceDoubleTapToFlip;\n    private CheckBoxPreference preferenceDoubleTapToFlipFirstCard;\n    private CheckBoxPreference preferenceDoubleTapToFlipFirstCardInStack;\n    private CheckBoxPreference preferenceDoubleTapTo", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "    # inject journal on system object\n    inject(obj, '_journal', DiskJournal(basedir))\n\n    # inject publisher on system object\n    inject(obj, '_publisher', Publisher())\n\n    # inject snapshot timer on system object\n    inject(obj, '_snapshot_timer', SnapshotTimer(60, obj))\n\n    #", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "docker_config.render_command()\nclickable/commands/desktop.py\nclass DesktopCommand(Command):\n    def run_app(self):\n        if self.custom_mode:\n            self.run_custom()\n        else:\n            self.run_desktop()\n\n    def run_custom(self):\n        self.setup_docker()\n        self.run_docker()\n\n    def run", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "    List<Board> results = new ArrayList<>();\n\n    // load all boards in root folder\n    results.addAll(SMTHHelper.LoadAllBoardsInFolder(\"ROOT\"));\n\n    // load all boards in sections\n    for (int i = 0; i < SectionNames.length; i++) {\n      String section", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "        ObservableRegistry.getObservable(this.getClass()).register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getObservable(this.getClass()).remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view =", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t\t// create test-class\r\n\t\tICompilationUnit testClass = model.getJUTElements().getTestClass(true);\r\n\r\n\t\t// create test-methods\r\n\t\tcreateTestMethod(model, testClass, testDataFactories, monitor);\r\n\r\n\t\t// create test-base-methods\r\n\t\tcreateTestBaseMethods(model, testClass", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "        self.simulator_data_client.add_simulator_data_listener(mock_simulator_data_listener)\n        self.simulator_data_client.datagramReceived(mock_simulator_data_datagram, (\"127.0.0.1\", 0))\n\n        self.assertTrue(mock_simulator_data_listener.simulator_data_received.called)\n        self.assertTrue(mock_sim", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "            showResponse = true;\n        } else {\n            showResponse = false;\n        }\n        showMessage();\n    }\n\n    public void setDiffHttpMessage(SentinelHttpMessage httpMessage) {\n        if (httpMessage == null) {\n            BurpCallbacks.getInstance().print(\"setDiffHttpMessage(): HttpMessage NULL", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "    assert simple_table_status(description) == expected_status\n\n\ndef test_simple_status_with_lsis():\n    \"\"\"Status is busy because table isn't ACTIVE, no GSIs\"\"\"\n    description = {\"TableStatus\": \"ACTIVE\"}\n    description[\"LocalSecondaryIndexes\"] = [{\"IndexStatus\": \"ACTIVE\"}]\n    assert simple_table", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "        self._header = ID3Header(fileobj)\nmutagen/id3/_util.py\nclass ID3NoHeaderError(error, ValueError):\n    pass\nmutagen/id3/_util.py\nclass error(MutagenError):\n    pass\nmutagen/id3/_util.py\nclass ID3UnsupportedVersionError", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "      visitBooleanOp(new VisitOp(n, opToOccur.get(op)));\r\n\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitProxOp(n));\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * There is no need to visit the 4th order op because it is always a proximity\r\n", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                    new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new EqualizeTransformation(),\n                    new InvertAlphaTransformation(),\n                    new InvertTransformation(),\n                    new MarbleTransformation(),\n                    new MirrorTransformation(),\n                    new PosterizeTransformation(),\n                    new QuantizeTransformation(),\n                    new ThresholdTransformation()\n                    )),\n    STYLIZATION(\"", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "            exception_class = self._decode_field( FIELD_STRING )\n            exception_message = self._decode_field( FIELD_STRING )\n\n            # Raise the exception\n            raise PyOrientCommandException(\n                exception_message.decode('utf-8'),\n                [ exception_class.decode('utf-8') ]\n            )\n\n        # decode message", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "    api = BalancingData(args.apikey)\n\n    params = {\n        'FromSettlementDate': args.fromdate or date.today() - timedelta(days=1),\n        'ToSettlementDate': args.todate or date.today() - timedelta(days=1)\n    }\n    if args.all_periods:\n        params", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if\n\t\t\titems.add( item );\n\t\t} // for\n\t\treturn items;\n\t} // convertToGalleryItems\n\n\t/**\n\t * Get a list of gallery items from", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key(engine, user) == user_key\n    assert dump_key", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "        new TaskName()), StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_DOTS), StaticString.WHITESPACE,\n        new Colourizer(Colourizer.Color.YELLOW.getCode(), new Percentage()), StaticString.WHITESPACE,\n        StringWrapper.wrap(\"[\", new ProgressBar(", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static A a(Url href, Attribute... attributes) {\n\t\treturn new A(href, attributes);\n\t}\n\t/*\n\t * Shortcuts methods\n\t */\n\tpublic static A a(Url href, Attribute... attributes) {\n\t\treturn new A(href, attributes);\n\t}\n\n\tpublic static Abbr abbr(Attribute...", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "        events.append(Event(e))\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    # Provider\n    def list_providers(self, params=None):\n        data = self.call_api(\"providers\", type=\"", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "            Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:\n     * <pre> assertThat(ds.getBatchStatements(), batch(", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "        } else if (id == R.id.menu_save) {\r\n            if (mWallpaper == null) return;\r\n\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\r\n                    PermissionCode code =", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "  private static final Map<Operator, Occur> opToOccur = new HashMap<Operator, Occur>();\r\n\r\n  static {\r\n    opToOccur.put(Operator.AND, Occur.MUST);\r\n    opToOccur.put(Operator.OR, Occur.SHOULD);\r\n    opToOccur", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.genotype is None:\n\t\t\traise ValueError('Please define path to genotype data!')\n\n\t\tif args.genotype[0].split('.')[-1] in ['bed','bim','fam']:\n\t\t\tif args.vcf:\n\t\t\t\traise ValueError('You can not convert PLINK and VCF data at the", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "        self.beginning_datetime = filenameToDatetime(self.vid_path)\nRMS/FF.py\ndef filenameToDatetime(file_name):\n    \"\"\" Converts a CAMS format file name to a datetime object. \"\"\"\n\n    # e.g. FF_2017-08-01T00:00:00.000Z", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "    p = exactpsf.FixedSSChebZPoly(n2n1=1.518/1.44, zslab=-29.3, alpha=1.173,\n            laser_wavelength=0.488, zscale=0.89, kfki=1.07, sigkf", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);\n\t}\n}\njava/squeek/spiceoflife/ModSpiceOfLife.java\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.renderer.block.model.ModelResourceLocation;\nimport net.minecraft.item.Item;\nimport net.minecraft.item.ItemStack;\n", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "        comments = Comment.objects.filter(post=post).filter(deleted=False).order_by('-net_votes', '-created')\n        comment_form = self.form_class()\n        return render(request, self.template_name, {'post' : post, 'comments' : comments, 'comment_form' : comment_form})\n\nclass EditPost(Login", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\t// TODO: Check whether this is the correct way to get the row index of the selected cell\n\t\t\t\t\t\tint rowIndex = selectedCells.iterator().next().getRowIndex();\n\t\t\t\t\t\t// TODO: Check whether this is the correct way to get the column index of the selected cell\n\t\t\t\t\t\tint colIndex = selectedCells", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "    @keyclass.register(RevocationKeyClass)\n    def keyclass_int(self, val):\n        self._keyclass = [val]\n\n    @keyclass.register(RevocationKeyClass)\n    def keyclass_revocationkeyclass(self, val):\n        self._keyclass = [val]\n\n    @key", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "        if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            if self[1] is None or self[1].evaluate(context) == item.target:\n                yield item\n\n\n@method(function('comment', nargs=0, bp=79, label='kind test'))\ndef select", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "def getAS3PuffleString(client, puffles):\r\n    puffles_as3_str = list()\r\n    for puffle in puffles:\r\n        p_id, p_type, p_sub_type, p_name, p_adopt, p_food, \\\r\n        p_play, p_rest, p_clean, p_hat,", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "    S = psfs.PSF4D(H, I)\n    return S, P\n\ndef make_image_1():\n    P = objs.PlatonicSpheresCollection(pos, rad)\n    H = psfs.AnisotropicGaussian()\n    I = ilms.BarnesStreakLegPoly2P", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "            compile_info = run_mp(\n                compile_information_func,\n                jobs,\n                self.log_directory,\n                return_info=True,\n            )\n        else:\n            compile_info = run_non_mp(\n                compile_information_func,\n                jobs,\n                self.log_directory,\n                return_info=True,\n            )\n\n        self.unaligned_files =", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "    platepar.rotation_from_horiz = RMS.Astrometry.rotationWrtHorizon(platepar)\nRMS/Astrometry.py\ndef rotationWrtHorizon(platepar):\n    \"\"\" Compute the rotation of the FOV with respect to the horizon. \n\n    The rotation is calculated as the angle between the", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "        contentValues.put(JobStorage.COLUMN_END_MS, 70_000L);\n        contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, 50_000L);\n        contentValues.put(JobStorage.COLUMN_LAST_RUN, 40_000L);\n        contentValues.put(JobStorage.COLUMN_NUM_FAILURES, 3);\n        contentValues.put(JobStorage", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "        Toaster.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        Toaster.getInstance().remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        chatRem = inflater.inflate(R.layout.fragment_chat", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "        model = Progress\n        fields = ['component', 'area', 'year', 'fiscal_year', 'value']\ngoals/serializers.py\nfrom rest_framework import serializers\nfrom .models import (Plan, Goal, Theme, Target, Sector, Indicator,\n                     Component, Progress, Area, AreaType)\n", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "            fab.show();\n        }\n    }\n\n    @UiThread\n    protected void handleHistory(ArrayList<Produce> list) {\n        if (list == null || list.size() == 0) {\n            Toast.makeText(getContext(), R.string.no_history, Toast.LENGTH_SHORT).show();\n            return;\n        }\n        HistoryDialog", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "        }).then(new ExecuteOn<Channel>() {\n            @Override\n            protected void doExecute(final Channel value) throws Exception {\n                LOGGER.debug(\"Transport reconnected\");\n\n                context.tryChangeConnectionState(reconnecting, new ConnectedConnectionState(value, true));\n            }\n        }).then(deferred);\n\n        return deferred;\n", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "                new RegisterFragment.RegistrationParam(success, email, password, message));\n    }\n}\npackage de.fau.mad.yasme.android.asyncTasks.server;\n\nimport android.content.SharedPreferences;\nimport android.os.AsyncTask;\nimport android.util.Log;\n\nimport de.fau.mad.yasme.android.controller.ObservableRegistry;\nimport de.f", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "    private final SpatialOperator spatial = new Geography();\n    private final double maxspeed = 50;\n    private final double maxspeed2 = maxspeed * maxspeed;\n    private final double maxspeed3 = maxspeed2 * maxspeed;\n    private final double maxspeed4 = maxspeed3 * maxspeed;\n", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "    private List<FilterType> filterTypes;\n    private HashMap<String, String> filterMap;\n    private List<FilterType> filterTypeList;\n    private List<FilterType> filterTypeList2;\n    private List<FilterType> filterTypeList3;\n    private List<FilterType> filterType", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "  assert isinstance(args.gps_sv[0].getL1Message(), ConstMessage)\n  assert args.gps_sv[0].getL1Message().bitValue == 0\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "        graphics.draw_colored_triangles(tris, fills)\n        g.unapply_shader(self)\n\n    def _render_solid_fill(self):\n        fill = self.style.fill\n        tris = self.triangles\n        self.svg.n_tris += len(tris) / 3\n        if fill:\n           ", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {\n\t\t\t\t\ta = new AppData();\n\t\t\t\t} else {\n\t\t\t\t\ta = new ShortcutData();\n\t\t\t\t}\n\t\t\t\ta.read(reader, data);\n\t\t\t\tapps.add(a);\n\t\t\t}\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow && ClipBoardAction.isShowInStatusBar) {\n                    isClipBoard", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "        self.beg_alt, self.end_alt = self.computeAltitudes()\n\n        # Fit great circle\n        self.normal = fitGreatCircle(self.cartesian_points)\n\n        # Compute the phases of the begining and the end of the meteor\n        self.gc_beg_phase, self.gc_end_phase = greatCirclePhase(self", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void exitFunction(@NotNull FunctionContext ctx) {\n\t\tsuper.exitFunction(ctx);\n\t\tCollection<ParseTree>", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "    /**\n     * Called when the visitor first reaches a node with children.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean enter(ScopeNode node);\n\n    /**\n     * Called when the visitor reaches a leaf node.\n     * @return Determines whether the sibling nodes following this node", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "    private CodeGeneratorFactory codeGeneratorFactory;\n\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n        typeUtils = processingEnv.getTypeUtils();\n        elementUtils = processingEnv.getElementUtils();\n        messager = processingEnv.getMessager();\n        typeUtils =", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "        bind(GerritHttpAuthDataProvider.class).to(GerritHttpAuthDataProvider.Proxy.class);\n        bind(GitHttpAuthDataProvider.class).to(GerritHttpAuthDataProvider.Proxy.class);\n        bind(GerritCheckoutProvider.class).to(GerritCheckoutProvider.Proxy.class);\n        bind(GitCheckoutProvider.class", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                    if (getZxidFromName(snapshots.get(i).getName()) <= zxidLong) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n\r\n                if (snapFile == null) {\r\n                    System.err.println(\"No snapshot file found for zxid \" +", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "        if query_string:\n            query = self.parse_search_query(query_string)\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.has_unassigned_splits()]\n        elif filter_type is FilterType.Income:\n            entries = [e for e in entries if e.is_income", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "        Str('marker', 'marker', Pt=Seg_dict),\n        Str('length', 'length', Pt=0x0000),\n        Str('data', 'data', Pt=0x0000),\n        ]\n    def __init__(self, **kwargs):\n        Layer.__init__(self, **kwargs", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.just(new ArrayList<>());\n\t\t\t\t\t}\n\t\t\t\t\treturn Observable.zip(\n\t\t\t\t\t\t\tObservable.just(query),\n\t\t\t\t\t\t\tObservable.just(query),\n\t\t\t\t\t\t\tObservable.just(query),\n\t\t\t\t\t\t\tObservable.just(query),\n\t\t\t\t\t\t\tObservable.just(query),\n\t\t\t\t\t\t\tObservable.just(query),\n\t\t\t\t\t\t\tObservable.just(query),\n\t\t\t\t\t\t\tObservable.just(query),\n", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "    ps = objs.PlatonicParticlesCollection(\n        pos=POS, rad=rad, param_names=['spheres', 'radii'])\n    ps.add_to_registry()\n    ps.set_radii(4.5)\n    ps.set_positions(POS)\n    ps.set_radii(4.5)\n    ps", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)\n\n\ndef apply_or(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                    int position = RequestFragment.sSelectedRequests.get(i);\r\n                    Request request = CandyBarMainActivity.sMissedApps.get(position);\r\n                    if (request == null) continue;\r\n\r\n                    if (i > 0) stringBuilder.append(\"\\n\");\r\n                    stringBuilder.append(request.toString());\r\n                }\r\n\r\n                if (CandyBarApplication.s", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "            instance, (int, float, Decimal, datetime.datetime, datetime.date, datetime.time,\n                       Duration)\n        ) and not isinstance(instance, bool)\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return issubclass(sub", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "            return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'RubricsPage':\n            return RubricsPage()\n        if pageletId == 'RubricPage':\n            return RubricPage()\n       ", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "                if not checkFileExistence(pattern.get(\"datafile\")):\n                    errmsg += \"Pattern:  %s  Data File:  %s  Does Not Exist!\\n\" % (pattern.get(\"name\"), pattern.get(\"datafile\"))\n                    rvalue = False\n\n            # 2.2 data file", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'caption')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\n    filter_class = ThemeFilter\n    ordering_fields = ('id',", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\nNext line of code:\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\nNext line of code:\n    private CommitItem", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\tgenerationService.setCleaningFolder(false);\n\t\tgenerationService.setParameters(null);\n\t\tgenerationService.setMetadata(null);\n\t\tgenerationService.setSpecificTreatment(null);\n\t\tgenerationService.setMapping(null);\n\t", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                        new ChangePasswordTask(user, \"1\").execute();\n                    }\n                });\n\n        // \"Cancel\" button to cancel the dialog\n        alert.setNegativeButton(R.string.cancel,\n                new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                        // Canceled.\n                    }\n                });\n\n        alert", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()),\n        name=\"package-new\"),\n    url(r'^view/(?P<slug>[\\w-]+)$', TranStatusPackageView.as_view(), name=\"package-view\"),\n", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "peregrine/iqgen.py\n  # Generate Galileo E1B/E1C signals\n  if config.Galileo.E1B:\n    e1b = GalileoE1B(config.Galileo.E1B, config.GPS.L1, config.GLONASS.L1)\n   ", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "    return tgAsDict[\"tiers\"][0][\"entryList\"]\n\n\nclass TestTextgrid(unittest.TestCase):\n    def setUp(self):\n        self.testDir = os.path.dirname(os.path.realpath(__file__))\n        self.testDir = join(self.testDir, \"test_files\")\n        self.testDir = join(self.testDir", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        num_utterances = return_queue.get(timeout=1)\n                        if stopped.stop_check():\n                            continue\n                    except Empty:\n                        for", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "        dataset = UAV123(root_dir, version=version)\n        self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NfS')\n        dataset = NfS(root_dir)\n        self._check_dataset(dataset)\n\n    def test_lasot", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "    <T> T get(FixTag tag, Class<T> type);\n    <T> T get(FixTag tag, Class<T> type, T defaultValue);\n    <T> T get(FixTag tag, Class<T> type, Supplier<T> supplier);\n    <T> T get(Fix", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "            yield chunk_idx, bounds\n\n    def iter_data(self, data):\n        \"\"\"Iterate over chunks of data.\"\"\"\n        for chunk_idx, bounds in self.iter_chunks(data.shape[0]):\n            (s_start, s_end, keep_start, keep_end) = bounds\n            chunk = data_chunk(data, chunk", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\treturn new ExpansionResult(AlvisIRAnyQueryNode.INSTANCE);\n\t\t}\n\t}\n\t\n\tprivate final class ExpansionResult {\n\t\tprivate AlvisIRQueryNode queryNode;\n\t\tprivate List<MatchExplanation> explanations", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\tprivate Validator validator;\n\t\n\tprivate FolderCleaner folderCleaner;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t\t", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "        registry.put((byte) (ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Attribute>(ATTRIBUTE));Next line of code:\n        registry.put((byte) (ATTRIBUTE_LIST ^ RESPONSE_MASK), new MarshalledResponseHandler<AttributeList>(ATTRIBUTE_LIST));Next line of code:\n        registry.put((byte) (", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                        Result res = lp.detectLanguage(content, lang);\n                        if (res.isReliable()) {\n                            String id = LogDB.getNewId();\n                            FileSaver saver = new FileSaver(content, res.getLanguageCode(), \"twitter\", url, id);\n                            saver.save();\n                            Tweet tweetObj = new", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n            for operand in descriptor.operands:\n                lines.extend(self._render_descriptor_helper(operand, indent + INDENT_CHARS))\n        elif isinstance(descriptor, AssociatedDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n            lines.extend", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "        help=\"\"\"network delay time [milliseconds].\n        valid range is 0ms to 60min.\n        e.g. tcset eth0 --delay 100ms\n        \"\"\".format(\n            _get_unit_help_msg()\n        ),\n    )\n    group.add_argument(\n        \"--delay-distro\",\n        dest=\"", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "        return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        try:\n            return self.get_contacts().get()\n        except Contact.DoesNotExist:\n            return None\n        except MultipleObjectsReturned:\n            logging.error(\"Multiple contacts for phone number %s\" % self.phone_number)\n            return None\n\n", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "    pipeline.apply(\"Read live projects\", Read.from(LiveProjectSource.of(org)));\n\n    // Convert projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveProjectStates =\n        liveProjects.apply(ParDo.named(\"Convert projects to GCPResourceState objects\")\n", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "        self.rule = DetectSoft404()\n\n    def test_get_pattern(self):\n        self.assertEqual(self.rule.path_generator.get_pattern(\"http://example.com/admin/\"),\n                         \"/admin/\\\\l\")\n        self.assertEqual(self.rule.path_generator.get_pattern(\"http://example.com/admin/\"),\n                         \"/admin/\\\\l\")\n       ", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ffibuilderRX.compile(tmpdir=cls.tmpdirnameRX.name, verbose=VERBOSE)\n        spec", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "    conditions.append(AndCondition())\n    conditions.append(AndCondition(Condition(), Condition()))\n    conditions.append(AndCondition(Condition(), Condition(), Condition()))\n    conditions.append(AndCondition(Condition(), AndCondition(Condition(), Condition())))\n    conditions.append(AndCondition(Condition(), AndCondition(Condition(), Condition()), Condition", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "        assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 0\n        assert get_square_idx(0, 2) == 0\n        assert get_square_idx(1, 0) == 0\n        assert get_square", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "    private final IJavaProject testProject;\n\n    private final IJavaProject baseProject;\n\n    private final IType testType;\n\n    private final IType baseType;\n\n    private final GeneratorModel model;\n\n    private final GeneratorWizard wizard;\n\n    private final GeneratorWizardMainPage mainPage;\n\n    private final GeneratorWizardT", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "self._varz = self.Varz(\n<|file_sep|>import os\nimport sys\nimport time\nimport json\nimport requests\nimport logging\nimport argparse\nimport threading\nimport random\nimport string\nimport subprocess\nimport signal\nimport socket\nimport re\nimport traceback\nimport datetime\nimport", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate static final int MAX_CHUNKS_PER_PAGE = 1000;\n\tprivate static final int MAX_CHUNKS_PER_PAGE = 1000;\n\tprivate static final int MAX_CHUNKS_PER_PAGE = 1000;\n\tprivate static final int MAX_CHUNKS_PER_PAGE = 1000;\n\tprivate static final int MAX_CHUNKS_PER", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "      () -> Optional.of(List.of(input)));\n    var exitCode = files.map(file -> {\n      log.verbose(file, __ -> \"generate \" + file);\n      return javadocTool.run(cmdLine.toArguments(), file.toArray(new File[0]));\n    }).orElseGet(() -> javadocTool.run(cmdLine", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "        return RespostaComunicarCertificadoICPBRASIL.analisar(retorno)\n\n    def enviar_dados_venda(self, dados_venda):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.enviar_dados_venda`.\n\n        :return: Uma resposta", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "    if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace2_event_log)\n    else:\n      git_trace2_event_log.Write(git_trace2_event_log._GetEventTargetPath())\n\n    # TODO: Remove this once we have a better way to handle the event log", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "    Prefs providePrefs(@ForApplication SharedPreferences prefs) {\n        return new Prefs(prefs);\n    }\n\n    @Provides @Singleton\n    PersistentData providePersistentData(@ForApplication SharedPreferences prefs) {\n        return new PersistentData(prefs);\n    }\n\n    @Provides @Singleton\n    Gson provideGson() {", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "        assertThat(ds, totalQueryCount(5));\n    }\n\n    @Test\n    public void testSelectCount() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution());  // select\n        queryExecutions.add(getMockSelectQueryExecution()); ", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "        return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckOutCommand()\n", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "        verifiers.put(\"Verify Valid CSV\", new ValidCSV());\n        verifiers.put(\"Verify Valid CSV\", new ValidCSV());\n        verifiers.put(\"Verify Valid CSV\", new ValidCSV());\n        verifiers.put(\"Verify Valid CSV\", new ValidCSV());\n        verifiers.put(\"Verify Valid CSV\", new ValidCSV", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "            showProgress(false);\n            Toaster.getInstance().toast(R.string.error_login);\n        }\n    }\n\n    public void onPostRegisterExecute(Boolean success) {\n        if (success) {\n            Log.d(getClass().getSimpleName(), \"Registration successful\");\n            Toaster.getInstance().toast(R.string.successful_registration);\n            showProgress(false", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (invokes the drupal Service user.login)\n     *\n     * @param username the user's username\n     * @param password the user's plaintext password\n", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "        self.textArea.addMessage(lexMessage(text, self.parent().testquirks()), self.chum)\n        self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.selectAll()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n        self.textInput.setFocus()\n", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "            (r'/login', LogInHandler),\n            (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem/([^/]+)/([^/]+)', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/problemlist', Problem", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAnd", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "                throw new ProtTestInternalException(\"Unknown criterion: \" + criterion);\n        }\n\n        return new SelectionChunk(informationCriterion);\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.biocomp.prottest.facade.ProtTestFacade#computeLikelihood(pal.alignment.Alignment, es.uv", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "    return Pair(e1, e2, Sigma(ty1, ty2))\n\n\n@with_info(st_term)\ndef mk_pi(dom, cod):\n    \"\"\"Turn a domain and a codomain into a Pi type.\n    \n    Arguments:\n    - `dom`: an expression or int or float\n    - `cod", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "    void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(PlaybackService playbackService);\n    void inject(DemoSamplesInstallerService demoSamplesInstallerService);\n    void inject(DemoSamplesInstaller demoSamplesInstaller);\n    void inject(AnalyticsTracker analyticsTracker);\n    void inject(KioskModeHandler kioskModeHandler", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "    private List<SliceValue> slices = new ArrayList<>();\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n\n        View view = inflater.inflate(R.layout.fragment_chart_category, container, false);\n\n        chart = (PieChartView) view.findViewById", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "    response = Response()\n    with pytest.raises(ResponseValidationError):\n        prepare_body(response)\n    assert response.text == 'Response validation error: Content-Type must be set'\n    assert response.status_code == 500\n    assert response.body == b''\n    assert response.content_type is None\n\n\ndef test_response_content_type_json():\n", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t@Override\n\tpublic void enterCommandChain(ConsoleCommandParser.CommandChainContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.enterCommandChain(ctx);\n\t}\nNext line of code:\n\t@Override\n\tpublic void exitCommandChain(ConsoleCommandParser.CommandChainContext ctx) {\n\t\t// TODO Auto-generated method", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "                except TextGridParseError as e:\n                    self.return_dict[\"textgrid_error_files\"].append(e)\n                except Exception as e:\n                    exc_type, exc_value, exc_traceback = sys.exc_info()\n                    self.return_dict[\"unknown_error_files\"].append(\n                        (\n                            file_name,\n                            \"\".join(trace", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "        AccelerometerResource,\n        \"/aircraft/sensors/accelerometer\",\n        resource_class_args=(sensors.accelerometer,)\n    )\n\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueFPS())\nhuginn/instruments.py\nclass GPS(object):\n    def __init__(self, fdmexec):\n        self._position = Position(fdmexec)\n        self._velocities = Velocities(fdmexec)\n\n", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "    CMD_OPTION_SUMMARY_HELP_LINE,\n    CMD_OPTION_HELP_HELP_LINE,\n]\n\nINSTANCE_ASSOCIATORS_HELP_INSTANCENAME_LINES = [\n    'INSTANCENAME is the path of the instance for which to list the '\n    'associators.',\n    'The path must be specified in the format of a CIM object path", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t/**\n\t * 后台主页\n\t * @return\n\t */\n\t@RequestMapping(value=\"/manage\",method=RequestMethod.GET)\n\tpublic ModelAndView manage() {\n\t\tModelAndView mv = new ModelAndView(\"manage\");\n\t\tSubject currentUser = SecurityUtils.getSubject();\n\t\tif (currentUser", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                            MessageHelper.showError(project, t);\n                        }\n                        else if(exceptionClass.equals(InvalidOperationException.class)){\n                            MessageHelper.showError(project, t);\n                        }\n                        else if(exceptionClass.equals(SdkClientException.class)){\n                            MessageHelper.showError(project, t);\n                        }\n                        else{\n                            MessageHelper.showCriticalError(project, t", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                       join_keyword=hindi_remind())\n\n    def test_full_e2e_hindi_pregnant_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow for sign up + cancel in Hindi while pregnant...\")\n        self.run_e2e_flow_for_language(language=\"Hindi\",\n                                       person_name=u", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationListener locationListener;\n  protected Location lastLocation;\n  protected boolean locationUpdatesEnabled = false;\n  protected boolean locationUpdatesEnabledWhenActivityVisible = false;\n  protected boolean locationUpdatesEnabledWhenActivityNotVisible = false;\n  protected boolean locationUpdatesEnabled", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "refresh_avd(adb, DYNAMIC_TOOL_DIR, 'MobSF', 'MobSF', 'emulator')\n    print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android AVD\"\n    # changed by davidblus\n    # avd_load_wait(adb)\n    # refresh_avd(", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_Header(Layer):\n    constructorList = [\n        Int('message type', Pt=1, Len=4, Dict=GSM_RR_dict),\n        Int('message length', Pt=5, Len=11),\n        Int('transaction id', Pt=16, Len=4),\n        Int('", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tadjacency_lh = create_adjac_vertex(v_lh,faces_lh)\n\t\t\tadjacency_rh = create_adjac_vertex(v_rh,faces_rh)\n\t\t\tadjacency = np.vstack((adjacency_lh,adjacency_rh))\n\t\t\tadjacency = np.array([", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "        throw new QueryGrammarException(\n            \"Cannot apply operator \" + exp.getOperator() + \" on null value.\");\n    } else {\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(C", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "        CacheList list = new CacheList();\n        list.setName(listName);\n        cacheService.storeCacheList(list);\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final CacheList list = (CacheList) sessionContext.getData(CACHE_LIST);\n    if (list", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "s = s[:-2] + '>'\ns = s[:-2] + '>'\ns = s[:-2] + '>'\ns = s[:-2] + '>'\ns = s[:-2] + '>'\ns = s[:-2] + '>'\ns = s[:-2] + '>'\ns", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                        new TimeEntryOvertimeAggregation()));\n\n        userProjectRoleDc.setQuery(\"select e from ts$UserProjectRole e where e.user = :user\");\n        userProjectRoleDc.setParameter(\"user\", userSession.getUser());\n        userProjectRoleDc.load();\n\n        groupsDc.setQuery(\"select", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "            (True, PubKeyAlgorithm.ElGamal): OpaquePubKey,\n            (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDH): OpaquePubKey,\n            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                            self._expansion_num, ExpansionInfo.BOARDTYPE)\n\n    @property\n    def num_muxed_chans(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                            self._expansion_num, ExpansionInfo.NUMMUXEDCHANS)\n\n    @property\n   ", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "        self.key_size = read_u16le(f)\naaf2/utils.py\ndef read_u32le(f):\n    (result, ) = unpack(b\"<I\", f.read(4))\n    return result\naaf2/utils.py\ndef read_u16le(f):\n    (result, ) = unpack", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "            user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Invitation to join {}'.format(site.name))\n            template = 'accounts/emails/invitation.txt'\n            url = reverse('accounts:activate', kwargs={'uidb64': user.uidb64,\n                                                       'token", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "await PokemonXCache.load_cache_from_dbi(ctx.bot.dbi)\n\nNext line of code:\nawait PokemonXCache.load_cache_from_dbi(ctx.bot.dbi)\n\nNext line of code:\nawait PokemonXCache.load_cache_from_dbi(ctx.bot.dbi)\n\nNext line of code:\nawait PokemonXCache.load_cache_from", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "            ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_CEX:\n            ex = Cex('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_BINANCE:\n            ex = Binance('BCCBTC')\n        elif", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "            if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        if context.item is not None:\n            yield context.item\n\n    else:\n        # XSD typed selection\n        if context.item is not None:\n            context.item = self", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "    helpTestData(0, 10);\n    helpTestData(1, 10);\n    helpTestData(9, 10);\n    helpTestData(10, 10);\n    helpTestData(11, 10);\n    helpTestData(100, 10);\n  }\n  \n ", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tresult.setDefaultField(elt.getAttribute(AlvisIRConstants.XML_SEARCH_DEFAULT_FIELD));\n\t\tresult.setQueryNodeExpanderFactory(QueryNodeExpanderFactory", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                    MiPushClient.registerPush(getApplicationContext(), mi_APP_ID, mi_APP_KEY);\n                    Log.e(MYTAG, \"使用小米推送\");\n                }\n                break;\n            case \"HuaweiPush\":\n                HMSAgent.init(this);\n                HMSAgent.connect(this, new ConnectHandler() {\n                    @Override\n                   ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "    private final KadConfiguration config;\n    private int connectAttempts = 0;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.bootstrapNode = bootstrapNode;\n", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "                tablefmt = 'plain'\n\n            output.append(tabulate(rows, headers=headers, tablefmt=tablefmt,\n                                   numalign=numalign, stralign=stralign,\n                                   missingval='NULL', showheader=show_header))\n    if status:\n        output.append(status)\n\n    return output\n\n\ndef _get_default_table", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "    return words_api(wordnik_api, token)\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@InjectNext line of code:\n\tprivate ConnectorIssues connectorIssues;\n\t@InjectNext line of code:\n\tprivate ConnectorIssues connectorIssues2;\n\t@InjectNext line of code:\n\tprivate ConnectorIssues connectorIssues3;\n\t@InjectNext line of code:\n\tprivate ConnectorIssues connectorIssues4;\n\t@InjectNext line of", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "        self.assertIsInstance(handle, HANDLE)\n\n    def test_create_event_invalid_handle(self):\n        with self.assertRaises(WindowsError) as context:\n            CreateEvent(bManualReset=False, bInitialState=False, lpName=\"\")\n\n        self.assertEqual(\n            context.exception.winerror, 183)  # ERROR_PATH_NOT_FOUND\n\n   ", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info getInfo() {\n        return info;\n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                    return roundEnv.getElementsAnnotatedWith(annotation)\n                            .stream()\n                            .map(element -> {\n                                currentAnnotatedElement.set(element);\n                                return parserHolder.buildParser().parse(element);\n                            });\n                })\n                .flatMap(List::stream)\n                .collect(Collectors.toList());\n        if (!parsedPaths.isEmpty()) {\n           ", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "    protected PageParser pageParser;\n\n    protected ExecutorService executorService;\n\n    protected CountDownLatch latch;\n\n    protected ReentrantLock lock = new ReentrantLock();\n\n    protected Condition condition = lock.newCondition();\n\n    protected AtomicInteger runningThreadCount = new AtomicInteger(0);\n\n    protected AtomicInteger errorThreadCount = new AtomicInteger(0", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "            actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n        }\n\n        PopupHandler.installPopupHandler(editTableView(), actionPopupGroup, \"POPUP\", ActionManager.getInstance());\n    }\n\n    private JsonTreeTable edit", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "    private GuiButton next;\n    private GuiButton prev;\n    private GuiButton forget;\n    private GuiButton select;\n    private GuiButton none;\n    private GuiButton save;\n    private GuiButton close;\n    private GuiText name;\n    private GuiText alias;\n    private GuiText prefix;\n    private GuiCheckbox", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClearAllNotifications();\n            case ConstantStr.FUNC_CLEAR_MEM_CODE:\n                return new BtnClearBackground();\n            case ConstantStr.F", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "        form.setText(Messages.configurationEditorTitle);\r\n        form.getBody().setLayout(new GridLayout(1, false));\r\n\r\n        Section section = toolkit.createSection(form.getBody(), ExpandableComposite.TITLE_BAR);\r\n        section.setText(Messages.configurationWebModuleSection);\r\n        section.setDescription(Messages.configurationWebModuleSectionDescription);\r\n        section.setLayoutData(new GridData(Grid", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "        type = Type()\n        type.name = \"foo\"\n        type.item = Parameter()\n        type.item.name = \"bar\"\n        type.item.type = \"string\"\n\n        self.assertEqual(\"bar\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\n        type = Type()\n        type.name", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "        if _cluster_type not in CLUSTER_TYPES:\n            raise ValueError( _cluster_type + ' is not a valid cluster type' )\n        self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n       ", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "    (primary_blog,) = [blog for blog in blogs if blog['url'] == blog_url]\n    try:\n        account = Account.objects.get(service='tumblr', ident=primary_blog['name'])\n    except Account.DoesNotExist:\n        pass\n    else:\n        account.last_updated = datetime.utcnow()\n        account.save", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t}\n\n\t\t\t\tif(fcpMessage != null) {\n\t\t\t\t\tLogger.error(this, \"Failed to insert message, error code is \" + fcpMessage);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tCloser.close(messageStream);\n\t\t\t}\n\n\t\t\t/* If we got here, the message", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "  0: LOAD_FAST                0 (x)\n  1: LOAD_CONST               1 (10)\n  2: COMPARE_OP               4 (>)\n  3: POP_JUMP_IF_FALSE       10\n  4: LOAD_FAST                0 (x)\n  5:", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "    CreditCard previousCreditCard = null;\n    List<CreditCard> creditCards = null;\n    List<CreditPeriod> creditPeriods = null;\n    List<DailyExpense> dailyExpenses = null;\n    List<DailyExpense> dailyExpensesPrevious = null;\n    List<DailyExpense> daily", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\nPLATFORM_CHOICES = tuple([(slug, slug)\n                          for slug in all_platform_slugs])\n\nclass LanguageAdmin(admin.ModelAdmin):\n    list_display = ('lang_name', 'locale_id', 'lang_status", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "app/src/main/java/com/ratebeer/ratebeer/PropertiesActivity.java\npublic final class PropertiesActivity extends ActionBarActivity {\n\n\tprivate static final int PERMISSIONS_REQUEST_LOCATION = 1;\n\n\tprivate static final String[] PERMISSIONS = new String[]{Manifest.permission.ACCESS_FINE_LOCATION};\n\n\tprivate static final String[] PERMISSIONS_MESSAGES = new", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "        self.__parser = self.__detect_parser(ping_result.stdout)\n\n    def __detect_parser(self, ping_message: str) -> PingParser:\n        \"\"\"\n        Detect ping parser.\n\n        Args:\n            ping_message (str):\n                Ping command output.\n\n        Returns:\n            PingParser:\n        \"\"\"\n\n        if self.__", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "            Log.e(this.getClass().getSimpleName(), \"chat is null\");\r\n            throw new IllegalArgumentException(\"chat is null\");\r\n        }\r\n\r\n        // Restore the latest message on display\r\n        if (savedInstanceState != null) {\r\n            latestMessageOnDisplay = savedInstanceState.getLong(RESTORE_LATEST_MESSAGE_ON_DISPLAY);\r\n        }\r\n\r\n        // Restore", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t\tpublic Cubeshaft() {\n\t\t\ttry {\n\t\t\t\tDisplay.setDisplayMode(new DisplayMode(800, 600));\n\t\t\t\tDisplay.create();\n\t\t\t\tDisplay.setVSyncEnabled(true);\n\t\t\t\tDisplay.setTitle(\"Cubeshaft\");\n\t\t\t\tDisplay.setIcon(new java.awt.Toolkit().getImage(\n\t\t\t\t\t\t\"Cubeshaft", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "    account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string.letters + string.digits) for i in range(20))\n            while", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "        assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n\n        assertThat(qe, isStatementOrBatchStatement());\n        assertThat(qe, isPrepared());\n        assertThat(qe, isBatchPrepared());\n        assertThat(qe, isPreparedOrBatchPrepared());\n        assertThat(qe", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "    } else if (Utils.getXmlNodeValue(doc, TAG_ERROR) != null) {\n      log(\"server response is: error \" + serverMessage.getUploadedFileNames(), null);\n      successful = false;\n      cancelUpload(serverMessage.getUploadedFileNames());\n      return;\n    }\n  }\n\n  private void parseResponse", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "    merged_assembly_points_by_sources = {}\n    for source, assembly_points in assembly_points_by_sources.items():\n        merged_assembly_points_by_sources[source] = merge_assembly_points(assembly_points)\n    merged_assembly_points = []\n    for source, assembly_points in merged_assembly_points_by_sources.items():\n        merged", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n   ", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @group(pass_context=True, category='Bot Info', aliases=[\"globalconfig\"])\n    async def cmd_globalconfig(self, ctx, config_name", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.isInstalled())\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onDone() {\n\t\t\t\t\t\t\tgd.levelsManager.showSuccessfullyInstalledDialog();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ActionMenuElement.LOAD:\n\t\t\t\t\tif (!", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "    private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /** Defines the first visible day of the week. */\n    protected int firstVisibleDayOfWeek = 1;\n\n    /** Defines the last visible day of the week. */\n    protected int lastVisibleDayOfWeek = 7;\n\n    /** Defines the first visible hour of the", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n    }\n\n    @Override\n    public Stemcells stemcells() {\n        return", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "    new DefaultPublicKeyLocator(\n        new IdentityServerDescriptorProvider(), new JsonServerInfoResolver(SERVER_INFO));\n\n    locators = new VerifierProviders();\n    locators.setVerifierProvider(SignatureAlgorithm.HS256, hmacLocator);\n    locators.setVerifierProvider(SignatureAlgorithm.RS256, rsaLocator", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n\n", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                } catch (FilesNotFoundException e) {\n                    // Expected\n                }\n            }\n\t\t\t\n\t\t\tfor(int i=0; i < 10; ++i) \n\t\t\t\tclient.deleteObject(containerName, names[i]);\n\t\t\t\n\t\t\tassertTrue(client.deleteContainer(containerName));\n\t\t} catch (Exception e) {\n\t\t\te", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                    trackHistoryRepository.insert(new TrackHistoryEntry()\n                            .setUid(station.getUuid())\n                            .setUid(station.getUuid())\n                            .setUid(station.getUuid())\n                            .setUid(station.getUuid())\n                            .setUid(station.getUuid())\n                            .setUid(station.getUuid())\n                            .setUid(station.get", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "DrawerLayout.DrawerListener, ProjectsFragmentListener, QueuesFragmentListener, StashesFragmentListener, FavoritesFragmentListener, PatternFragmentListener, StashFragmentListener, QueuedProjectFragmentListener, ProjectFragmentListener, StashFragmentListener, QueuedProjectFragmentListener, ProjectFragmentListener, StashFragmentListener, Que", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public HomeAdapter(Context context, List<Home> homes) {\r\n        mContext = context;\r\n        mHomes = homes;\r\n        mImageStyle = ViewHelper.getHomeImageViewStyle(\r\n                mContext.getResources().getString(R.string.home_image_style));\r\n    }\r\n\r\n    @NonNull\r\n   ", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING, Default.ENCODING)\n\n    if typepy.is_empty_sequence(format_name):\n        format_name = \"html\"\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(ConfigKey.PROXY_SERVER)\n\n    convert_configs = load_convert_config(\n       ", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "        return _item.playlistItemID\n        return _item.playlistItemID\n        return _item.playlistItemID\n        return _item.playlistItemID\n        return _item.playlistItemID\n        return _item.playlistItemID\n        return _item.playlistItemID\n        return _item.playlistItemID\n", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "        self.assertRaises(\n            InputError,\n            _environment_to_string,\n            {u\"key\": u\"value\", 42: u\"other_value\"})\n\n    def test_type_check_for_environment_value(self):\n        self.assertRaises(\n            InputError,\n            _environment_to_string,\n            {u\"key\": 42", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "    if isinstance(cmd, GitcAvailableCommand) and not cmd.manifest.IsGitc:\n      print(\"fatal: '%s' requires GITC to be available\" % name,\n            file=sys.stderr)\n      return 1\n```\n\n## Your task: \nPlease modify the code to include a new command class", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "            } catch (TaskDataException e) {\n                taskData.setErrorInfo(e.getMessage());\n                taskData.setState(TaskData.STATE_FAIL_PROGRAM);\n            } catch (TaskPartnerException e) {\n                taskData.setErrorInfo(e.getMessage());\n                taskData.setState(TaskData.STATE_FAIL_PARTNER);\n            } catch (Exception e)", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "        entry = Entry.create(\"http://example.com\")\n        await r.after_headers(entry)\n\n    @async_test()\n    async def test_reject_404(self):\n        r = RejectStatusCode(404)\nNext line of code:\n        entry = Entry.create(\"http://example.com\", response=StaticResponse(404,", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "        //保存用户的学号和姓名\n        SharedPreferences.Editor editor = sp.edit();\n        editor.putString(\"stuXH\", stuXH);\n        editor.putString(\"stuName\", stuName);\n        editor.commit();\n        //保存用户的url\n        String url = \"http://jwgl.qingdao", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "        Qdisc.attach(self.__con)\n        Qdisc.create()\n        self.__device = device\n        self.__ifb_device = None\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__export_path = export_path", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "            state[\"inventory\"] = [mudobj_ref(item) for item in inv]\n        except AttributeError:\n            pass\n\n    def add_location_property(self, state: Dict[str, Any], obj: Location) -> None:\n        try:\n            state[\"location\"] = mudobj_ref(obj.location)\n        except AttributeError", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  public Query visit(Ord4Search n, Query query) {\r\n    List<Query> queries = new ArrayList<Query>();\r\n    List<Occur> occurs = new ArrayList<Occur>();\r\n    List<Operator> ops = new ArrayList<Operator>();\r\n    List<Boolean> isPhrase = new ArrayList<Boolean>();\r\n   ", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t}\n\n\tpublic ParameterizedGenerationService(boolean cleaningFolder) {\n\t\tthis.pipelineGenerator = new PipeLineGeneratorImpl();\n\t\tthis.valorizatorParameters = new ValorizatorParametersImpl();\n\t\tthis.validator = new ValidatorImpl();\n\t", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "        try {\r\n            decoder = (DataDecoder) Class.forName(dataDecoder).newInstance();\r\n        } catch (Exception ex) {\r\n            System.err.println(\"Error while creating data decoder\");\r\n            exit(1);\r\n        }\r\n\r\n        DataNodePrinter dnp = new DataNodePrinter(print, decoder);\r\n\r\n        if (snapFile !=", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "            self.params[\"root_dispersion\"] = self.root_dispersion\n        except UncertainTimeError:\n            log.error(\"We couldn't find out how accurate your clock is.  Switzerland won't work.\")\n            sys.exit(1)\n\n    def run(self):\n        self.start()\n        self.link_to_switzerland()\n", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "        cursorById.close();\n\n        // Test the content provider query with a selection\n        where = new MovieSelection();\n        where.id(movieRowId);\n        cursorById = mContext.getContentResolver().query(MovieColumns.CONTENT_URI,null,where.sel(),where.args(),null);\n        DataTestUtilities.validateMovieCursor(\"query by", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n   ", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "        self.assertIsNone(node_children('a text node'))\n        self.assertIsNone(node_children('a comment node'))\n        self.assertIsNone(node_children('a processing instruction node'))\n        self.assertIsNone(node_children('a document node'))\n        self.assertIsNone(node_children('a namespace node'))\n        self.assertIsNone(node_children('a", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.map_view);\r\n\t\tdataProvider = DataProvider.getDataProvider(this);\r\n\t\tlocationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE),", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "ConfigCommandProcessor(\nConfigVlanCommandProcessor(self.switch_configuration, self.logger),\nConfigVRFCommandProcessor(self.switch_configuration, self.logger),\nConfigInterfaceCommandProcessor(self.switch_configuration, self.logger)\n)\n)\nfake_switches/cisco/switch_core.py\nclass BaseCiscoSwitchCore(switch_core.SwitchCore):\n   ", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "  assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutputConfig2():\n  '''\n  Output configuration selection test", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\nsatcfe/cliente.py\nclass ClienteSATLocal(FuncoesSAT):\n    \"\"\"Sobrescreve o método ``analisar`` de cada resposta para retornar uma\n    resposta especializada.\n\n    \"\"\"\n\n", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    # TODO: this is a hack to get around the fact that we don't have a way to specify the reference state\n    # TODO: this is also a hack to get around the fact that we don't have", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "api.add_resource(ForcesResource, \"/fdm/forces\",\n                 resource_class_args=(fdm.fdmexec,))\nhuginn/rest.py\nclass ForcesResource(ObjectResource):\n    \"\"\"The ForcesResource object returns the forces that act on the aircraft\n    \"\"\"\n    def __init__(self, fdmexec", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "    def __init__(self, corpus: Corpus, num_jobs: int = 1):\nmontreal_forced_aligner.corpus.corpus import Corpus\nclass Corpus:\n    \"\"\"\n    Class for representing a corpus of data\n\n    Attributes\n    ----------\n    files : :class:`~montreal_forced_aligner.cor", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "    private static final String[] mPermissions = {Manifest.permission.CAMERA};\n\n    private static final int MAX_ZOOM = 10;\n    private static final int MIN_ZOOM = 1;\n\n    private static final int CAMERA_FACING_BACK = 0;\n    private static final int CAMERA_FACING_FRONT = 1", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static Logger getLogger() {\n\t\treturn LogUtil.getLogger();\n\t}\n\n\tpublic static Logger getLogger(Class<?> c) {\n\t", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "        return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private void installActions() {\n        DefaultActionGroup actionGroup = new DefaultActionGroup();\n\n        actionGroup.add(new AddServerAction(this));\n        actionGroup.add(new RemoveServerAction(this));\n        actionGroup.add(new OpenServerAction(this));\n       ", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tcontainer.h1(\"todos\", \"todos\").input(\"new-todo\", \"What needs to be done?\", \"placeholder\").btn(\"add\", \"Add\");\n\n\t\t// List of todos\n\t\tlist = new ViewOnBoth<State, List<Model>>(stateInit, modelsInit) {\n\t\t\t@Override\n\t\t", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "                cropImage(output);\n            }\n        });\n\n        /**\n         * Initialize camera.\n         */\n        if(!checkCameraHardware()) {\n            Toast.makeText(this,\"Camera not supported\",Toast.LENGTH_SHORT).show();\n            finish();\n        }\n        else {\n            if(!checkCameraPermission()) {\n                requestCameraPermission();\n            }\n", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "    private BaseAdapter.OnItemClickListener mOnClickListener = new BaseAdapter.OnItemClickListener() {\n        @Override\n        public void onItemClick(View view, int position) {\n            Song song = mAdapter.getItem(position);\n\n            if (mActivity != null) {\n                mActivity.onSongSelected(song);\n            }\n        }\n    };\n    private BaseAdapter.On", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "    validate_key_condition(model, index, key)\n\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_hash_key_failure(model, index):\n    \"\"\"Single key condition: equality comparison on non-hash key\"\"\"\n    query_on = index or model.Meta\n    key = query_on.range_key == \"value", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "            GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String gcActivityName) {\n        dataset.addGCActivityName(id, gcActivityName);\n   ", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "self.api.add_resource(RestSystem, '/system')\nself.api.add_resource(RestDevice, '/device/<int:deveui>')\nself.api.add_resource(RestDevices, '/devices')\nself.api.add_resource(RestApplication, '/app/<int:appeui>')\nself.api.add_resource(RestApplications, '/", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "        self._file_tree_model = FileTreeModel(root_dir=self._directory)\n        self._file_tree_model.setRootPath(self._directory)\n        self._file_tree_model.setFilter(QtCore.QDir.AllDirs | QtCore.QDir.NoDotAndDotDot)\n        self._file_tree_model.setNameFilters(['*'])\n       ", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "        MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n    ),\n)\n    group.add_argument(\n        \"--reordering\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet reordering", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "    private final static TexturedModal MODAL2 = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n\n    private final static Color TRAY_COLOR = Color.of(0x00000000);\n    private final static Color TRAY_COLOR2 = Color.of(0", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface ItemClickListener {\n        /**\n         * Triggered when an event was clicked\n         *\n         * @param item\n         *            The event that was clicked\n         */\n        void item", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "        if db_type in DB_TYPES:\n            self._db_type = db_type\n        else:\n            raise PyOrientBadParamException(\n                \"db_type must be one of \" + str(DB_TYPES)\n            )\n        return self\n\n    def set_user(self, user):\n        self._user = user\n", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "            client.getBaseClient().upgrade(packet.getData());\n            break;\n        }\n\n        case MESSAGE: {\n            if (packet.getSubType() == PacketType.CONNECT) {\n                client.getBaseClient().onConnect();\n            } else if (packet.getSubType() == PacketType.DISCONNECT) {\n                client.getBase", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem> contentItemList = new ArrayList<ContentItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<Commit", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());\n\t\treturn new GenerationService(preprocessors, generator, postprocessors);\n\t}\n\n\tprivate Generator setGenerator(InFormat inFormat, OutFormat outFormat)", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "    PCollection<GCPProject> liveProjects =\n        pipeline.apply(\"Read live data\", Read.from(new LiveProjectSource(org)));\n    // Convert projects to GCPResourceState objects.\n    PCollection<KV<GCPProject, GCPResourceState>> liveStates =\n        liveProjects.apply(ParDo.named(\"Convert", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "bloop/exceptions.py\nclass InvalidSearchError(Exception):\n    \"\"\"The search expression is invalid.\"\"\"\nclass InvalidSearchError(Exception):\n    \"\"\"The search expression is invalid.\"\"\"\n    def __init__(self, message, *, expression, **kwargs):\n        super().__init__(message)\n        self.expression = expression\n        self", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim, dim, vocab,\n                                                           lookup=lookup)\n            else:\n                raise NotImplementedError()\n            children.append(self._def_reader)\n        else:\n            self._def_reader = None\n\n        if self._retrieval:\n            self", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "    private boolean _isTyping = false;\n    // Guarded by _lockObject.\n    private boolean _isSaving = false;\n    // Guarded by _lockObject.\n    private boolean _isConnected = false;\n    // Guarded by _lockObject.\n    private boolean _isMuted = false", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "    private int pickCount;\n    private int maxVideoCount;\n    private int maxVideoSize;\n    private int maxVideoDuration;\n    private int videoQuality;\n    private ProgressDialog progressDialog;\n    private ArrayList<CustomGallery> mItems;\n    private ArrayList<CustomGallery> mItems2;\n    private ArrayList<Custom", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOutDownLeft(RotateOutDownLeft.class),\n    RotateOutDownRight(RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "            perfil = Perfil.objects.get(user=self.object)\n            perfil_form = UserFormEdicion(instance=perfil)\n            perfil_formset = PerfilInlineFormSet(instance=perfil)\n        else:\n            perfil_form = UserFormEdicion()\n            perfil_formset = PerfilInlineFormSet()\n        return self.render", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setDensity(fog.density);\n        descriptor.setGradient(fog.gradient);\n        descriptor.setColor(fog.color.r, fog.color.g, fog.color.b, fog.color.a);\n\n        return descriptor;\n    }\n\n   ", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic long[] readLongBlock(String path, int blockSizeX, int blockSizeY, long nbBlocksX, long nbBlocksY)\n\t{\n\t\tif(this.handle == null) new ErrorJSON(\"Please open the file first\");\n\t\treturn this.handle.int64().readMatrixBlock(path, blockSizeX, blockSizeY,", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plusActorDetailsComponent();\n}\napp/src/main/java/com/rashwan/reactive_movies/dI/ActorDetailsComponent.java\npackage com.rashwan.reactive_movies.d", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t} catch (final PerfidixException e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark and sending the result to the view\n\t *\n\t * @return if run succeeds\n\t * @throws SocketViewException\n\t *             if socket communication fails\n\t", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "    ci_pipeline_manager = CIPipelineManager()\n    pipeline_config_manager = PipelineConfigManager()\n    transplatform_sync_manager = TransplatformSyncManager()\n    release_schedule_sync_manager = ReleaseScheduleSyncManager()\n    build_tags_sync_manager = BuildTagsSyncManager()\n    yml_based_job_manager = YMLBasedJobManager", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo\n\t\t\t\t\t.getMoreSuitableEndpoint(endpointType);\n\t\t\tif (endpoint == null) {\n\t\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\t\"Couldn't find a suitable endpoint for the given city.\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                planilla_de_relevamiento = form.save()\n                return HttpResponseRedirect(reverse('relevamiento:jerarquizar_producto',\n                                                    args=[planilla_de_relev", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "      return\nequip/analysis/constraint/expr.py\nclass Constraint(object):\n  def __finalize(self):\n    root = self.root\n    self._cstr = None\n    if root.data[0] != COMPARE_OP:\n      return\n    if len(root.children) != 2:\n      return\n", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<TransferAction>       transferActionSupportHandler       = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupportHandler<", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {\n\t\treturn this.addToRound(round, false);\n\t}\n\n\t/**\n\t * Adds this {@link MGPlayer} to the given {@link Round round}.\n\t *\n\t * @param round the name of the round to add the player to\n\t *", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\nassert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\nassert_array_equal(fold([MIN_HASH_VALUE], MAX_HASH_VALUE / 2), [0])\nassert_array_equal(fold([MIN_HASH", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "        else:\n            result = format(value, fmt_token)\n\n    if fmt_modifier:\n        if fmt_modifier == 'o':\n            result = ordinal_suffix(value)\n        elif fmt_modifier == 't':\n            result = ordinal_suffix(value).title()\n        elif fmt_modifier == 'T':\n            result = ordinal_suffix(value).", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.type == DocumentModelItem.Type.Document:\n\t\t\t\treturn default_flags\n\t\t\telif model_item.type == DocumentModelItem.Type.Geometry:\n\t\t\t\treturn default_flags\n\t\t\telif model_item.type == DocumentModelItem.Type.Drawing:\n\t\t\t\treturn default_flags\n\t\t\telif model_item.type == DocumentModelItem.Type.Analysis:\n", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "        object1.properties = {\"a\": object2, \"b\": object3}\n        object2.properties = {\"a\": array}\n        object3.properties = {\"a\": array}\n        object_dto = []\n        object = object1\n\n        response = Hydrator().hydrate_object(object_dto, object)\n\n", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "          FASTDecoder decoder = new FASTDecoder(catBytes, clientConfig);\n          PipeBundle ringBuffers = PipeBundle.buffers(decoder.ringBuffers);\n          FASTReader reader = new FASTReader(decoder, ringBuffers);\n          FASTReader reader2 = new FASTReader(decoder, ringBuffers);\n          FASTReader reader3", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n  to_map_and_back(DFO, DopplerPoly(0, 0, (1, )))\n  to_map_and_back(DFO, DopplerS", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "                containsString(\"hits.total: 2\"));\n        assertThat(\"record with id 'dab:1' is in the index\", searchAllResponse, containsString(\"dab:1\"));\n        assertThat(\"record with id 'dab:2' is in the index\", searchAllResponse, containsString(\"d", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "src/leap/mx/vendor/pgpy/constants.py\nclass TrustLevel(IntEnum):\n    \"\"\"\n    Trust levels for keys.\n\n    0: ultimate\n    1: full\n    2: marginal\n    3: unknown\n    4: none\n    5: invalid\n    \"\"\"\n", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\n\t\t// GeoJSONWriter\n\t\tGeoJSONWriter geoJSONWriter =", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                        res = authz.getResults(\n                            context.<String>get(ContextKeys.SEARCH_FILTER),\n                            context.<ExtMap>get(Global.InvokeKeys.SEARCH_CONTEXT)\n                        );\n                    } catch (SQLException e) {\n                        context.put(ContextKeys.EXIT_STATUS, Cli.EXIT_STATUS_SQL_ERROR);\n                        addContextMessage(context,", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "url(r'^users/$', users_list, name='users-list'),\nurl(r'^users/new/$', new_user, name='new-user'),\nurl(r'^users/(?P<pk>[-\\w]+)/edit/$', edit_user, name='edit-user'),\nurl(r'^users/(?P<pk>[-\\w]+)/delete", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                            Intent intent = new Intent(getActivity(), MixedActivity.class);\n                            intent.putExtra(\"stack\", stack);\n                            intent.putExtra(\"playSession\", dialogFragment.getPlaySession());\n                            startActivity(intent);\n                        }\n                    }\n                });\n                dialogFragment.show(getActivity().getFragmentManager(), \"dialog\");\n            }\n        }\n    }\n\n    private void", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "    private CookBookAdapter adapter;\n    private int page=1;\n    private int totalPage=1;\n    private int type=1;\n    private String url;\n    private String title;\n    private String remark;\n    private String url1;\n    private String url2;\n    private String url3;\n    private", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "        obj.updateBuffImg()\n        obj.updateBlockShape()\n        obj.updateBlockLabel()\n        obj.updateCommentLabel()\n        obj.updateSocketTags()\n        obj.updateControlLabels()\n        obj.updateBlockWidget()\n        obj.updateBlockImage()\n        obj.updateBlockImageLocation()\n        obj.updateBlockImageSize()\n        obj", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "        f = XDA(XorDiff(d1), XorDiff(d2))\n        beta = XorDiff(d3)\n        i, j = self._find_preimage(f, beta)\n        assert f.eval(Constant(i, DP_WIDTH), Constant(j, DP_WIDTH)) == beta\n\n        # test with random", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n\t\tpublic Node transformConstant(ConstantNode node) {\n\t\t\treturn node;\n\t\t}\n\t\tpublic Node transformMultiConstant(MultiConstantNode node) {\n\t\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Load the gates\n\t\tGate.load();\n\t\t\n\t\t// Register the commands\n\t\tbaseCommand = this.getCommand(\"ancientgates\").getBaseCommand();\n\t\tfor (BaseCommand command : commands) {\n\t\t\tfor (String alias : command.get", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "        Challenge challenge = new Challenge(challengeData);\n        connection.saslClient.evaluateChallenge(challenge);\n    }\n\n    private void parseFailure(Element doc) throws IOException {\n        Failure failure = new Failure(doc);\n        connection.saslClient.evaluateChallenge(failure);\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Chaskey = cham.get_Cham_instance(cham.ChamInstance.chaskey_128)\nChaskey128 = BvFunction(Chaskey, 8)\nChaskey192 = BvFunction(Chaskey, 12)\nChaskey256 = BvFunction(Chaskey", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "    private SongListAdapter mAdapter;\n    private FastScroller mFastScroller;\n    private Toolbar mToolbar;\n    private boolean mShowToolbar = true;\n    private boolean mShowFastScroller = true;\n    private boolean mShowHeader = true;\n    private boolean mShowFooter = true;\n    private boolean m", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "            // TODO check if this is the right way to do it\n            // TODO check if this is the right way to do it\n            // TODO check if this is the right way to do it\n            // TODO check if this is the right way to do it\n            // TODO check if this is the", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "        Bit('spare', Pt=0, BitLen=2, Repr='hex'),\n        Int('MsgLen', Pt=0, Type='uint8'),\n        Int('SeqNum', Pt=0, Type='uint8'),\n        ]\n    def __init__(self, **kargs):\n       ", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "            loadSongs();\n        }\n    };\n    private AlbumEditorDialog.OnEditionSuccessListener mOnAlbumEditionSuccessListener = new AlbumEditorDialog.OnEditionSuccessListener() {\n        @Override\n        public void onEditionSuccess() {\n            loadAlbums();\n        }\n    };\n    private AlbumEditorDialog.OnEditionSuccessListener mOnAlbumEdition", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "self.add_file(file)\nmontreal_forced_aligner/utils.py\ndef thirdparty_binary(binary_name: str) -> str:\n    \"\"\"\n    Generate the full path to a thirdparty binary.\n    \"\"\"\n    if shutil.which(binary_name):\n        return shutil.which(binary_name)\n    else:\n        raise FileNotFoundError(f\"Could", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),\n\t\t\t\tuser.getCallbackService(), user.getCallbackPort());\n\t}\n\n\t@GET\n\t@Path(\"listusers\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic UserDTO[] listUsers() {\n", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers that Shodan will send when you make a request to a host.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"shodan/host/headers\")\n   ", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.key(), message.value());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(ImmutableMap.copyOf(message.properties()));\n    }\n  }\n\n  private", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    assert almost_eq(erb[\"glasberg_moore_slaney\"](freq), bandwidth)\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 130.52),\n      (3000, 345.51),\n     ])\n  def test_glasberg_moore_83_example(self,", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "            if debugging:\n                msg = \"{0:08x}: Read dataset, {1:08x} bytes\"\n                logger_debug(msg.format(fp_tell(), file_tell - dataset.file_tell))\n    else:\n        logger_debug(\"read_sequence: bytelength is 0\")\n    if debugging:\n       ", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "    try {\n      final T expressionContext = proxyBuilder.build();\n      CoordinatesWalker walker = new BaseCoordinatesWalker(document) {\n        @Override\n        protected void onParagraph(ParagraphCoordinates paragraphCoordinates) {\n          runProcessorsForParagraph(paragraphCoordinates, expressionContext, document);\n        }\n      };\n      walker.walk();\n", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(page, query.getText().toString(), searchCriteria, prefs);\n    }\n\n    @Override\n    protected IRavelryActivity getRavelryActivity() {\n        return (IRavelryActivity) getActivity();\n", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "    @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags += NotationDataFlags & val\n\n    @sdproperty\n    def name(self):\n        return self._name\n\n    @name.register(bytearray)\n    def name_bytearray(self, val):\n        self", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "        self.textInput.setText(\"\")\n        self.textInput.setFocus()\n        self.parent().messageSent.emit(\"text\", text)\n        self.parent().messageSent.emit(\"server\", serverMsg)\n        self.parent().messageSent.emit(\"client\", lexmsgs)\n        self.parent().messageSent.emit(\"quirks\", quirks)\n", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "def check_string_like(arg, type_, env):\n    if isinstance(type_, _StringLike):\n        return check_arg(arg, type_, env)\n    elif isinstance(type_, Markup):\n        return check_markup(arg, type_, env)\n    else:\n        raise TypeCheckError('Expected string-like value, got {!r}'\n", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime10)):\n            return GregorianMonthDay(value.month, value.day, value.tz", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "    if features is None:\n        features = feature_transforms\n    # TODO: this is a hack to get around the fact that we don't have a good way to get the sublattice configurations\n    # TODO: for the phase we're fitting. This should be fixed in the future.\n    subl", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        if (controller == null || componentController == null || fsmPlayer == null || adMedia == null) {\n            ExoPlayerLogger.e", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "mobile/src/main/java/de/unima/sensorcollector/CollectorConstants.java\npublic class CollectorConstants\r\n{\r\n    public static final int TYPE_ACCELEROMETER = 1;\r\n    public static final int TYPE_MAGNETIC_FIELD = 2;\r\n    public static final int TYPE_ORIENTATION = 3;\r\n    public static final", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "    Call<Suggestions> getSuggestions(@Query(\"q\") String query);\n\n    @GET(\"packs\")\n    Call<PackResponse> getPacks(@Query(\"ids\") String ids);\n\n    @GET(\"packs\")\n    Call<PackResponse> getPacks(@Query(\"ids\") String ids,\n                                @Query", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "        return Stream(model=model, engine=self, position=position)\n\n    def transaction(self, *, condition=None, items=None, mode=None, **kwargs):\n        \"\"\"Create a transaction that can be used to atomically modify multiple models.\n\n        .. code-block:: python\n\n            # Create a transaction that will save a User", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "        self.log.info(\"confusion matrix:\\n%s\" % ConfusionMatrixFormatter().format(confusion_matrix, data_set.label_map))\naudeep/commands/classify.py\nclass ClassifyCommand(LoggingMixin, Command):\n    \"\"\"Classify audio files using a pre-trained model.\"\"\"\n\n    def get_parser(self", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t@RequestMapping(value=\"/profile/{username}\",method=RequestMethod.GET)\n\tpublic ModelAndView profile(@PathVariable", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "g = Graph('localhost', 2424, 'root', 'root', database='test')\npyorient/ogm/graph.py\nclass Graph(object):\n    \"\"\"Graph database.\n\n    :param client: OrientDB client instance.\n    :param strict: If True, raise exceptions on errors.\n    :param props", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "        self.init_representation()\naudeep/backend/models/ops.py\ndef window_features(inputs: tf.Tensor,\n                    window_width: int,\n                    window_step: int,\n                    name: str = \"window_features\") -> tf.Tensor:\n    \"\"\"\n    Performs windowing on the input tensor.\n\n    Parameters\n    ----------\n   ", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "all_platform_slugs.extend(TRANSIFEX_SLUGS)\nall_platform_slugs.extend(ZANATA_SLUGS)\nall_platform_slugs.extend(DAMNEDLIES_SLUGS)\nall_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableDefinitionNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(PropertyNode node) {\n        return defaultValue();\n    }\n\n    // Concrete visit methods (NodeNavigation", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t}\n\n\tpublic static H3", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "        final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Class\", '.', Alignment.Center);\n        table.addHeader(\"Method\", '.', Alignment.Center);\n        table.addHeader(\"Meter\", '.', Alignment.Center);\n        table.addHeader(\"Mean\", '.', Alignment.Center);\n        table.addHeader(\"StdDev", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "      walker = Walker(self.graph, visitor, backwards=True)\n      walker.traverse(node)\n      for edge in visitor.edges:\n        if edge.source.kind == ControlFlow.N_LOOP:\n          return edge.source\n      return None\n\n    def get_parent_except(node):\n      class BwdEdges(EdgeVisitor):\n        def __", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.traindata, this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.info(\"Unknown tree type\");\n\t\t\t\tSystem.exit(-1);\n\t\t}\n\t\t\n\t\tthis.t = this.tree.getNumberOfInternalNodes();\n\t\tthis.T = this.t * this", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "def _parse_format_integer(fmt: str, lang: str) -> Tuple[str, str, str]:\n    \"\"\"\n    Parse a format string for the `format-integer` function.\n    \"\"\"\n    fmt = fmt.strip()\n    if not fmt:\n        raise xpath_error('XPST0017', 'empty format string", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                }\n            });\n        }\n\n        @Override\n        public void onBingRuleEvent(final Event event, RoomState roomState) {\n            RoomActivity.this.runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    if (Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {\n                        Room", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI32To33Preprocessor ddi32To33 = new DDI32To33Preprocessor();\n\t\n\tprivate DDI33To32Preprocessor d", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "        self.releve_siej_button = wx.Button(self, -1, \"Générer\")\n        self.Bind(wx.EVT_BUTTON, self.OnGenerationReleveSIEJ, self.releve_siej_button)\n        self.releves_choice = wx.Choice(self)\n        self.releves_choice", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "self.rave = openravepy.RaveCreateRobot(env, '')\npymanoid/sim.py\ndef get_openrave_env():\n    \"\"\"\n    Get the OpenRAVE environment.\n\n    Returns\n    -------\n    env : openravepy.Environment\n        The OpenRAVE environment.\n    \"\"\"\n    if", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "        final QueuedProject queuedProject = queuedProjectResult.queuedProject;\n        View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n        }\n        name.setText(queuedProject.name);\n        author.setText(queuedProject.patternAuthor);\n        gauge_description.setText(queuedProject.patternGauge", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "                new RefreshCommand(),\n                new MigrateCommand());\n        logger.info(\"EconomyLite has been initialized!\");\n    }\n\n    public static ConfigManager getConfigManager() {\n        return configManager;\n    }\n\n    public static ConfigManager getConfigManager(String path) {\n        return configManager.get(path);\n    }\n\n    public static Config", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "        prior_specs = build_prior_specs(prior, params)\n        return {s: prior_specs[i].get_prior(params[i]) for i, s in enumerate(symbols)}\n\n    def _fit(self, context, nwalkers, nsteps, burnin, thin, restart_trace=None, prior=None, **kwargs", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "    return Const.fromValue(arg)\nequip/analysis/constraint/expr.py\nclass Expr(object):\n  \"\"\"\n    Base class for all expressions.\n  \"\"\"\n  def __init__(self, kind, data=None, terminal=True, binary=True):\n    self._kind = kind\n    self._data = data\n   ", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics;\n\tprivate final FringeLayer fringeLayer;\n\tprivate final SpriteBatch batch;\n\tprivate final PingPongEq<SpriteBatch> batchEq = new PingPongEq<>();\n\tprivate final PingPongEq<SpriteBatch> batchEq2 = new PingPongEq<>();\n\tprivate final PingPongEq<SpriteBatch", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new TempSensorView();\n                    o = tview.getView();\n                    ((TempSensorPresenter) tview.get", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic Long reference2() {\n\t\tSet<Long> set = new HashSet<>();\n\t\tAtomicLong aLong = new AtomicLong();\n\t\tjdbcTemplate.query(\"SELECT AUTHOR.*, BOOK.* FROM AUTHOR LEFT OUTER JOIN BOOK ON AUTHOR.ID = BOOK.AUTHOR_ID\", r -> {\n\t\t\tLong authorId = r.getLong(\"AUTHOR", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLQuery getRootQuery() {\n\t\treturn rootQuery;\n\t}\n\n\tpublic void setRootQuery(SQLQuery rootQuery) {\n\t\tthis.rootQuery = rootQuery;\n\t}\n\n\t@Override\n\tpublic void executeServer(SQLTranslation exp, ForestReader in,\n\t\t\tForestWriter out) {\n\t\t// TODO Auto-generated", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "        install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['packagename'], app_info['mainactivity'], True)\n        \n        # TODO: 支持非 activity 组件\n        # TODO: 支持多个 activity 组件\n        \n        # 开始自动化测试\n        auto", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return risks.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into risks\n     */\n    Risk parseRisks(InputStream inputStream);\n\n    /**\n     * Parse", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "                Symbol.typed(bar_type, 'bar'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_if():\n    inc_type = Func[[IntType], IntType]\n    check_expr_type(\n        \"\"\"\n        if", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, query(startsWith(\"...\")));\n\n        // parameter with IntegerMatcher\n        assertThat(pe, paramAsBoolean(0", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "self._viewWidget.on_update_view()\nGUI/Widgets/ViewWidget.py\nclass ViewWidget(QWidget):\n\tdef __init__(self, document: Document, main_window: MainWindow):\n\t\tQWidget.__init__(self)\n\t\tself._document = document\n\t\tself._main_window = main_window\n\t\tself._view", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                            return new NotFoundException(cause);\n                        case 405:\n                            return new APIIncorrectException(cause);\n                    }\n                }\n                return cause;\n            }\n        };\n        // Set up the adapter\n        mAdapter = new RestAdapter.Builder()\n                .setEndpoint(BASE_URL)\n                .setRequestInterceptor(new Interceptor(config", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "registerRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the start token for expressions. The default is <code>${</code>.\r\n\t * \r\n\t * @param startToken\r\n\t *            the start token\r\n\t */\r\n\tpublic void setExprStartToken(String startToken) {\r\n", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_UPPERCASE, false)) {\n\t\t\tlabelFactory = new UpperCaseFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "    url(r'^package/(?P<package_name>[\\w\\.\\-]+)$', AddPackageCIPipeline.as_view(), name=\"package-add-ci-pipeline\"),\n    url(r'^history/(?P<pipeline_id>[\\w\\.\\-]+)$', PipelineDetailView.as_view(), name=\"pipeline-history\"),\n", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "            if (wallpaper.getURL().equals(mWallpapers.get(position).getURL())) {\r\n                return;\r\n            }\r\n\r\n            Wallpaper wallpaper = Database.get(mContext).getWallpaper(wallpaper.getURL());\r\n            if (wallpaper == null) {\r\n                wallpaper = new Wallpaper();\r\n                wallpaper.setURL(wallpaper.get", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "    person = None\n    if not request.user.is_anonymous():\n        person = request.user.person\n    account = account_for_vimeo_id(access_token_data['user_id'], person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        person.user = request.user\n        person.save", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "                _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "    grid = _gen_grid(data, options)\n    \n    # Compute likelihood across grid\n    likelihood = _gen_likelihood(data, options, grid)\n    \n    # Apply prior to likelihood\n    posterior = _apply_prior(likelihood, grid)\n    \n    # Extract metrics from posterior\n    metrics = _extract_metrics(data", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "            UIDialog.getDicesDialog(false);\n          }\n      }\n    });\n    rollBtn.setX(Gdx.graphics.getWidth() - rollBtn.getWidth() - 10);\n    rollBtn.setY(10);\n    rollBtn.setVisible(false);\n\n    doubleBtn = new TextButton(\"Double\", ts);\n    doubleBtn.setX(Gdx.graphics", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "        self.assertListEqual(list(etree_iter_paths(root)), [\n            (root, '.'),\n            (root[0], '/a/Q{http://www.w3.org/1999/xhtml}b1[1]'),\n            (root[0][0], '/a/Q{http://www.w3.org", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "        self.runner.add(ContentSampling(), with_child=True)\n        self.runner.add(ContentSimhashSampling(), with_child=True)\n        self.runner.add(self.rule, with_child=True)\n        self.rule.set_engine(self.engine)\n        self.rule.set_child_heuristics(self.runner.heuristics)\n\n    def test_soft_404(self", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    cfecanc = CFeCancelamento(\n            destinatario=Destinatario(\n                CPF='11122233344',\n                xNome=u'João da Silva'),\n            chCanc='CFe12345678901234567890123456789012345678901234',\n            CNPJ", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a genome.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a genome\n     */\n    Genome parseGenome(InputStream inputStream);\n\n   ", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "            EtsiResponse resp = this.client.send(req);\n            \n            // 5. Construct ASiC file\n            SignatureValue sigValue = resp.getSignatureValue();\n            SignatureValue sigValue2 = this.service.getSignatureValue(sigValue, this.parameters);\n            this.service.writeAsiCFile(sigValue2", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Feature:\n\t\t\treturn get_icon(\"feature\")\n\t\telif type(obj) is Plane:\n\t\t\treturn get_icon(\"plane\")\n\t\telif type(obj) is Proformer:\n\t\t\treturn get_icon(\"pro", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "mobile/src/main/java/de/uniba/dsg/krail/krail/plot/Plot.java\npublic class Plot\r\n{\r\n    private XYPlot plot;\r\n    private XYPlot plot2;\r\n    private XYPlot plot3;\r\n    private XYPlot plot4;\r\n    private XYPlot plot5;\r\n    private XYPlot", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<Game> schedule;\n\tprivate TeamLeaders teamLeaders;\n\tprivate List<PlayerOverview> playerOverview;\n\t\n\tpublic Team(String teamId) throws TeamNotFoundException {\n\t\tTeamSummaryResponse teamSummaryResponse = getTeamSummary(teamId);\n\t\tif (teamSummaryResponse == null) {\n\t\t\tthrow new TeamNotFoundException(\"Team not", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "        DeviceInfo deviceInfo = new AndroidDeviceDetailsInfo().getDeviceInfo();\n        Feedback feedback = new Feedback(\n                userFeedback.getType().toString(),\n                userFeedback.getMessage(),\n                userFeedback.getBase64Screenshot(),\n                userFeedback.getBase64Screen(),\n                deviceInfo,\n                packageInfo,\n                email,\n                sessionManager", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "            table_index.setdefault(table_name, []).append(key)\n            object_index.setdefault(table_name, []).append(obj)\n\n        for table_name, keys in table_index.items():\n            request[table_name] = {\n                \"RequestItems\": {\n                    table_name: {\n                        \"Keys\": keys,\n                        \"ConsistentRead\": consistent", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "                print(draw_art(key['key_size'], key['key_algo'], fingerprint))\n            print('Fingerprint: {0}'.format(format_fingerprint(fingerprint)))\n            print('Description: {0}'.format(description))\n            print('Created at:  {0}'.format(created_at))\n            print('')\n\n    async def", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\nfrom django.contrib import admin\nfrom django.utils.translation", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "        return RespostaExtrairLogs.analisar(retorno)\nsatcfe/resposta/consultarultimafiscal.py\nclass RespostaConsultarUltimaFiscal(RespostaSAT):\n    \"\"\"Resposta para a consulta da última venda do SAT.\n\n    .. note::\n\n        Esta classe é uma", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "        self.assertEqual(node_document_uri(document), 'file:///')\n        self.assertIsNone(node_document_uri(self.elem))\n        self.assertIsNone(node_document_uri('a text node'))\n\n    def test_node_children_function(self):\n        self.assertEqual(node_children(self.elem), iter(self.elem))\n        self.assertEqual(node_children(self.document), iter([", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case DURATION_ASC:\n                    Arrays.sort(sorted, new ItemDurationComparator(false));\n                    break;\n                case DURATION_DESC:\n                    Arrays.sort(sorted", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "self.worker.initialize_corpus()\n        self.worker.initialize_corpus()\n        self.worker.initialize_corpus()\n        self.worker.initialize_corpus()\n        self.worker.initialize_corpus()\n        self.worker.initialize_corpus()\n        self.worker.initialize_corpus()\n        self.worker.initialize_corpus()\n        self.worker.initialize_corpus()\n        self.worker.initialize_corpus()\n        self.worker.initialize_corpus", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "    private final OAuth2Requester requester;\n    \n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.sessionController = sessionController;\n        this.state", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "    private final Vms vms;\n    private final Errands errands;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "    public HiMuteStatus getMuteStatus(HiSide side)\n    {\n        synchronized (_lockObject)\n        {\n            return _state.getMuteStatus(side);\n        }\n    }\nDifian/DifianApp/src/main/java/com/sony/difian/ui/MainActivity.java\npublic class MainActivity extends", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "        return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "    public void onClick(GuiMouseEvent event) {\n        if (event.getType() == GuiMouseEvent.MouseEvent.CLICK) {\n            TabbyChat.getInstance().getChatGui().setActiveChannel(channel);\n        }\n    }\n\n    @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        ILocation bounds =", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FORWARD);\n        DoubleDerivatives d3Sad = BlackFormula2.price_Sad(DATA[looptest][0], DATA[looptest][1], DATA[looptest][2], \n            DATA[looptest", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "            VotingModule.class\n    };\n\n\n    /**\n     * Map of module names to Module objects\n     */\n    private HashMap<String, Module> modules;\n\n\n    /**\n     * The AthenaGM plugin instance\n     */\n    private AthenaGM plugin;\n\n\n    /**\n     * Constructor\n     * @param plugin The AthenaGM plugin instance", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize thread pool size.\n     * @return {@link DownloadQueue}.\n     * @see #newDownloadQueue()\n     */\n   ", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "  public void init(MutableConfig config) {\n    config.set(\"packager.packages\", List.of(\"packager\"));\n    config.set(\"packager.packages\", List.of(\"packager\"));\n    config.set(\"packager.packages\", List.of(\"packager\"));\n    config.set(\"packager.packages\",", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList nodeList = element.getElementsByTagName(QUERY_SET_CONFIG_TAG);\n        if (nodeList != null && nodeList.getLength() > 0) {\n            Element querySetConfigElement = (Element", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "                        S['originProb'] = ret['originProb']\n                        S['realrunid'] = ret['realrunid']\n                        S['realsubmittime'] = ret['realsubmittime']\n                        S['runtime'] = ret['runtime']\n                        S['runmemory'] = ret['run", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "            left_foot_task = PoseTask(\n                self.robot, self.robot.left_foot, self.swing_foot.pose,\n                weight=swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance.right_foot,\n", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "    simple_op.add(BvNeg)\n    simple_op.add(BvNot)\n    simple_op.add(Extract)\n    simple_op.add(ZeroExtend)\n    simple_op.add(Concat)\n    simple_op.add(Repeat)\n    simple_op.add(Ite)\n    simple_op.add(RotateLeft)\n    simple_op.add", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew DQTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew SOFSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tif (aJPEG.mColorSpace != null)\n\t", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "            if (sl == null) {\n                JOptionPane.showMessageDialog(\n                        panel,\n                        \"Es wurde keine Sammellastschrift ausgewählt.\",\n                        \"Fehler\",\n                        JOptionPane.ERROR_MESSAGE);\n                return;\n            }\n\n            SqlSession session = sqlSessionFactory.openSession();\n            try {\n                LastschriftenMapper", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "    def generate_pronunciations_arguments(self) -> List[GeneratePronunciationsArguments]:\n        \"\"\"Generate arguments for :func:`~montreal_forced_aligner.alignment.pretrained.generate_pronunciations_func`\"\"\"\n        return [\n            GeneratePronunciationsArguments(\n                os.path.join(self.working_directory", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "        LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        if (!properties.hasLore(key)) {\n            properties.addLore(key);\n            PacketSyncLore.INSTANCE.sendTo(new S\n\n            PacketSyncLore.INSTANCE.sendTo(new S\n\n            PacketSyncLore.INSTANCE.sendTo(new S", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "    private final UserDAO userDAO;\n    private final AuthTokenDAO authTokenDAO;\n    private final CategoryDAO categoryDAO;\n    private final BudgetDAO budgetDAO;\n    private final RecurringDAO recurringDAO;\n    private final TransactionDAO transactionDAO;\n    private final PasswordEncoder passwordEncoder;\n\n    public FinanceService(UserDAO", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger logger = LogUtil.getLogger();\nNext line of code:\n\tprivate static final CloudUtil cloudUtil = CloudUtil.getInstance();\nNext line of code:\n\tprivate static final CollectionsUtil collectionsUtil = CollectionsUtil.getInstance();\nNext line of code:\n\tprivate static final ClasspathUtil classpathUtil = ClasspathUtil.getInstance();\n", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "    FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    RotateIn(RotateIn.class),\n    RotateInDown(RotateInDown.class),\n    RotateInUp(RotateInUp.class),\n    RotateInLeft(Rotate", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        smart_print(\"Solving...\")\n        smart_print(\"Solver:\", solver_name)\n        smart_print(\"Search mode:\", search_mode)\n        smart_print(\"Der mode:\", der_mode)\n        smart_print(\"Initial weight", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "            h5 =  LocalHost5\n        return H()\n\n    def test_init(self):\n        hosts = self.get_hosts()\n        container = HostsContainer({ 'h1': hosts.h1, 'h2': hosts.h2, 'h3': hosts.h3 })\n        self.assertEqual(container.filter('h", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "            return command.startswith(\"tc\")\n\n        return spr.SubprocessRunner(\n            \" \".join(\n                [\n                    \"tc\",\n                    \"show\",\n                    \"dev\",\n                    self.device,\n                    \"qdisc\",\n                    \"root\",\n                    \"parent\",\n                    \"1:\",\n                    \"handle\",\n                    \"1:\",\n                    \"", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1.NAME: False,\n                  NormalRateConfig.GPS.L2.NAME: False,\n", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mOpenHelper.getReadableDatabase();\n\n        String[] projection = {\n                ExpenseEntry._ID,\n                ExpenseEntry.COLUMN_NAME_DESCRIPTION,\n                ExpenseEntry.COLUMN_NAME_AMOUNT,\n               ", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "    private SimpleDateFormat monthFormatter;\n    private SimpleDateFormat yearFormatter;\n\n    private TextView monthTitle;\n    private TextView yearTitle;\n\n    private OnMonthChangeListener onMonthChangeListener;\n    private OnDayChangeListener onDayChangeListener;\n\n    private ScrollManager scrollManager;\n\n    private boolean isPrepared = false;\n\n    private Handler backgroundHandler;\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "    my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert almost_eq(my_stream.take(25), [random.uniform(-1, 1) for _ in xrange(25)])\n\n  def test_inf_input(self):\n    my_stream = white_noise(inf)\n    assert isinstance(my_stream, Stream", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "                isinstance(t2, FuncMeta) and\n                isinstance(t2.__args__, NamedArgs)\n            ):\n                unify(t1, t2.__args__.get(backref.name, None))\n            else:\n                raise\n\n    elif isinstance(t1, UnionMeta):\n        if not isinstance(t2, UnionMeta):\n", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "        self.auth = Auth(login_data=login_data, no_prompt=no_prompt),\n    ):\n        \"\"\"\n        Initialize Blink class.\n\n        :param login_data: dictionary of login data\n        :param no_prompt: boolean to prompt for login data\n        \"\"\"\n        self.auth = Auth(login_data=login_data, no_prompt", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "def populate_analysis(self, analysis, analyses_item):\n\tanalysis_item = self.create_model_item(analyses_item, analysis)\n\treturn analysis_item\nData/Analysis.py\nclass Analysis(Geometry):\n\tdef __init__(self, document):\n\t\tGeometry.__init__(self, document)\n\t\tself.type = GeometryType", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "self._varz.message_bytes_sent(buf.tell())\nscales/thrift.py\nclass ThriftClient(object):\n  def __init__(self, service_cls, sink_stack):\n    self._service_cls = service_cls\n    self._sink_stack = sink_stack\n\n  def __getattr__(self, name):\n    return", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "        assertThat(out.toString(), equalTo(\n                ThreadDumpFactory.fromStream(new ByteArrayInputStream(out.toString().getBytes())).toString()\n        ));\n        assertThat(exitValue, equalTo(0));\n\n        process.destroy();\n        assertThat(process.waitFor(), equalTo(0));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithAuth()", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "        data.setOperation(DrumOperation.UPDATE);\n        return data;\n    }\n\n    private static DrumStoreEntry createNewData(long key, DrumOperation operation, String... val) {\n        DrumStoreEntry data = new DrumStoreEntry();\n        data.setKey(key);\n        if (val != null && val.length > ", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" 个\");\n            }\n        });\n    }\n}\nmedialoader/src/main", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "        return new RoxanaPropertiesMockBuilder()\n                .withLocale(\"pt_BR\")\n                .withBaseName(\"translator-messages-bundle\")\n                .withSuppressFails(false)\n                .withResponseStrategy(ResponseStrategy.TRANSLATED)\n                .build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "    self._socket.write(self._ping_msg)\n    self._last_ping_start = time.time()\n\n  def _CheckInitialConnection(self):\n    \"\"\"Check if the initial connection is still alive.\"\"\"\n    if self._last_ping_start + self._ping_timeout < time.time():\n      self._log.warning('Ping timeout,", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "      assert almost_eq(freq2lag(lag2freq(v)), v)\n\n  def test_freq_lag_converters_are_inverses(self):\n    for v in [37, 12, .5, -2, 1, .18, 4, 1e19, 2.7e", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "            Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy20Service.class,\n            Proxy21Service.class,\n            Proxy22Service.class,\n            Proxy23Service.class,\n            Proxy24Service", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "        SpellHelper.set_dictionary(list(pytz.all_timezones))\nclembot/exts/config/config.py\nclass ConfigCog(commands.Cog):\n\n    _cache = dict()\n    by_guild = dict()\n\n    def __init__(self, bot):\n        self.bot = bot\n        self.dbi = bot.db", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "    elif self.symbol == 'eq':\n        return numeric_equal(*operands)\n    elif self.symbol == 'ne':\n        return not numeric_equal(*operands)\n    elif self.symbol == 'lt':\n        return numeric_less_than(*operands)\n    elif self.symbol == 'le':\n        return numeric_less_than_or_equal(*operands", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "        welcomeString.setText(\"Bienvenido, \" + Utils.getFirstName(getActivity()));\n        return header;\n    }\n\n    private void initializeEvents() {\n        //Menu drawer items with image\n        Event event1 = new Event();\n        event1.setId(Constants.MENU_ID_IMAGE);\n        event1.setResourceIcon(Constants.MENU", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "            // Notify the fragment that the chat was created\n            InviteToChatParam param = new InviteToChatParam(success, newChatId);\n            ObservableRegistry.getInstance().notify(classToNotify, param);\n        } else {\n            // Notify the fragment that the chat was not created\n            InviteToChatParam param =", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "        UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertNotNull(response);\n        Assert.assertEquals(\"SUCCESS\", response.getReturnCode());\n        Assert.assertEquals(\"SUCCESS\", response.getReturnMsg());\n        Assert.assertEquals(\"NATIVE\", response.getTradeType());\n        Assert.assertEquals(\"1001\", response.getPrepay", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "        MessageMapper messageMapper = new MockedMessageMapper(KEY, SUCCESS);\n        MessageTranslated messageTranslated = creator.create(messageMapper);\n        assertEquals(KEY, messageTranslated.getKey());\n        assertEquals(SUCCESS, messageTranslated.getSeverity());\n        assertEquals(KEY, messageTranslated.getMessage());\n    }\n\n    @Test\n    void createWithParametersTest", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "src/main/java/erlbeam/BeamDisasm.java\npublic class BeamDisasm {\n    private static final Logger log = Logger.getLogger(BeamDisasm.class.getName());\n\n    private static final int MAX_INSN_SIZE = 32;\n    private static final int MAX_FUNCTION_SIZE = 1024*1024;\n\n", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "client = Client(username, password, auth_url, insecure=insecure)\ntroveclient/v1/instances.py\nclass Instance(base.Resource):\nclass DatastoreLog(base.Resource):\nclass Instances(base.ManagerWithFind):\nclass InstanceStatus(object):\n    def __repr__(self):\n    def list(self, tenant_id=None, datastore", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "            MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(timezone=self.__timezone)\n                return self.__parser.parse(ping_lines)\n            except ParseError:\n                pass\n\n        raise ParseError(f\"failed", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate.getText()));\r\n        } else {\r\n            JOptionPane.showMessageDialog(null,\r\n                    \"Frame rate must be at least 1\");\r\n            m.videoSetFrameRate.setText(\"1\");\r\n        }\r\n\r\n        // set width\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) >", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "            self._probe = probe\n        # Set the parameters.\n        self._set_params(**kwargs)\n        # Create the temporary directory.\n        self._create_tempdir()\n        # Create the spike store.\n        self._create_spike_store()\n        # Create the extractor.\n        self._create_extractor()\n        #", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.buildPingUri(context.getUrl(), context.getProtocolVersion());\n        final BoundRequestBuilder", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "      self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def get_block(self, node):\n    \"\"\"\n      Returns the basic block associated with the given CFG node.\n    \"\"\"\n    return self._block_nodes.get(node, None)\n\n  def get_node(self, block):\n    \"\"\"\n", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "        ObservableRegistry.getObservable(QRCodeFragment.class).register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getObservable(QRCodeFragment.class).remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "  public void visit(final InExp inExp) throws QueryException {\n    result.append(OPEN_BRACKET);\n    visit(inExp.getColumn());\n    result.append(\" \").append(Operator.IN.getValue()).append(\" \");\n    result.append(OPEN_BRACKET);\n    for (final Object value : inExp.getValues()) {\n     ", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile input = new File(basePath + \"/test1.xml\");\n\t\t\tFile expected = new File(basePath + \"/test1.xforms\");\n\t\t\tFile generated = ddi2xforms.generate(input, null, \"test1\");\n\t\t\tDiff diff = xmlDiff.diff(expected, generated);\n\t\t\tAssertions.assertFalse(diff", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "            DiscreteDistribution(np.array([0.5, 0.5]), np.array([0, 1])).draw(1)[0],\n            0,\n        )\n        self.assertEqual(\n            DiscreteDistribution(np.array([0.5, 0.5]), np.array([0, 1])).", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpad state\n        state = stateFactory.createState(VpaidState.class);\n\n        assertThat(state instanceof TestVpadState, is(true));\n\n        //fetch cue", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(final BooleanTag tag, final boolean value) {\n\t\tValidity validity = validities.get(tag);\n\t\tif (validity == null) {\n\t\t\tvalidities.put(tag, Validity.of(tag, value));\n\t\t} else {\n\t\t\tvalidity.acceptBoolean(value);\n\t\t}\n\t}\n\t\n", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "        self.assertEqual(\"Your child\", replace_blank_name(name=None, language=\"Hindi\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=\"\", language=\"Hindi\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=\" \", language=\"Hindi\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                        expectLastCall().andThrow(new ExpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfTheSystem();\n                                    return GIVEN", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        if rem:\n            # map the remaining bits as padding\n            self.append( Bit(self.rest_name, rem) )\n            # TODO: check if rem is a multiple of 8, and if not, \n            #       add padding bits to make it so\n            #       (for the sake of the", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "        for cls in walk_subclasses(model):\n            if cls.Meta.abstract:\n                continue\n\n            # noinspection PyProtectedMember\n            cls.Meta._engine = self\n            cls.Meta._table_name = self._compute_table_name(cls)\n            cls.Meta._table = None\n\n            # noinspection PyProtectedMember\n", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "resposta = self.ativar_sat()\n```\n\n## Your task: \nPlease modify the code to implement a new method `ativar_sat` in the `FuncoesSAT` class. This method should send an HTTP POST request to the endpoint 'ativarsat' with the necessary parameters. The response should be parsed", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "    class NotAModel:\n        pass\n    engine.bind(NotAModel)\n    # no exception raised\n\n    with pytest.raises(InvalidModel):\n        engine.bind(NotAModel)\n\n\ndef test_bind_abstract(engine):\n    \"\"\"Can bind abstract models\"\"\"\n    class AbstractModel(BaseModel):\n        class Meta:\n           ", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "    assert u6.base_value == 1.0 / (mass_sun_kg * m_per_pc**3)\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"Msun/kpc**3\")\n    assert u7.base_value == 1.0 / (mass_sun_kg * m", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "tests/unit/pywbemcli/test_instance.py\n    def test_instance_references(self):\n        \"\"\"\n        Test the instance references command.\n        \"\"\"\n        # pylint: disable=too-many-statements\n        # pylint: disable=too-many-branches\n        # pylint: disable=too-many-locals\n        # pylint", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "        List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule());\n        modules.add(new LoanModule());\n        modules.forEach(module -> {\n            if (module.initialize(logger, container)) {\n                logger.info(\"Module \" + module.getName() + \" has been enabled!\");\n            } else {\n                logger.warn(\"", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "        tag = TAG()\n        ckresult(\n            self._call(\n                \"FMOD_Sound_GetTag\",\n                c_int(index),\n                c_char_p(name),\n                byref(tag),\n            )\n        )\n        return tag\n\n    def set_tag(self, tag):\n        \"\"\"Set a metadata tag.\n\n        '", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                    public void startEditAccountActivity(Account account) {\n                        Intent intent = EditActivity.getIntent(MainActivity.this,\n                                R.string.title_activity_edit_account,\n                                account, new AccountEditController(),\n                                R.drawable.ic_account_circle_black_24dp,\n                                R.string.action_edit_account,\n                                R.string.action_cancel);\n                        startActivityForResult", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<ImgurResponseWrapper<List<Integer>>> listAccountImageIds(\n\t\t\t", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "        resource = ThermometerResource(aircraft.sensors.thermometer)\n\nclass PitotTubeResourceTests(TestCase):\n    def test_get_pitot_tube_data(self):\n        huginn_data_path = configuration.get_data_path()\n\n        fdm_builder = FDMBuilder(huginn_data_path)\n        fd", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "    column = User.age\n    value = 3\n    expected_ref = \"#n0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_names = {\"#n0\": \"d_age\"}\n    expected_values = {\":v0\": expected_action.value}\n\n    ref, action = reference", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "            Platform.runLater(new Runnable() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tAlert alert = new Alert(AlertType.ERROR, \"Error: \" + e.getMessage(), ButtonType.OK);\r\n\t\t\t\t\talert.showAndWait();\r\n\t\t\t\t}\r\n\t\t\t});\r\n            return false;\r\n        }\r\n        \r\n        if (result", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "            comment_form = self.form_class()\n        else:\n            comment_form = self.form_class(initial={'user' : 'Anonymous'})\n        paginator = Paginator(nodes, 10)\n        page = request.GET.get('page')\n        try:\n            comments = paginator.page(page)\n        except PageNotAnInteger:\n            comments =", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending gifs\n     *\n     * @param serviceIds a {@link Map} of a collection of ids for better content delivery\n     * @param limit      <b>bucket", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "            of(mConnectionSuccessListener).ifPresent(successListener -> successListener.failed(connectionErrorCode(connectionErrorCode)));\n            wifiLog(\"ERROR CONNECTING: \" + connectionErrorCode(connectionErrorCode));\n        }\n    };\n\n    @NonNull\n    private DisconnectionErrorCode connectionErrorCode(@NonNull ConnectionErrorCode connectionErrorCode) {\n        switch (connectionErrorCode) {\n", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "mobile/src/main/java/de/unikassel/iaas/mobile/activities/MainActivity.java\npublic class MainActivity extends AppCompatActivity\r\n{\r\n    private static final String TAG = \"MainActivity\";\r\n    private static final int    REQUEST_CODE = 1;\r\n    private static final int    PERMISSION_REQUEST_CODE = 1;\r\n    private static final", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "        for (PlaySession ps : stack.getPlaySessions()) {\n            ps.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "    def __init__(self, log_path, vad_path, segmentation_path, **kwargs):\n        super().__init__(log_path, **kwargs)\n        self.vad_path = vad_path\n        self.segmentation_path = segmentation_path\n        self.segmentation_options = kwargs\n        self.segmentation_options[\"vad", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "    private final Deployments deployments;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final Jobs jobs;\n    private final Errands errands;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\npyfmodex/enums.py\nclass RESULT(Enum):\n    \"\"\"FMOD error codes.\"\"\"\n\n    OK = 0\n    \"\"\"No error.\"\"\"\n\n    ERR_BADCOMMAND = 1\n", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "                bitpos_start=section.bitpos_start + section.nbits\n            )\n            bit_writer.set_pos(nbytes_write * NBITS_PER_BYTE)\n\n        # TODO: 190 YYY\n        # TODO: 191 YYY\n        # TODO: 192 YYY\n        # TODO: 193 Y", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "        form = ReportAbuseForm(request.POST)\n\n        if form.is_valid():\n            comments = form.cleaned_data['comments']\n\n            AbuseReport.objects.create(\n                logged_against=logged_against,\n                logged_by=logged_by,\n                abuse_comment=comments,\n            )\n\n            messages.success(request, _(\n                '", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "    public void listenToResultSet(final BenchmarkMethod meth, final AbstractMeter meter, final double data) {\n        final NiceTable table = new NiceTable(4);\n        table.addHeader(\"Method\", \"Meter\", \"Mean\", \"StdDev\");\n        table.addHeader(\"----\", \"----\", \"----\", \"", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "        ProtTestFacade facade = factory.getFacade(args);\n        facade.run();\n        finalize(0);\n    }\n\n    /**\n     * Finalize the application.\n     * \n     * @param exitCode the exit code\n     */\n    public static void finalize(int exitCode) {\n        if (MPJ_RUN) {\n", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(ID(\"myRecording\"), URL(\"http://www.tropo.com\"), BEEP(true), SEND_TONES(true), EXIT_TONE(\"1\"), MUTE(false));\n\t\ttropo.on(EVENT(\"continue\"), Do.say(\"Thank you for your call.\"));\n\t\ttropo.on(EVENT(\"", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "                VerificadorDePrazos.estaNoPrazo(listaDeRespostas.getPropriedades().getPrazo())) {\n            nenvios = listaDeRespostas.getPropriedades().getNumeroDeEnvios();\n            nmaxenvios = listaDeRespostas.getPropried", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(ProgramPageView.class);\n\t\t\t\t\tadapter.setTracks(ProgramManager.getInstance().getTracks());\n\t\t\t\t\tmViewPager.setAdapter(adapter);\n\t\t\t\t\tmViewPager.setOnPageChangeListener", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "    PlayerUIController controller;\n\n    @Mock\n    AdInterface adInterface;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;\n\n    @Mock\n    CuePointCallBack cuePointCallBack;\n\n    @Mock\n    Ad", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tappEvent.fireEvent(AppEvent.Event.EXIT) ;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// create the main window\n\t\t\tMainWindow mainWindow = new MainWindow(stage, appEvent) ;\n\t\t\t\n\t\t\t// authorize the user\n\t\t\tauthorize(new SimpleBrowserImpl(), new Callback<Credential>() {\n\n\t\t\t\t@Override", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "    String className = type.getQualifiedName().toString();\n    ClassName adapterClassName = adapterName(ClassName.get(packageName, className),\n        INJECT_ADAPTER_SUFFIX);\n    ClassName bindingClassName = ClassName.get(packageName, className + \"$Binding\");\n    ClassName bindingOfClassName = ClassName.get(packageName, className + \"$BindingOf\");\n   ", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\r\n         */\r\n        public static void enableReceiveNormalMsg(boolean enable){\rNext line of code:\n            new EnableReceive", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '--message-type', 'c", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "    elif is_comment_node(elem) and context.parent_map.get(elem) is None:\n        return f'/comment()[{context.position}]'\nNext line of code:\n    elif is_document_node(elem):\n        return path\nNext line of code:\n    elif elem == root:\n        return '/'\nNext line of code:\n   ", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "t = Table({'a': [1, 2, 3], 'b': [4, 5, 6]})\nt.add_column('c', [7, 8, 9])\nt.add_column('d', [10, 11, 12])\nt.add_column('e', [", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "                TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n        }\n    }\n\n    private void sendUserInfoRequest()\n    {\n        synchronized (_lockObject)\n        {\n            if (_pendingAudiologistInfo)\n            {\n                return;\n            }\n\n           ", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append(dmy_leftvar)\n\n\t\tEXOG.append", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "        assertThat(main.getStackTrace().getHead().getMethodName(), equalTo(\"busyWaiting\"));\n        assertThat(main.getStackTrace().getHead().getClassName(), equalTo(ThreadDumpFactoryVendorTest.class.getName()));\n        assertThat(main.getStackTrace().getHead().getLineNumber(), equalTo(33));\n        assertThat(main.getStackTrace().get(1).", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "                DatePicker datePicker = new DatePicker(this, DatePicker.YEAR_MONTH_DAY);\n                datePicker.setRange(2000, 2050);\n                datePicker.setSelectedItem(mRecord.getRecordTime().getYear(),\n                        mRecord.getRecordTime().getMonth(),\n                        mRecord.getRecordTime().getDay());\n                datePicker.setOnDatePickListener", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "mobile/src/main/java/de/unima/sensorcollector/CollectorConstants.java\npublic class CollectorConstants\r\n{\r\n    public static final int[] SENSOR_TYPES = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "    private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private ViewPager mViewPager;\n    private TabLayout tabLayout;\n    private CheckBox cbHook90;\n    private CheckBox cbHook90Hook;\n    private CheckBox cbHook90Hook2;\n    private CheckBox cbHook90Hook3;\n", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "        self.tracerouter = Tracerouter.Tracerouter()\n        self.pcap_logger = PcapLogger.PcapLogger(self)\n        self.pcap_logger.start()\n        self.pcap_logger.setDaemon(True)\n        self.pcap_logger.set_skew(self._get_skew())\n        self.pcap_logger.set_private", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "deltas = api_client.deltas.since(\"cursor\")\nnylas/client/delta_models.py\nclass Deltas(RestfulModel):\n    attrs = (\n        \"cursor_start\",\n        \"cursor_end\",\n        \"_deltas\",\n    )\n\n    def __init__(self, api, data):\n        super(Deltas", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "        self,\n        emails,\n        start,\n        end,\n        duration,\n        interval,\n        free_busy_type,\n        response_format,\n    ):\n        \"\"\"\n        Get free/busy information for a list of email addresses.\n\n        Args:\n            emails (list): A list of email addresses to get free/busy information for", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "    this);\n    activityLightLevelManager = new ActivityLightLevelManager(activityLightLevelChanger, sharedPreferences);\n    activityLightLevelManager.setNightMode(nightMode);\n\n    // Set up the UI\n    setContentView(R.layout.main);\n    skyView = findViewById(R.id.skyView);\n    skyView.setLayerType(View", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "            non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_thermochemical_prob = 0\n        lnlike = multi_phase_error + eq_thermochemical_prob + act", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "            Str('Identity', Pt=ID(), Len=1, Trans='var') \\\r\n            ])\r\n        if with_options:\r\n            self.extend( [ \\\r\n                Str('LAI', Pt=LAI(), Len=3),\r\n                Str('LAI', Pt=LAI(), Len=3),\r\n                Str('L", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "        TcClassParser(self.__con).parse(device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output))\ntcconfig/parser/_tc.py\nclass TcParser(AbstractParser):\n    def __init__(self, con, tc_command_output, is_parse_filter_id, is_parse_in", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n\n    \ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "    def validation_error(exc_class):\n        def decorator(f):\n            @functools.wraps(f)\n            def _validate(*args, **kwargs):\n                try:\n                    return f(*args, **kwargs)\n                except (\n                    jsonschema.exceptions.ValidationError,\n                    SwaggerMappingError,\n                ) as exc:\n                    #", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
